/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CurveV1AdapterInterface extends ethers.utils.Interface {
  functions: {
    "creditFilter()": FunctionFragment;
    "creditManager()": FunctionFragment;
    "curvePoolAddress()": FunctionFragment;
    "exchange(int128,int128,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "creditFilter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "creditFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;

  events: {};
}

export class CurveV1Adapter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CurveV1AdapterInterface;

  functions: {
    creditFilter(overrides?: CallOverrides): Promise<[string]>;

    "creditFilter()"(overrides?: CallOverrides): Promise<[string]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    "creditManager()"(overrides?: CallOverrides): Promise<[string]>;

    curvePoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "curvePoolAddress()"(overrides?: CallOverrides): Promise<[string]>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  creditFilter(overrides?: CallOverrides): Promise<string>;

  "creditFilter()"(overrides?: CallOverrides): Promise<string>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  "creditManager()"(overrides?: CallOverrides): Promise<string>;

  curvePoolAddress(overrides?: CallOverrides): Promise<string>;

  "curvePoolAddress()"(overrides?: CallOverrides): Promise<string>;

  exchange(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exchange(int128,int128,uint256,uint256)"(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    min_dy: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    creditFilter(overrides?: CallOverrides): Promise<string>;

    "creditFilter()"(overrides?: CallOverrides): Promise<string>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    "creditManager()"(overrides?: CallOverrides): Promise<string>;

    curvePoolAddress(overrides?: CallOverrides): Promise<string>;

    "curvePoolAddress()"(overrides?: CallOverrides): Promise<string>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    creditFilter(overrides?: CallOverrides): Promise<BigNumber>;

    "creditFilter()"(overrides?: CallOverrides): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    "creditManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "curvePoolAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    creditFilter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditFilter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curvePoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
