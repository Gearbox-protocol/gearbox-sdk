/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface IPriceOracleV2EventsInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "NewPriceFeed"): EventFragment;
}

export namespace NewPriceFeedEvent {
  export type InputTuple = [token: AddressLike, priceFeed: AddressLike];
  export type OutputTuple = [token: string, priceFeed: string];
  export interface OutputObject {
    token: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracleV2Events extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracleV2Events;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleV2EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "NewPriceFeed"
  ): TypedContractEvent<
    NewPriceFeedEvent.InputTuple,
    NewPriceFeedEvent.OutputTuple,
    NewPriceFeedEvent.OutputObject
  >;

  filters: {
    "NewPriceFeed(address,address)": TypedContractEvent<
      NewPriceFeedEvent.InputTuple,
      NewPriceFeedEvent.OutputTuple,
      NewPriceFeedEvent.OutputObject
    >;
    NewPriceFeed: TypedContractEvent<
      NewPriceFeedEvent.InputTuple,
      NewPriceFeedEvent.OutputTuple,
      NewPriceFeedEvent.OutputObject
    >;
  };
}
