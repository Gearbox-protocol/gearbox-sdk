/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface ITokenTestSuiteInterface extends utils.Interface {
  functions: {
    "addressOf(uint8)": FunctionFragment;
    "approve(uint8,address,address,uint256)": FunctionFragment;
    "approve(uint8,address,address)": FunctionFragment;
    "approve(address,address,address)": FunctionFragment;
    "balanceOf(uint8,address)": FunctionFragment;
    "mint(address,address,uint256)": FunctionFragment;
    "mint(uint8,address,uint256)": FunctionFragment;
    "symbols(uint8)": FunctionFragment;
    "tokenCount()": FunctionFragment;
    "tokenIndexes(address)": FunctionFragment;
    "tokenTypes(uint8)": FunctionFragment;
    "topUpWETH(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressOf"
      | "approve(uint8,address,address,uint256)"
      | "approve(uint8,address,address)"
      | "approve(address,address,address)"
      | "balanceOf"
      | "mint(address,address,uint256)"
      | "mint(uint8,address,uint256)"
      | "symbols"
      | "tokenCount"
      | "tokenIndexes"
      | "tokenTypes"
      | "topUpWETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(uint8,address,address,uint256)",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(uint8,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,address,address)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint8,address,uint256)",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "symbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndexes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpWETH",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addressOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(uint8,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(uint8,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint8,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbols", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topUpWETH", data: BytesLike): Result;

  events: {};
}

export interface ITokenTestSuite extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenTestSuiteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressOf(t: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "approve(uint8,address,address,uint256)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(uint8,address,address)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,address,address)"(
      token: string,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      t: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "mint(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(uint8,address,uint256)"(
      t: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbols(t: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIndexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number] & { t: number }>;

    tokenTypes(t: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    topUpWETH(
      onBehalfOf: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressOf(t: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "approve(uint8,address,address,uint256)"(
    t: BigNumberish,
    holder: string,
    targetContract: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(uint8,address,address)"(
    t: BigNumberish,
    holder: string,
    targetContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,address,address)"(
    token: string,
    holder: string,
    targetContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    t: BigNumberish,
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mint(address,address,uint256)"(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(uint8,address,uint256)"(
    t: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbols(t: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<number>;

  tokenTypes(t: BigNumberish, overrides?: CallOverrides): Promise<number>;

  topUpWETH(
    onBehalfOf: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressOf(t: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "approve(uint8,address,address,uint256)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(uint8,address,address)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,address,address)"(
      token: string,
      holder: string,
      targetContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      t: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint8,address,uint256)"(
      t: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbols(t: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<number>;

    tokenTypes(t: BigNumberish, overrides?: CallOverrides): Promise<number>;

    topUpWETH(
      onBehalfOf: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addressOf(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "approve(uint8,address,address,uint256)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(uint8,address,address)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,address,address)"(
      token: string,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      t: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(uint8,address,uint256)"(
      t: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbols(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenTypes(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    topUpWETH(
      onBehalfOf: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressOf(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approve(uint8,address,address,uint256)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(uint8,address,address)"(
      t: BigNumberish,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,address,address)"(
      token: string,
      holder: string,
      targetContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      t: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mint(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint8,address,uint256)"(
      t: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbols(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIndexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTypes(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topUpWETH(
      onBehalfOf: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
