/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type MultiCallStruct = { target: string; callData: BytesLike };

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type PathFinderResultStruct = {
  amount: BigNumberish;
  gasUsage: BigNumberish;
  calls: MultiCallStruct[];
};

export type PathFinderResultStructOutput = [
  BigNumber,
  BigNumber,
  MultiCallStructOutput[]
] & { amount: BigNumber; gasUsage: BigNumber; calls: MultiCallStructOutput[] };

export type PathOptionStruct = {
  target: string;
  option: BigNumberish;
  totalOptions: BigNumberish;
};

export type PathOptionStructOutput = [string, number, number] & {
  target: string;
  option: number;
  totalOptions: number;
};

export type BalanceStruct = { token: string; balance: BigNumberish };

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export interface IPathFinderInterface extends utils.Interface {
  functions: {
    "componentAddressById(uint8)": FunctionFragment;
    "findAllSwaps(address,uint256,address,address,address[],uint256)": FunctionFragment;
    "findBestClosePath(address,address[],uint256,(address,uint8,uint8)[],uint256)": FunctionFragment;
    "findOneTokenPath(address,uint256,address,address,address[],uint256)": FunctionFragment;
    "findOpenStrategyPath(address,(address,uint256)[],address,address[],uint256)": FunctionFragment;
    "getGasPriceTokenOutRAY(address)": FunctionFragment;
    "isPathFinderConfigurator(address)": FunctionFragment;
    "tokenTypes(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "componentAddressById"
      | "findAllSwaps"
      | "findBestClosePath"
      | "findOneTokenPath"
      | "findOpenStrategyPath"
      | "getGasPriceTokenOutRAY"
      | "isPathFinderConfigurator"
      | "tokenTypes"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "componentAddressById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findAllSwaps",
    values: [string, BigNumberish, string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestClosePath",
    values: [string, string[], BigNumberish, PathOptionStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findOneTokenPath",
    values: [string, BigNumberish, string, string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findOpenStrategyPath",
    values: [string, BalanceStruct[], string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPriceTokenOutRAY",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPathFinderConfigurator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenTypes", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "componentAddressById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAllSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestClosePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOneTokenPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOpenStrategyPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasPriceTokenOutRAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPathFinderConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "PathFinderComponentUpdate(uint8,address)": EventFragment;
    "ResolverUpdate(uint8,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PathFinderComponentUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolverUpdate"): EventFragment;
}

export interface PathFinderComponentUpdateEventObject {
  arg0: number;
  arg1: string;
}
export type PathFinderComponentUpdateEvent = TypedEvent<
  [number, string],
  PathFinderComponentUpdateEventObject
>;

export type PathFinderComponentUpdateEventFilter =
  TypedEventFilter<PathFinderComponentUpdateEvent>;

export interface ResolverUpdateEventObject {
  arg0: number;
  arg1: number;
  arg2: number;
}
export type ResolverUpdateEvent = TypedEvent<
  [number, number, number],
  ResolverUpdateEventObject
>;

export type ResolverUpdateEventFilter = TypedEventFilter<ResolverUpdateEvent>;

export interface IPathFinder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPathFinderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    componentAddressById(
      pf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findAllSwaps(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestClosePath(
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findOneTokenPath(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findOpenStrategyPath(
      creditManager: string,
      balances: BalanceStruct[],
      target: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGasPriceTokenOutRAY(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasPrice: BigNumber }>;

    isPathFinderConfigurator(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  componentAddressById(
    pf: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  findAllSwaps(
    tokenIn: string,
    amount: BigNumberish,
    tokenOut: string,
    creditAccount: string,
    connectors: string[],
    slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestClosePath(
    creditAccount: string,
    connectors: string[],
    slippage: BigNumberish,
    pathOptions: PathOptionStruct[],
    iterations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findOneTokenPath(
    tokenIn: string,
    amount: BigNumberish,
    tokenOut: string,
    creditAccount: string,
    connectors: string[],
    slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findOpenStrategyPath(
    creditManager: string,
    balances: BalanceStruct[],
    target: string,
    connectors: string[],
    slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGasPriceTokenOutRAY(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPathFinderConfigurator(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenTypes(arg0: string, overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    componentAddressById(
      pf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    findAllSwaps(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PathFinderResultStructOutput[]>;

    findBestClosePath(
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PathFinderResultStructOutput>;

    findOneTokenPath(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PathFinderResultStructOutput>;

    findOpenStrategyPath(
      creditManager: string,
      balances: BalanceStruct[],
      target: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BalanceStructOutput[], PathFinderResultStructOutput]>;

    getGasPriceTokenOutRAY(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPathFinderConfigurator(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PathFinderComponentUpdate(uint8,address)"(
      arg0?: BigNumberish | null,
      arg1?: string | null
    ): PathFinderComponentUpdateEventFilter;
    PathFinderComponentUpdate(
      arg0?: BigNumberish | null,
      arg1?: string | null
    ): PathFinderComponentUpdateEventFilter;

    "ResolverUpdate(uint8,uint8,uint8)"(
      arg0?: BigNumberish | null,
      arg1?: BigNumberish | null,
      arg2?: BigNumberish | null
    ): ResolverUpdateEventFilter;
    ResolverUpdate(
      arg0?: BigNumberish | null,
      arg1?: BigNumberish | null,
      arg2?: BigNumberish | null
    ): ResolverUpdateEventFilter;
  };

  estimateGas: {
    componentAddressById(
      pf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findAllSwaps(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestClosePath(
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findOneTokenPath(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findOpenStrategyPath(
      creditManager: string,
      balances: BalanceStruct[],
      target: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGasPriceTokenOutRAY(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPathFinderConfigurator(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    componentAddressById(
      pf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findAllSwaps(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestClosePath(
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findOneTokenPath(
      tokenIn: string,
      amount: BigNumberish,
      tokenOut: string,
      creditAccount: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findOpenStrategyPath(
      creditManager: string,
      balances: BalanceStruct[],
      target: string,
      connectors: string[],
      slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGasPriceTokenOutRAY(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPathFinderConfigurator(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTypes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
