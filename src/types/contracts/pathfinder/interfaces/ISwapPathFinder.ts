/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type SwapTaskStruct = {
  swapOperation: BigNumberish;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: BigNumberish;
  slippage: BigNumberish;
  externalSlippage: boolean;
};

export type SwapTaskStructOutput = [
  number,
  string,
  string,
  string,
  string[],
  BigNumber,
  BigNumber,
  boolean
] & {
  swapOperation: number;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: BigNumber;
  slippage: BigNumber;
  externalSlippage: boolean;
};

export type MultiCallStruct = { target: string; callData: BytesLike };

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type SwapQuoteStruct = {
  multiCall: MultiCallStruct;
  amount: BigNumberish;
  found: boolean;
  gasUsage: BigNumberish;
};

export type SwapQuoteStructOutput = [
  MultiCallStructOutput,
  BigNumber,
  boolean,
  BigNumber
] & {
  multiCall: MultiCallStructOutput;
  amount: BigNumber;
  found: boolean;
  gasUsage: BigNumber;
};

export interface ISwapPathFinderInterface extends utils.Interface {
  functions: {
    "findAllSwaps((uint8,address,address,address,address[],uint256,uint256,bool),address[])": FunctionFragment;
    "findBestSwap((uint8,address,address,address,address[],uint256,uint256,bool),address[])": FunctionFragment;
    "getBestDirectPairSwap((uint8,address,address,address,address[],uint256,uint256,bool),address[],uint256)": FunctionFragment;
    "getPathFinder(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "findAllSwaps"
      | "findBestSwap"
      | "getBestDirectPairSwap"
      | "getPathFinder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findAllSwaps",
    values: [SwapTaskStruct, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestSwap",
    values: [SwapTaskStruct, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestDirectPairSwap",
    values: [SwapTaskStruct, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathFinder",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "findAllSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestDirectPairSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathFinder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISwapPathFinder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapPathFinderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findAllSwaps(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPathFinder(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pathFinder: string }>;
  };

  findAllSwaps(
    swapTask: SwapTaskStruct,
    adapters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestSwap(
    swapTask: SwapTaskStruct,
    adapters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestDirectPairSwap(
    swapTask: SwapTaskStruct,
    adapters: string[],
    gasPriceInTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPathFinder(adapter: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    findAllSwaps(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: CallOverrides
    ): Promise<SwapQuoteStructOutput[]>;

    findBestSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: CallOverrides
    ): Promise<SwapQuoteStructOutput>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SwapQuoteStructOutput>;

    getPathFinder(adapter: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    findAllSwaps(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPathFinder(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    findAllSwaps(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPathFinder(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
