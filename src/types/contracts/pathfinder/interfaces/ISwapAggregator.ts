/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type BalanceStruct = { token: string; balance: BigNumberish };

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export type TokenAdaptersStruct = {
  token: string;
  depositAdapter: string;
  withdrawAdapter: string;
};

export type TokenAdaptersStructOutput = [string, string, string] & {
  token: string;
  depositAdapter: string;
  withdrawAdapter: string;
};

export type MultiCallStruct = { target: string; callData: BytesLike };

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type StrategyPathTaskStruct = {
  creditAccount: string;
  balances: BalanceStruct[];
  target: string;
  connectors: string[];
  adapters: string[];
  slippagePerStep: BigNumberish;
  force: boolean;
  targetType: BigNumberish;
  foundAdapters: TokenAdaptersStruct[];
  gasPriceTargetRAY: BigNumberish;
  gasUsage: BigNumberish;
  initTargetBalance: BigNumberish;
  calls: MultiCallStruct[];
};

export type StrategyPathTaskStructOutput = [
  string,
  BalanceStructOutput[],
  string,
  string[],
  string[],
  BigNumber,
  boolean,
  number,
  TokenAdaptersStructOutput[],
  BigNumber,
  BigNumber,
  BigNumber,
  MultiCallStructOutput[]
] & {
  creditAccount: string;
  balances: BalanceStructOutput[];
  target: string;
  connectors: string[];
  adapters: string[];
  slippagePerStep: BigNumber;
  force: boolean;
  targetType: number;
  foundAdapters: TokenAdaptersStructOutput[];
  gasPriceTargetRAY: BigNumber;
  gasUsage: BigNumber;
  initTargetBalance: BigNumber;
  calls: MultiCallStructOutput[];
};

export type SwapTaskStruct = {
  swapOperation: BigNumberish;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: BigNumberish;
  slippage: BigNumberish;
  externalSlippage: boolean;
};

export type SwapTaskStructOutput = [
  number,
  string,
  string,
  string,
  string[],
  BigNumber,
  BigNumber,
  boolean
] & {
  swapOperation: number;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: BigNumber;
  slippage: BigNumber;
  externalSlippage: boolean;
};

export type SwapQuoteStruct = {
  multiCall: MultiCallStruct;
  amount: BigNumberish;
  found: boolean;
  gasUsage: BigNumberish;
};

export type SwapQuoteStructOutput = [
  MultiCallStructOutput,
  BigNumber,
  boolean,
  BigNumber
] & {
  multiCall: MultiCallStructOutput;
  amount: BigNumber;
  found: boolean;
  gasUsage: BigNumber;
};

export interface ISwapAggregatorInterface extends utils.Interface {
  functions: {
    "findAllSwaps(address,uint256,bool,(address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findBestAllInputSwap(address,address,(address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findBestAllInputSwapOrRevert(address,address,(address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findBestSwap(address,uint256,address,(address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findBestSwapOrRevert(address,uint256,address,(address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findBestSwapQuote((uint8,address,address,address,address[],uint256,uint256,bool),address[])": FunctionFragment;
    "getBestDirectPairSwap((uint8,address,address,address,address[],uint256,uint256,bool),address[],uint256)": FunctionFragment;
    "getComponentId()": FunctionFragment;
    "swapAllNormalTokens((address,(address,uint256)[],address,address[],address[],uint256,bool,uint8,(address,address,address)[],uint256,uint256,uint256,(address,bytes)[]),address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "findAllSwaps"
      | "findBestAllInputSwap"
      | "findBestAllInputSwapOrRevert"
      | "findBestSwap"
      | "findBestSwapOrRevert"
      | "findBestSwapQuote"
      | "getBestDirectPairSwap"
      | "getComponentId"
      | "swapAllNormalTokens"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findAllSwaps",
    values: [string, BigNumberish, boolean, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestAllInputSwap",
    values: [string, string, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestAllInputSwapOrRevert",
    values: [string, string, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestSwap",
    values: [string, BigNumberish, string, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestSwapOrRevert",
    values: [string, BigNumberish, string, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestSwapQuote",
    values: [SwapTaskStruct, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestDirectPairSwap",
    values: [SwapTaskStruct, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAllNormalTokens",
    values: [StrategyPathTaskStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "findAllSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestAllInputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestAllInputSwapOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestSwapOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestSwapQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestDirectPairSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAllNormalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface ISwapAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findAllSwaps(
      tokenIn: string,
      amountIn: BigNumberish,
      isAll: boolean,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestAllInputSwap(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestAllInputSwapOrRevert(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestSwap(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestSwapOrRevert(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findBestSwapQuote(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getComponentId(overrides?: CallOverrides): Promise<[number]>;

    swapAllNormalTokens(
      task: StrategyPathTaskStruct,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  findAllSwaps(
    tokenIn: string,
    amountIn: BigNumberish,
    isAll: boolean,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestAllInputSwap(
    tokenIn: string,
    tokenOut: string,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestAllInputSwapOrRevert(
    tokenIn: string,
    tokenOut: string,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestSwap(
    tokenIn: string,
    amountIn: BigNumberish,
    tokenOut: string,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestSwapOrRevert(
    tokenIn: string,
    amountIn: BigNumberish,
    tokenOut: string,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findBestSwapQuote(
    swapTask: SwapTaskStruct,
    adapters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestDirectPairSwap(
    swapTask: SwapTaskStruct,
    adapters: string[],
    gasPriceInTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getComponentId(overrides?: CallOverrides): Promise<number>;

  swapAllNormalTokens(
    task: StrategyPathTaskStruct,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    findAllSwaps(
      tokenIn: string,
      amountIn: BigNumberish,
      isAll: boolean,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<StrategyPathTaskStructOutput[]>;

    findBestAllInputSwap(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, StrategyPathTaskStructOutput] & { amountOut: BigNumber }
    >;

    findBestAllInputSwapOrRevert(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, StrategyPathTaskStructOutput] & { amountOut: BigNumber }
    >;

    findBestSwap(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, StrategyPathTaskStructOutput] & { amountOut: BigNumber }
    >;

    findBestSwapOrRevert(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, StrategyPathTaskStructOutput] & { amountOut: BigNumber }
    >;

    findBestSwapQuote(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: CallOverrides
    ): Promise<SwapQuoteStructOutput>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SwapQuoteStructOutput>;

    getComponentId(overrides?: CallOverrides): Promise<number>;

    swapAllNormalTokens(
      task: StrategyPathTaskStruct,
      target: string,
      overrides?: CallOverrides
    ): Promise<StrategyPathTaskStructOutput>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    findAllSwaps(
      tokenIn: string,
      amountIn: BigNumberish,
      isAll: boolean,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestAllInputSwap(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestAllInputSwapOrRevert(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestSwap(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestSwapOrRevert(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findBestSwapQuote(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getComponentId(overrides?: CallOverrides): Promise<BigNumber>;

    swapAllNormalTokens(
      task: StrategyPathTaskStruct,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    findAllSwaps(
      tokenIn: string,
      amountIn: BigNumberish,
      isAll: boolean,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestAllInputSwap(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestAllInputSwapOrRevert(
      tokenIn: string,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestSwap(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestSwapOrRevert(
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findBestSwapQuote(
      swapTask: SwapTaskStruct,
      adapters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestDirectPairSwap(
      swapTask: SwapTaskStruct,
      adapters: string[],
      gasPriceInTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getComponentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAllNormalTokens(
      task: StrategyPathTaskStruct,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
