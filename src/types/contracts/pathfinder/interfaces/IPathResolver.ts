/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type BalanceStruct = { token: string; balance: BigNumberish };

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export type TokenAdaptersStruct = { token: string; adapters: string[] };

export type TokenAdaptersStructOutput = [string, string[]] & {
  token: string;
  adapters: string[];
};

export type MultiCallStruct = { target: string; callData: BytesLike };

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type StrategyPathTaskStruct = {
  creditAccount: string;
  balances: BalanceStruct[];
  target: string;
  connectors: string[];
  adapters: string[];
  slippage: BigNumberish;
  targetType: BigNumberish;
  foundAdapters: TokenAdaptersStruct[];
  gasPriceTargetRAY: BigNumberish;
  gasUsage: BigNumberish;
  initTargetBalance: BigNumberish;
  calls: MultiCallStruct[];
};

export type StrategyPathTaskStructOutput = [
  string,
  BalanceStructOutput[],
  string,
  string[],
  string[],
  BigNumber,
  number,
  TokenAdaptersStructOutput[],
  BigNumber,
  BigNumber,
  BigNumber,
  MultiCallStructOutput[]
] & {
  creditAccount: string;
  balances: BalanceStructOutput[];
  target: string;
  connectors: string[];
  adapters: string[];
  slippage: BigNumber;
  targetType: number;
  foundAdapters: TokenAdaptersStructOutput[];
  gasPriceTargetRAY: BigNumber;
  gasUsage: BigNumber;
  initTargetBalance: BigNumber;
  calls: MultiCallStructOutput[];
};

export interface IPathResolverInterface extends utils.Interface {
  functions: {
    "findOneTokenPath(uint8,address,uint256,(address,(address,uint256)[],address,address[],address[],uint256,uint8,(address,address[])[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "findOpenStrategyPath((address,(address,uint256)[],address,address[],address[],uint256,uint8,(address,address[])[],uint256,uint256,uint256,(address,bytes)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "findOneTokenPath" | "findOpenStrategyPath"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findOneTokenPath",
    values: [BigNumberish, string, BigNumberish, StrategyPathTaskStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findOpenStrategyPath",
    values: [StrategyPathTaskStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "findOneTokenPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOpenStrategyPath",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPathResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPathResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findOneTokenPath(
      typeIn: BigNumberish,
      tokenIn: string,
      amount: BigNumberish,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findOpenStrategyPath(
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  findOneTokenPath(
    typeIn: BigNumberish,
    tokenIn: string,
    amount: BigNumberish,
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findOpenStrategyPath(
    task: StrategyPathTaskStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    findOneTokenPath(
      typeIn: BigNumberish,
      tokenIn: string,
      amount: BigNumberish,
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<StrategyPathTaskStructOutput>;

    findOpenStrategyPath(
      task: StrategyPathTaskStruct,
      overrides?: CallOverrides
    ): Promise<StrategyPathTaskStructOutput>;
  };

  filters: {};

  estimateGas: {
    findOneTokenPath(
      typeIn: BigNumberish,
      tokenIn: string,
      amount: BigNumberish,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findOpenStrategyPath(
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    findOneTokenPath(
      typeIn: BigNumberish,
      tokenIn: string,
      amount: BigNumberish,
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findOpenStrategyPath(
      task: StrategyPathTaskStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
