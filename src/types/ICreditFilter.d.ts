/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICreditFilterInterface extends ethers.utils.Interface {
  functions: {
    "allowContract(address)": FunctionFragment;
    "allowToken(address,uint256)": FunctionFragment;
    "allowedContracts(uint256)": FunctionFragment;
    "allowedContractsCount()": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowedTokensCount()": FunctionFragment;
    "calcCollateralProtection(address)": FunctionFragment;
    "calcCreditAccountAccruedInterest(address)": FunctionFragment;
    "calcCreditAccountHealthFactor(address)": FunctionFragment;
    "calcThresholdWeightedValue(address)": FunctionFragment;
    "calcTotalValue(address)": FunctionFragment;
    "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)": FunctionFragment;
    "checkSwapTokensAllowed(address,address,address,uint256,uint256)": FunctionFragment;
    "connectCreditManager(address)": FunctionFragment;
    "convertWithSlippage(address,address,uint256,uint256)": FunctionFragment;
    "getCreditAccountTokenById(address,uint256)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "revertIfContractNotAllowed(address)": FunctionFragment;
    "revertIfTokenNotAllowed(address)": FunctionFragment;
    "setCollateralProtection(address,uint256,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "updateCPandGetHealthFactor(address)": FunctionFragment;
    "updateCollateralProtection(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcCollateralProtection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountAccruedInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcThresholdWeightedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTotalValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSwapOperationAllowed",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSwapTokensAllowed",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectCreditManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertWithSlippage",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountTokenById",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfContractNotAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfTokenNotAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralProtection",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCPandGetHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralProtection",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCollateralProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountAccruedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcThresholdWeightedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSwapOperationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSwapTokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertWithSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfContractNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfTokenNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCPandGetHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralProtection",
    data: BytesLike
  ): Result;

  events: {
    "CollateralProtectionUpdate(address,address,uint256,uint256)": EventFragment;
    "ContractAllowed(address)": EventFragment;
    "TokenAllowed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralProtectionUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllowed"): EventFragment;
}

export class ICreditFilter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICreditFilterInterface;

  functions: {
    allowContract(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowContract(address)"(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowToken(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowToken(address,uint256)"(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedContracts(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allowedContracts(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allowedContractsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "allowedTokens(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedTokensCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allowedTokensCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcCollateralProtection(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCollateralProtection(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCreditAccountAccruedInterest(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCreditAccountHealthFactor(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCreditAccountHealthFactor(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcThresholdWeightedValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "calcThresholdWeightedValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    calcTotalValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "calcTotalValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    checkSwapOperationAllowed(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)"(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    connectCreditManager(
      poolService: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "connectCreditManager(address)"(
      poolService: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convertWithSlippage(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertWithSlippage(address,address,uint256,uint256)"(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreditAccountTokenById(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

    "getCreditAccountTokenById(address,uint256)"(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revertIfContractNotAllowed(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "revertIfContractNotAllowed(address)"(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revertIfTokenNotAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "revertIfTokenNotAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<[string]>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCollateralProtection(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCollateralProtection(address,address)"(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowContract(
    allowedContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowContract(address)"(
    allowedContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowToken(
    token: string,
    liquidityThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowToken(address,uint256)"(
    token: string,
    liquidityThreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowedContracts(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "allowedContracts(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "allowedContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowedTokens(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allowedTokens(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

  "allowedTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcCollateralProtection(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCollateralProtection(address)"(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCreditAccountAccruedInterest(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCreditAccountAccruedInterest(address)"(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCreditAccountHealthFactor(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCreditAccountHealthFactor(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcThresholdWeightedValue(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcThresholdWeightedValue(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTotalValue(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

  "calcTotalValue(address)"(
    holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkSwapOperationAllowed(
    creditAccount: string,
    swapContract: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)"(
    creditAccount: string,
    swapContract: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkSwapTokensAllowed(
    creditAccount: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
    creditAccount: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  connectCreditManager(
    poolService: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "connectCreditManager(address)"(
    poolService: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convertWithSlippage(
    tokenFrom: string,
    tokenTo: string,
    amount: BigNumberish,
    amountsOutTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertWithSlippage(address,address,uint256,uint256)"(
    tokenFrom: string,
    tokenTo: string,
    amount: BigNumberish,
    amountsOutTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreditAccountTokenById(
    creditAccount: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

  "getCreditAccountTokenById(address,uint256)"(
    creditAccount: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

  isTokenAllowed(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenAllowed(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revertIfContractNotAllowed(
    contractToCheck: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "revertIfContractNotAllowed(address)"(
    contractToCheck: string,
    overrides?: CallOverrides
  ): Promise<void>;

  revertIfTokenNotAllowed(
    token: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "revertIfTokenNotAllowed(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<void>;

  setCollateralProtection(
    creditAccount: string,
    amount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralProtection(address,uint256,uint256)"(
    creditAccount: string,
    amount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

  updateCPandGetHealthFactor(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCPandGetHealthFactor(address)"(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCollateralProtection(
    contributor: string,
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCollateralProtection(address,address)"(
    contributor: string,
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowContract(
      allowedContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowContract(address)"(
      allowedContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowToken(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "allowToken(address,uint256)"(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedContracts(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "allowedContracts(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "allowedTokens(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcCollateralProtection(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralProtection(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountAccruedInterest(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountHealthFactor(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountHealthFactor(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcThresholdWeightedValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcThresholdWeightedValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTotalValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTotalValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSwapOperationAllowed(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)"(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectCreditManager(
      poolService: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "connectCreditManager(address)"(
      poolService: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convertWithSlippage(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertWithSlippage(address,address,uint256,uint256)"(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountTokenById(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

    "getCreditAccountTokenById(address,uint256)"(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; balance: BigNumber }>;

    isTokenAllowed(token: string, overrides?: CallOverrides): Promise<boolean>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revertIfContractNotAllowed(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertIfContractNotAllowed(address)"(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfTokenNotAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertIfTokenNotAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCollateralProtection(
      contributor: string,
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCollateralProtection(address,address)"(
      contributor: string,
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CollateralProtectionUpdate(
      contributor: null,
      creditAccount: null,
      prevValue: null,
      updatedValue: null
    ): EventFilter;

    ContractAllowed(contractAddress: string | null): EventFilter;

    TokenAllowed(token: string | null, liquidityThreshold: null): EventFilter;
  };

  estimateGas: {
    allowContract(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allowContract(address)"(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowToken(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allowToken(address,uint256)"(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowedContracts(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedContracts(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedContractsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedTokens(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    "allowedTokensCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcCollateralProtection(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCollateralProtection(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountAccruedInterest(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountHealthFactor(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountHealthFactor(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcThresholdWeightedValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcThresholdWeightedValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTotalValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTotalValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSwapOperationAllowed(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)"(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    connectCreditManager(
      poolService: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "connectCreditManager(address)"(
      poolService: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convertWithSlippage(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertWithSlippage(address,address,uint256,uint256)"(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountTokenById(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountTokenById(address,uint256)"(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfContractNotAllowed(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revertIfContractNotAllowed(address)"(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfTokenNotAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revertIfTokenNotAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCollateralProtection(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCollateralProtection(address,address)"(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowContract(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowContract(address)"(
      allowedContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowToken(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowToken(address,uint256)"(
      token: string,
      liquidityThreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedContracts(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedContracts(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedContractsCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokens(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokensCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedTokensCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCollateralProtection(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCollateralProtection(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCreditAccountAccruedInterest(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCreditAccountHealthFactor(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCreditAccountHealthFactor(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcThresholdWeightedValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcThresholdWeightedValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTotalValue(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTotalValue(address)"(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSwapOperationAllowed(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "checkSwapOperationAllowed(address,address,address,address,uint256,uint256)"(
      creditAccount: string,
      swapContract: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    connectCreditManager(
      poolService: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "connectCreditManager(address)"(
      poolService: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convertWithSlippage(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertWithSlippage(address,address,uint256,uint256)"(
      tokenFrom: string,
      tokenTo: string,
      amount: BigNumberish,
      amountsOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountTokenById(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountTokenById(address,uint256)"(
      creditAccount: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfContractNotAllowed(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revertIfContractNotAllowed(address)"(
      contractToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfTokenNotAllowed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revertIfTokenNotAllowed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCollateralProtection(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCollateralProtection(address,address)"(
      contributor: string,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
