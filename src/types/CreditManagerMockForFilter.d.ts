/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreditManagerMockForFilterInterface extends ethers.utils.Interface {
  functions: {
    "calcLinearCumulative_RAY()": FunctionFragment;
    "checkSwapTokensAllowed(address,address,address,uint256,uint256)": FunctionFragment;
    "connectFilter(address,address)": FunctionFragment;
    "healthFactor()": FunctionFragment;
    "poolService()": FunctionFragment;
    "setCollateralProtection(address,uint256,uint256)": FunctionFragment;
    "setLinearCumulative(uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "updateCPandGetHealthFactor(address)": FunctionFragment;
    "updateCollateralProtection(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcLinearCumulative_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSwapTokensAllowed",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectFilter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralProtection",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinearCumulative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCPandGetHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralProtection",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcLinearCumulative_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSwapTokensAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinearCumulative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCPandGetHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralProtection",
    data: BytesLike
  ): Result;

  events: {};
}

export class CreditManagerMockForFilter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreditManagerMockForFilterInterface;

  functions: {
    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calcLinearCumulative_RAY()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    connectFilter(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "connectFilter(address,address)"(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    healthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "healthFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolService(overrides?: CallOverrides): Promise<[string]>;

    "poolService()"(overrides?: CallOverrides): Promise<[string]>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLinearCumulative(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLinearCumulative(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<[string]>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCollateralProtection(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCollateralProtection(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  "calcLinearCumulative_RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  checkSwapTokensAllowed(
    creditAccount: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
    creditAccount: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  connectFilter(
    _creditFilterAddress: string,
    _underlyingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "connectFilter(address,address)"(
    _creditFilterAddress: string,
    _underlyingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "healthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolService(overrides?: CallOverrides): Promise<string>;

  "poolService()"(overrides?: CallOverrides): Promise<string>;

  setCollateralProtection(
    creditAccount: string,
    amount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralProtection(address,uint256,uint256)"(
    creditAccount: string,
    amount: BigNumberish,
    borrowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLinearCumulative(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLinearCumulative(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

  updateCPandGetHealthFactor(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCPandGetHealthFactor(address)"(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCollateralProtection(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCollateralProtection(address)"(
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    "calcLinearCumulative_RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectFilter(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "connectFilter(address,address)"(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "healthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<string>;

    "poolService()"(overrides?: CallOverrides): Promise<string>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinearCumulative(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLinearCumulative(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralProtection(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCollateralProtection(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    "calcLinearCumulative_RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    connectFilter(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "connectFilter(address,address)"(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "healthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<BigNumber>;

    "poolService()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLinearCumulative(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLinearCumulative(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCollateralProtection(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCollateralProtection(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcLinearCumulative_RAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcLinearCumulative_RAY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSwapTokensAllowed(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "checkSwapTokensAllowed(address,address,address,uint256,uint256)"(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    connectFilter(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "connectFilter(address,address)"(
      _creditFilterAddress: string,
      _underlyingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    healthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "healthFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolService()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollateralProtection(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralProtection(address,uint256,uint256)"(
      creditAccount: string,
      amount: BigNumberish,
      borrowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLinearCumulative(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLinearCumulative(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCPandGetHealthFactor(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCPandGetHealthFactor(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCollateralProtection(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCollateralProtection(address)"(
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
