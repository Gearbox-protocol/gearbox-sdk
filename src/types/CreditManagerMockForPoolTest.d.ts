/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreditManagerMockForPoolTestInterface extends ethers.utils.Interface {
  functions: {
    "lendCreditAccount(uint256,address)": FunctionFragment;
    "poolService()": FunctionFragment;
    "repayCreditAccount(uint256,uint256,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class CreditManagerMockForPoolTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreditManagerMockForPoolTestInterface;

  functions: {
    lendCreditAccount(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lendCreditAccount(uint256,address)"(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolService(overrides?: CallOverrides): Promise<[string]>;

    "poolService()"(overrides?: CallOverrides): Promise<[string]>;

    repayCreditAccount(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayCreditAccount(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  lendCreditAccount(
    borrowedAmount: BigNumberish,
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lendCreditAccount(uint256,address)"(
    borrowedAmount: BigNumberish,
    creditAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolService(overrides?: CallOverrides): Promise<string>;

  "poolService()"(overrides?: CallOverrides): Promise<string>;

  repayCreditAccount(
    borrowedAmount: BigNumberish,
    profit: BigNumberish,
    loss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayCreditAccount(uint256,uint256,uint256)"(
    borrowedAmount: BigNumberish,
    profit: BigNumberish,
    loss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    lendCreditAccount(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "lendCreditAccount(uint256,address)"(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolService(overrides?: CallOverrides): Promise<string>;

    "poolService()"(overrides?: CallOverrides): Promise<string>;

    repayCreditAccount(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repayCreditAccount(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    lendCreditAccount(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lendCreditAccount(uint256,address)"(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<BigNumber>;

    "poolService()"(overrides?: CallOverrides): Promise<BigNumber>;

    repayCreditAccount(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repayCreditAccount(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lendCreditAccount(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lendCreditAccount(uint256,address)"(
      borrowedAmount: BigNumberish,
      creditAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolService()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayCreditAccount(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayCreditAccount(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      profit: BigNumberish,
      loss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
