/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountMinerMockInterface extends ethers.utils.Interface {
  functions: {
    "accountFactories(uint256)": FunctionFragment;
    "accountFactoriesCount()": FunctionFragment;
    "addAccountFactory(address,uint256)": FunctionFragment;
    "deploymentCosts(address)": FunctionFragment;
    "kind()": FunctionFragment;
    "mineAccount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountFactories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accountFactoriesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccountFactory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentCosts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kind", values?: undefined): string;
  encodeFunctionData(functionFragment: "mineAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountFactoriesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mineAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewAccountFactory(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAccountFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class AccountMinerMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountMinerMockInterface;

  functions: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deploymentCosts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "deploymentCosts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kind(overrides?: CallOverrides): Promise<[string]>;

    "kind()"(overrides?: CallOverrides): Promise<[string]>;

    mineAccount(trader: string, overrides?: CallOverrides): Promise<[void]>;

    "mineAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountFactories(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "accountFactories(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAccountFactory(
    accountFactory: string,
    deploymentCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAccountFactory(address,uint256)"(
    accountFactory: string,
    deploymentCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deploymentCosts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "deploymentCosts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kind(overrides?: CallOverrides): Promise<string>;

  "kind()"(overrides?: CallOverrides): Promise<string>;

  mineAccount(trader: string, overrides?: CallOverrides): Promise<void>;

  "mineAccount(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<void>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deploymentCosts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deploymentCosts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kind(overrides?: CallOverrides): Promise<string>;

    "kind()"(overrides?: CallOverrides): Promise<string>;

    mineAccount(trader: string, overrides?: CallOverrides): Promise<void>;

    "mineAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewAccountFactory(
      factoryAddress: string | null,
      deploymentCost: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deploymentCosts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deploymentCosts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kind(overrides?: CallOverrides): Promise<BigNumber>;

    "kind()"(overrides?: CallOverrides): Promise<BigNumber>;

    mineAccount(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mineAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountFactoriesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountFactoriesCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deploymentCosts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deploymentCosts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kind()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mineAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mineAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
