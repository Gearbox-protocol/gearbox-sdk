/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPartialLiquidationBotV3 {
  export type PriceUpdateStruct = {
    token: PromiseOrValue<string>;
    reserve: PromiseOrValue<boolean>;
    data: PromiseOrValue<BytesLike>;
  };

  export type PriceUpdateStructOutput = [string, boolean, string] & {
    token: string;
    reserve: boolean;
    data: string;
  };
}

export interface PartialLiquidationBotV3Interface extends utils.Interface {
  functions: {
    "contractsRegister()": FunctionFragment;
    "feeScaleFactor()": FunctionFragment;
    "liquidateExactCollateral(address,address,uint256,uint256,address,(address,bool,bytes)[])": FunctionFragment;
    "liquidateExactDebt(address,address,uint256,uint256,address,(address,bool,bytes)[])": FunctionFragment;
    "maxHealthFactor()": FunctionFragment;
    "minHealthFactor()": FunctionFragment;
    "premiumScaleFactor()": FunctionFragment;
    "treasury()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contractsRegister"
      | "feeScaleFactor"
      | "liquidateExactCollateral"
      | "liquidateExactDebt"
      | "maxHealthFactor"
      | "minHealthFactor"
      | "premiumScaleFactor"
      | "treasury"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeScaleFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateExactCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IPartialLiquidationBotV3.PriceUpdateStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateExactDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IPartialLiquidationBotV3.PriceUpdateStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumScaleFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "contractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeScaleFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateExactCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateExactDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumScaleFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "LiquidatePartial(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidatePartial"): EventFragment;
}

export interface LiquidatePartialEventObject {
  creditManager: string;
  creditAccount: string;
  token: string;
  repaidDebt: BigNumber;
  seizedCollateral: BigNumber;
  fee: BigNumber;
}
export type LiquidatePartialEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  LiquidatePartialEventObject
>;

export type LiquidatePartialEventFilter =
  TypedEventFilter<LiquidatePartialEvent>;

export interface PartialLiquidationBotV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PartialLiquidationBotV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractsRegister(overrides?: CallOverrides): Promise<[string]>;

    feeScaleFactor(overrides?: CallOverrides): Promise<[number]>;

    liquidateExactCollateral(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      seizedAmount: PromiseOrValue<BigNumberish>,
      maxRepaidAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateExactDebt(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repaidAmount: PromiseOrValue<BigNumberish>,
      minSeizedAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxHealthFactor(overrides?: CallOverrides): Promise<[number]>;

    minHealthFactor(overrides?: CallOverrides): Promise<[number]>;

    premiumScaleFactor(overrides?: CallOverrides): Promise<[number]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  contractsRegister(overrides?: CallOverrides): Promise<string>;

  feeScaleFactor(overrides?: CallOverrides): Promise<number>;

  liquidateExactCollateral(
    creditAccount: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    seizedAmount: PromiseOrValue<BigNumberish>,
    maxRepaidAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateExactDebt(
    creditAccount: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    repaidAmount: PromiseOrValue<BigNumberish>,
    minSeizedAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxHealthFactor(overrides?: CallOverrides): Promise<number>;

  minHealthFactor(overrides?: CallOverrides): Promise<number>;

  premiumScaleFactor(overrides?: CallOverrides): Promise<number>;

  treasury(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    contractsRegister(overrides?: CallOverrides): Promise<string>;

    feeScaleFactor(overrides?: CallOverrides): Promise<number>;

    liquidateExactCollateral(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      seizedAmount: PromiseOrValue<BigNumberish>,
      maxRepaidAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateExactDebt(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repaidAmount: PromiseOrValue<BigNumberish>,
      minSeizedAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxHealthFactor(overrides?: CallOverrides): Promise<number>;

    minHealthFactor(overrides?: CallOverrides): Promise<number>;

    premiumScaleFactor(overrides?: CallOverrides): Promise<number>;

    treasury(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LiquidatePartial(address,address,address,uint256,uint256,uint256)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      repaidDebt?: null,
      seizedCollateral?: null,
      fee?: null
    ): LiquidatePartialEventFilter;
    LiquidatePartial(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      repaidDebt?: null,
      seizedCollateral?: null,
      fee?: null
    ): LiquidatePartialEventFilter;
  };

  estimateGas: {
    contractsRegister(overrides?: CallOverrides): Promise<BigNumber>;

    feeScaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateExactCollateral(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      seizedAmount: PromiseOrValue<BigNumberish>,
      maxRepaidAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateExactDebt(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repaidAmount: PromiseOrValue<BigNumberish>,
      minSeizedAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    minHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    premiumScaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    contractsRegister(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeScaleFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateExactCollateral(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      seizedAmount: PromiseOrValue<BigNumberish>,
      maxRepaidAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateExactDebt(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repaidAmount: PromiseOrValue<BigNumberish>,
      minSeizedAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxHealthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minHealthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumScaleFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
