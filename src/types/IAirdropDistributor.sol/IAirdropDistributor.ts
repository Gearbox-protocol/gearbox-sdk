/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IAirdropDistributorInterface extends Interface {
  getFunction(
    nameOrSignature: "claim" | "claimed" | "merkleRoot" | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Claimed" | "RootUpdated" | "TokenAllocated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    historic: boolean
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    historic: boolean
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    historic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootUpdatedEvent {
  export type InputTuple = [oldRoot: BytesLike, newRoot: BytesLike];
  export type OutputTuple = [oldRoot: string, newRoot: string];
  export interface OutputObject {
    oldRoot: string;
    newRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAllocatedEvent {
  export type InputTuple = [
    account: AddressLike,
    campaignId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    campaignId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    campaignId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAirdropDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): IAirdropDistributor;
  waitForDeployment(): Promise<this>;

  interface: IAirdropDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      totalAmount: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      index: BigNumberish,
      account: AddressLike,
      totalAmount: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RootUpdated"
  ): TypedContractEvent<
    RootUpdatedEvent.InputTuple,
    RootUpdatedEvent.OutputTuple,
    RootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAllocated"
  ): TypedContractEvent<
    TokenAllocatedEvent.InputTuple,
    TokenAllocatedEvent.OutputTuple,
    TokenAllocatedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256,bool)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "RootUpdated(bytes32,bytes32)": TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;
    RootUpdated: TypedContractEvent<
      RootUpdatedEvent.InputTuple,
      RootUpdatedEvent.OutputTuple,
      RootUpdatedEvent.OutputObject
    >;

    "TokenAllocated(address,uint8,uint256)": TypedContractEvent<
      TokenAllocatedEvent.InputTuple,
      TokenAllocatedEvent.OutputTuple,
      TokenAllocatedEvent.OutputObject
    >;
    TokenAllocated: TypedContractEvent<
      TokenAllocatedEvent.InputTuple,
      TokenAllocatedEvent.OutputTuple,
      TokenAllocatedEvent.OutputObject
    >;
  };
}
