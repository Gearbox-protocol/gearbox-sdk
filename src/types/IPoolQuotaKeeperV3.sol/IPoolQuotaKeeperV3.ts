/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IPoolQuotaKeeperV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "accrueQuotaInterest"
      | "addCreditManager"
      | "addQuotaToken"
      | "creditManagers"
      | "cumulativeIndex"
      | "gauge"
      | "getQuota"
      | "getQuotaAndOutstandingInterest"
      | "getQuotaRate"
      | "getTokenQuotaParams"
      | "isQuotedToken"
      | "lastQuotaRateUpdate"
      | "pool"
      | "poolQuotaRevenue"
      | "quotedTokens"
      | "removeQuotas"
      | "setGauge"
      | "setTokenLimit"
      | "setTokenQuotaIncreaseFee"
      | "underlying"
      | "updateQuota"
      | "updateRates"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddCreditManager"
      | "AddQuotaToken"
      | "SetGauge"
      | "SetQuotaIncreaseFee"
      | "SetTokenLimit"
      | "UpdateQuota"
      | "UpdateTokenQuotaRate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accrueQuotaInterest",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addCreditManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuotaToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getQuota",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuotaAndOutstandingInterest",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuotaRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenQuotaParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuotedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastQuotaRateUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolQuotaRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quotedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuotas",
    values: [AddressLike, AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenQuotaIncreaseFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuota",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accrueQuotaInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuotaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuota", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuotaAndOutstandingInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenQuotaParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuotedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastQuotaRateUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenQuotaIncreaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateQuota",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddCreditManagerEvent {
  export type InputTuple = [creditManager: AddressLike];
  export type OutputTuple = [creditManager: string];
  export interface OutputObject {
    creditManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddQuotaTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGaugeEvent {
  export type InputTuple = [newGauge: AddressLike];
  export type OutputTuple = [newGauge: string];
  export interface OutputObject {
    newGauge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetQuotaIncreaseFeeEvent {
  export type InputTuple = [token: AddressLike, fee: BigNumberish];
  export type OutputTuple = [token: string, fee: bigint];
  export interface OutputObject {
    token: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenLimitEvent {
  export type InputTuple = [token: AddressLike, limit: BigNumberish];
  export type OutputTuple = [token: string, limit: bigint];
  export interface OutputObject {
    token: string;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateQuotaEvent {
  export type InputTuple = [
    creditAccount: AddressLike,
    token: AddressLike,
    quotaChange: BigNumberish
  ];
  export type OutputTuple = [
    creditAccount: string,
    token: string,
    quotaChange: bigint
  ];
  export interface OutputObject {
    creditAccount: string;
    token: string;
    quotaChange: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTokenQuotaRateEvent {
  export type InputTuple = [token: AddressLike, rate: BigNumberish];
  export type OutputTuple = [token: string, rate: bigint];
  export interface OutputObject {
    token: string;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolQuotaKeeperV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolQuotaKeeperV3;
  waitForDeployment(): Promise<this>;

  interface: IPoolQuotaKeeperV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accrueQuotaInterest: TypedContractMethod<
    [creditAccount: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  addCreditManager: TypedContractMethod<
    [_creditManager: AddressLike],
    [void],
    "nonpayable"
  >;

  addQuotaToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  creditManagers: TypedContractMethod<[], [string[]], "view">;

  cumulativeIndex: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  gauge: TypedContractMethod<[], [string], "view">;

  getQuota: TypedContractMethod<
    [creditAccount: AddressLike, token: AddressLike],
    [[bigint, bigint] & { quota: bigint; cumulativeIndexLU: bigint }],
    "view"
  >;

  getQuotaAndOutstandingInterest: TypedContractMethod<
    [creditAccount: AddressLike, token: AddressLike],
    [[bigint, bigint] & { quoted: bigint; outstandingInterest: bigint }],
    "view"
  >;

  getQuotaRate: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getTokenQuotaParams: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        rate: bigint;
        cumulativeIndexLU: bigint;
        quotaIncreaseFee: bigint;
        totalQuoted: bigint;
        limit: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  isQuotedToken: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  lastQuotaRateUpdate: TypedContractMethod<[], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  poolQuotaRevenue: TypedContractMethod<[], [bigint], "view">;

  quotedTokens: TypedContractMethod<[], [string[]], "view">;

  removeQuotas: TypedContractMethod<
    [
      creditAccount: AddressLike,
      tokens: AddressLike[],
      setLimitsToZero: boolean
    ],
    [void],
    "nonpayable"
  >;

  setGauge: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  setTokenLimit: TypedContractMethod<
    [token: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenQuotaIncreaseFee: TypedContractMethod<
    [token: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  updateQuota: TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      requestedChange: BigNumberish,
      minQuota: BigNumberish,
      maxQuota: BigNumberish
    ],
    [
      [bigint, bigint, boolean, boolean] & {
        caQuotaInterestChange: bigint;
        fees: bigint;
        enableToken: boolean;
        disableToken: boolean;
      }
    ],
    "nonpayable"
  >;

  updateRates: TypedContractMethod<[], [void], "nonpayable">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accrueQuotaInterest"
  ): TypedContractMethod<
    [creditAccount: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCreditManager"
  ): TypedContractMethod<[_creditManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addQuotaToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creditManagers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cumulativeIndex"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gauge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getQuota"
  ): TypedContractMethod<
    [creditAccount: AddressLike, token: AddressLike],
    [[bigint, bigint] & { quota: bigint; cumulativeIndexLU: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuotaAndOutstandingInterest"
  ): TypedContractMethod<
    [creditAccount: AddressLike, token: AddressLike],
    [[bigint, bigint] & { quoted: bigint; outstandingInterest: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuotaRate"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenQuotaParams"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        rate: bigint;
        cumulativeIndexLU: bigint;
        quotaIncreaseFee: bigint;
        totalQuoted: bigint;
        limit: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isQuotedToken"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastQuotaRateUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolQuotaRevenue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quotedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeQuotas"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      tokens: AddressLike[],
      setLimitsToZero: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGauge"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenLimit"
  ): TypedContractMethod<
    [token: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenQuotaIncreaseFee"
  ): TypedContractMethod<
    [token: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateQuota"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      token: AddressLike,
      requestedChange: BigNumberish,
      minQuota: BigNumberish,
      maxQuota: BigNumberish
    ],
    [
      [bigint, bigint, boolean, boolean] & {
        caQuotaInterestChange: bigint;
        fees: bigint;
        enableToken: boolean;
        disableToken: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRates"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddCreditManager"
  ): TypedContractEvent<
    AddCreditManagerEvent.InputTuple,
    AddCreditManagerEvent.OutputTuple,
    AddCreditManagerEvent.OutputObject
  >;
  getEvent(
    key: "AddQuotaToken"
  ): TypedContractEvent<
    AddQuotaTokenEvent.InputTuple,
    AddQuotaTokenEvent.OutputTuple,
    AddQuotaTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetGauge"
  ): TypedContractEvent<
    SetGaugeEvent.InputTuple,
    SetGaugeEvent.OutputTuple,
    SetGaugeEvent.OutputObject
  >;
  getEvent(
    key: "SetQuotaIncreaseFee"
  ): TypedContractEvent<
    SetQuotaIncreaseFeeEvent.InputTuple,
    SetQuotaIncreaseFeeEvent.OutputTuple,
    SetQuotaIncreaseFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenLimit"
  ): TypedContractEvent<
    SetTokenLimitEvent.InputTuple,
    SetTokenLimitEvent.OutputTuple,
    SetTokenLimitEvent.OutputObject
  >;
  getEvent(
    key: "UpdateQuota"
  ): TypedContractEvent<
    UpdateQuotaEvent.InputTuple,
    UpdateQuotaEvent.OutputTuple,
    UpdateQuotaEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTokenQuotaRate"
  ): TypedContractEvent<
    UpdateTokenQuotaRateEvent.InputTuple,
    UpdateTokenQuotaRateEvent.OutputTuple,
    UpdateTokenQuotaRateEvent.OutputObject
  >;

  filters: {
    "AddCreditManager(address)": TypedContractEvent<
      AddCreditManagerEvent.InputTuple,
      AddCreditManagerEvent.OutputTuple,
      AddCreditManagerEvent.OutputObject
    >;
    AddCreditManager: TypedContractEvent<
      AddCreditManagerEvent.InputTuple,
      AddCreditManagerEvent.OutputTuple,
      AddCreditManagerEvent.OutputObject
    >;

    "AddQuotaToken(address)": TypedContractEvent<
      AddQuotaTokenEvent.InputTuple,
      AddQuotaTokenEvent.OutputTuple,
      AddQuotaTokenEvent.OutputObject
    >;
    AddQuotaToken: TypedContractEvent<
      AddQuotaTokenEvent.InputTuple,
      AddQuotaTokenEvent.OutputTuple,
      AddQuotaTokenEvent.OutputObject
    >;

    "SetGauge(address)": TypedContractEvent<
      SetGaugeEvent.InputTuple,
      SetGaugeEvent.OutputTuple,
      SetGaugeEvent.OutputObject
    >;
    SetGauge: TypedContractEvent<
      SetGaugeEvent.InputTuple,
      SetGaugeEvent.OutputTuple,
      SetGaugeEvent.OutputObject
    >;

    "SetQuotaIncreaseFee(address,uint16)": TypedContractEvent<
      SetQuotaIncreaseFeeEvent.InputTuple,
      SetQuotaIncreaseFeeEvent.OutputTuple,
      SetQuotaIncreaseFeeEvent.OutputObject
    >;
    SetQuotaIncreaseFee: TypedContractEvent<
      SetQuotaIncreaseFeeEvent.InputTuple,
      SetQuotaIncreaseFeeEvent.OutputTuple,
      SetQuotaIncreaseFeeEvent.OutputObject
    >;

    "SetTokenLimit(address,uint96)": TypedContractEvent<
      SetTokenLimitEvent.InputTuple,
      SetTokenLimitEvent.OutputTuple,
      SetTokenLimitEvent.OutputObject
    >;
    SetTokenLimit: TypedContractEvent<
      SetTokenLimitEvent.InputTuple,
      SetTokenLimitEvent.OutputTuple,
      SetTokenLimitEvent.OutputObject
    >;

    "UpdateQuota(address,address,int96)": TypedContractEvent<
      UpdateQuotaEvent.InputTuple,
      UpdateQuotaEvent.OutputTuple,
      UpdateQuotaEvent.OutputObject
    >;
    UpdateQuota: TypedContractEvent<
      UpdateQuotaEvent.InputTuple,
      UpdateQuotaEvent.OutputTuple,
      UpdateQuotaEvent.OutputObject
    >;

    "UpdateTokenQuotaRate(address,uint16)": TypedContractEvent<
      UpdateTokenQuotaRateEvent.InputTuple,
      UpdateTokenQuotaRateEvent.OutputTuple,
      UpdateTokenQuotaRateEvent.OutputObject
    >;
    UpdateTokenQuotaRate: TypedContractEvent<
      UpdateTokenQuotaRateEvent.InputTuple,
      UpdateTokenQuotaRateEvent.OutputTuple,
      UpdateTokenQuotaRateEvent.OutputObject
    >;
  };
}
