/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type SwapTaskStruct = {
  swapOperation: PromiseOrValue<BigNumberish>;
  creditAccount: PromiseOrValue<string>;
  tokenIn: PromiseOrValue<string>;
  tokenOut: PromiseOrValue<string>;
  connectors: PromiseOrValue<string>[];
  amount: PromiseOrValue<BigNumberish>;
  leftoverAmount: PromiseOrValue<BigNumberish>;
};

export type SwapTaskStructOutput = [
  number,
  string,
  string,
  string,
  string[],
  BigNumber,
  BigNumber
] & {
  swapOperation: number;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: BigNumber;
  leftoverAmount: BigNumber;
};

export type MultiCallStruct = {
  target: PromiseOrValue<string>;
  callData: PromiseOrValue<BytesLike>;
};

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type RouterResultStruct = {
  amount: PromiseOrValue<BigNumberish>;
  minAmount: PromiseOrValue<BigNumberish>;
  calls: MultiCallStruct[];
};

export type RouterResultStructOutput = [
  BigNumber,
  BigNumber,
  MultiCallStructOutput[]
] & { amount: BigNumber; minAmount: BigNumber; calls: MultiCallStructOutput[] };

export type BalanceStruct = {
  token: PromiseOrValue<string>;
  balance: PromiseOrValue<BigNumberish>;
};

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export type PathOptionStruct = {
  target: PromiseOrValue<string>;
  option: PromiseOrValue<BigNumberish>;
  totalOptions: PromiseOrValue<BigNumberish>;
};

export type PathOptionStructOutput = [string, number, number] & {
  target: string;
  option: number;
  totalOptions: number;
};

export interface IRouterV3Interface extends utils.Interface {
  functions: {
    "componentAddressById(uint8)": FunctionFragment;
    "findAllSwaps((uint8,address,address,address,address[],uint256,uint256),uint256)": FunctionFragment;
    "findBestClosePath(address,(address,uint256)[],(address,uint256)[],address[],uint256,(address,uint8,uint8)[],uint256,bool)": FunctionFragment;
    "findOneTokenPath(address,uint256,address,address,address[],uint256)": FunctionFragment;
    "findOpenStrategyPath(address,(address,uint256)[],(address,uint256)[],address,address[],uint256)": FunctionFragment;
    "futureRouter()": FunctionFragment;
    "isRouterConfigurator(address)": FunctionFragment;
    "tokenTypes(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "componentAddressById"
      | "findAllSwaps"
      | "findBestClosePath"
      | "findOneTokenPath"
      | "findOpenStrategyPath"
      | "futureRouter"
      | "isRouterConfigurator"
      | "tokenTypes"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "componentAddressById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findAllSwaps",
    values: [SwapTaskStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestClosePath",
    values: [
      PromiseOrValue<string>,
      BalanceStruct[],
      BalanceStruct[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PathOptionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOneTokenPath",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOpenStrategyPath",
    values: [
      PromiseOrValue<string>,
      BalanceStruct[],
      BalanceStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "futureRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRouterConfigurator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTypes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "componentAddressById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAllSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestClosePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOneTokenPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOpenStrategyPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRouterConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ResolverUpdate(uint8,uint8,uint8)": EventFragment;
    "RouterComponentUpdate(uint8,address,uint256)": EventFragment;
    "SetFutureRouter(address)": EventFragment;
    "TokenTypeUpdate(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ResolverUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterComponentUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFutureRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTypeUpdate"): EventFragment;
}

export interface ResolverUpdateEventObject {
  ttIn: number;
  ttOut: number;
  rc: number;
}
export type ResolverUpdateEvent = TypedEvent<
  [number, number, number],
  ResolverUpdateEventObject
>;

export type ResolverUpdateEventFilter = TypedEventFilter<ResolverUpdateEvent>;

export interface RouterComponentUpdateEventObject {
  arg0: number;
  arg1: string;
  version: BigNumber;
}
export type RouterComponentUpdateEvent = TypedEvent<
  [number, string, BigNumber],
  RouterComponentUpdateEventObject
>;

export type RouterComponentUpdateEventFilter =
  TypedEventFilter<RouterComponentUpdateEvent>;

export interface SetFutureRouterEventObject {
  arg0: string;
}
export type SetFutureRouterEvent = TypedEvent<
  [string],
  SetFutureRouterEventObject
>;

export type SetFutureRouterEventFilter = TypedEventFilter<SetFutureRouterEvent>;

export interface TokenTypeUpdateEventObject {
  tokenAddress: string;
  tt: number;
}
export type TokenTypeUpdateEvent = TypedEvent<
  [string, number],
  TokenTypeUpdateEventObject
>;

export type TokenTypeUpdateEventFilter = TypedEventFilter<TokenTypeUpdateEvent>;

export interface IRouterV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRouterV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    componentAddressById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findAllSwaps(
      swapTask: SwapTaskStruct,
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findBestClosePath(
      creditAccount: PromiseOrValue<string>,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      pathOptions: PathOptionStruct[],
      iterations: PromiseOrValue<BigNumberish>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findOneTokenPath(
      tokenIn: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findOpenStrategyPath(
      creditManager: PromiseOrValue<string>,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    futureRouter(overrides?: CallOverrides): Promise<[string]>;

    isRouterConfigurator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  componentAddressById(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  findAllSwaps(
    swapTask: SwapTaskStruct,
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findBestClosePath(
    creditAccount: PromiseOrValue<string>,
    expectedBalances: BalanceStruct[],
    leftoverBalances: BalanceStruct[],
    connectors: PromiseOrValue<string>[],
    slippage: PromiseOrValue<BigNumberish>,
    pathOptions: PathOptionStruct[],
    iterations: PromiseOrValue<BigNumberish>,
    force: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findOneTokenPath(
    tokenIn: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenOut: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    connectors: PromiseOrValue<string>[],
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findOpenStrategyPath(
    creditManager: PromiseOrValue<string>,
    balances: BalanceStruct[],
    leftoverBalances: BalanceStruct[],
    target: PromiseOrValue<string>,
    connectors: PromiseOrValue<string>[],
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  futureRouter(overrides?: CallOverrides): Promise<string>;

  isRouterConfigurator(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenTypes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    componentAddressById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    findAllSwaps(
      swapTask: SwapTaskStruct,
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RouterResultStructOutput[]>;

    findBestClosePath(
      creditAccount: PromiseOrValue<string>,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      pathOptions: PathOptionStruct[],
      iterations: PromiseOrValue<BigNumberish>,
      force: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<RouterResultStructOutput>;

    findOneTokenPath(
      tokenIn: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RouterResultStructOutput>;

    findOpenStrategyPath(
      creditManager: PromiseOrValue<string>,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BalanceStructOutput[], RouterResultStructOutput]>;

    futureRouter(overrides?: CallOverrides): Promise<string>;

    isRouterConfigurator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ResolverUpdate(uint8,uint8,uint8)"(
      ttIn?: PromiseOrValue<BigNumberish> | null,
      ttOut?: PromiseOrValue<BigNumberish> | null,
      rc?: PromiseOrValue<BigNumberish> | null
    ): ResolverUpdateEventFilter;
    ResolverUpdate(
      ttIn?: PromiseOrValue<BigNumberish> | null,
      ttOut?: PromiseOrValue<BigNumberish> | null,
      rc?: PromiseOrValue<BigNumberish> | null
    ): ResolverUpdateEventFilter;

    "RouterComponentUpdate(uint8,address,uint256)"(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: PromiseOrValue<string> | null,
      version?: null
    ): RouterComponentUpdateEventFilter;
    RouterComponentUpdate(
      arg0?: PromiseOrValue<BigNumberish> | null,
      arg1?: PromiseOrValue<string> | null,
      version?: null
    ): RouterComponentUpdateEventFilter;

    "SetFutureRouter(address)"(
      arg0?: PromiseOrValue<string> | null
    ): SetFutureRouterEventFilter;
    SetFutureRouter(
      arg0?: PromiseOrValue<string> | null
    ): SetFutureRouterEventFilter;

    "TokenTypeUpdate(address,uint8)"(
      tokenAddress?: PromiseOrValue<string> | null,
      tt?: PromiseOrValue<BigNumberish> | null
    ): TokenTypeUpdateEventFilter;
    TokenTypeUpdate(
      tokenAddress?: PromiseOrValue<string> | null,
      tt?: PromiseOrValue<BigNumberish> | null
    ): TokenTypeUpdateEventFilter;
  };

  estimateGas: {
    componentAddressById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findAllSwaps(
      swapTask: SwapTaskStruct,
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findBestClosePath(
      creditAccount: PromiseOrValue<string>,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      pathOptions: PathOptionStruct[],
      iterations: PromiseOrValue<BigNumberish>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findOneTokenPath(
      tokenIn: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findOpenStrategyPath(
      creditManager: PromiseOrValue<string>,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    futureRouter(overrides?: CallOverrides): Promise<BigNumber>;

    isRouterConfigurator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    componentAddressById(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findAllSwaps(
      swapTask: SwapTaskStruct,
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findBestClosePath(
      creditAccount: PromiseOrValue<string>,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      pathOptions: PathOptionStruct[],
      iterations: PromiseOrValue<BigNumberish>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findOneTokenPath(
      tokenIn: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findOpenStrategyPath(
      creditManager: PromiseOrValue<string>,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: PromiseOrValue<string>,
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    futureRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRouterConfigurator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
