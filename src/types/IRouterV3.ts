/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SwapTaskStruct = {
  swapOperation: BigNumberish;
  creditAccount: AddressLike;
  tokenIn: AddressLike;
  tokenOut: AddressLike;
  connectors: AddressLike[];
  amount: BigNumberish;
  leftoverAmount: BigNumberish;
};

export type SwapTaskStructOutput = [
  swapOperation: bigint,
  creditAccount: string,
  tokenIn: string,
  tokenOut: string,
  connectors: string[],
  amount: bigint,
  leftoverAmount: bigint
] & {
  swapOperation: bigint;
  creditAccount: string;
  tokenIn: string;
  tokenOut: string;
  connectors: string[];
  amount: bigint;
  leftoverAmount: bigint;
};

export type MultiCallStruct = { target: AddressLike; callData: BytesLike };

export type MultiCallStructOutput = [target: string, callData: string] & {
  target: string;
  callData: string;
};

export type RouterResultStruct = {
  amount: BigNumberish;
  minAmount: BigNumberish;
  calls: MultiCallStruct[];
};

export type RouterResultStructOutput = [
  amount: bigint,
  minAmount: bigint,
  calls: MultiCallStructOutput[]
] & { amount: bigint; minAmount: bigint; calls: MultiCallStructOutput[] };

export type BalanceStruct = { token: AddressLike; balance: BigNumberish };

export type BalanceStructOutput = [token: string, balance: bigint] & {
  token: string;
  balance: bigint;
};

export type PathOptionStruct = {
  target: AddressLike;
  option: BigNumberish;
  totalOptions: BigNumberish;
};

export type PathOptionStructOutput = [
  target: string,
  option: bigint,
  totalOptions: bigint
] & { target: string; option: bigint; totalOptions: bigint };

export interface IRouterV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "componentAddressById"
      | "findAllSwaps"
      | "findBestClosePath"
      | "findOneTokenDiffPath"
      | "findOneTokenPath"
      | "findOpenStrategyPath"
      | "futureRouter"
      | "isRouterConfigurator"
      | "maxComponentId"
      | "tokenTypes"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ResolverUpdate"
      | "RouterComponentUpdate"
      | "SetFutureRouter"
      | "TokenTypeUpdate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "componentAddressById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findAllSwaps",
    values: [SwapTaskStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestClosePath",
    values: [
      AddressLike,
      BalanceStruct[],
      BalanceStruct[],
      AddressLike[],
      BigNumberish,
      PathOptionStruct[],
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOneTokenDiffPath",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOneTokenPath",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findOpenStrategyPath",
    values: [
      AddressLike,
      BalanceStruct[],
      BalanceStruct[],
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "futureRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRouterConfigurator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxComponentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTypes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "componentAddressById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAllSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestClosePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOneTokenDiffPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOneTokenPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOpenStrategyPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRouterConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxComponentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ResolverUpdateEvent {
  export type InputTuple = [
    ttIn: BigNumberish,
    ttOut: BigNumberish,
    rc: BigNumberish
  ];
  export type OutputTuple = [ttIn: bigint, ttOut: bigint, rc: bigint];
  export interface OutputObject {
    ttIn: bigint;
    ttOut: bigint;
    rc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterComponentUpdateEvent {
  export type InputTuple = [
    arg0: BigNumberish,
    arg1: AddressLike,
    version: BigNumberish
  ];
  export type OutputTuple = [arg0: bigint, arg1: string, version: bigint];
  export interface OutputObject {
    arg0: bigint;
    arg1: string;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFutureRouterEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTypeUpdateEvent {
  export type InputTuple = [tokenAddress: AddressLike, tt: BigNumberish];
  export type OutputTuple = [tokenAddress: string, tt: bigint];
  export interface OutputObject {
    tokenAddress: string;
    tt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRouterV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IRouterV3;
  waitForDeployment(): Promise<this>;

  interface: IRouterV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  componentAddressById: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  findAllSwaps: TypedContractMethod<
    [swapTask: SwapTaskStruct, slippage: BigNumberish],
    [RouterResultStructOutput[]],
    "nonpayable"
  >;

  findBestClosePath: TypedContractMethod<
    [
      creditAccount: AddressLike,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      force: boolean
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  findOneTokenDiffPath: TypedContractMethod<
    [
      tokenIn: AddressLike,
      expectedBalance: BigNumberish,
      leftoverAmount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  findOneTokenPath: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;

  findOpenStrategyPath: TypedContractMethod<
    [
      creditManager: AddressLike,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [[BalanceStructOutput[], RouterResultStructOutput]],
    "nonpayable"
  >;

  futureRouter: TypedContractMethod<[], [string], "view">;

  isRouterConfigurator: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  maxComponentId: TypedContractMethod<[], [bigint], "view">;

  tokenTypes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "componentAddressById"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "findAllSwaps"
  ): TypedContractMethod<
    [swapTask: SwapTaskStruct, slippage: BigNumberish],
    [RouterResultStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findBestClosePath"
  ): TypedContractMethod<
    [
      creditAccount: AddressLike,
      expectedBalances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      connectors: AddressLike[],
      slippage: BigNumberish,
      pathOptions: PathOptionStruct[],
      iterations: BigNumberish,
      force: boolean
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findOneTokenDiffPath"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      expectedBalance: BigNumberish,
      leftoverAmount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findOneTokenPath"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amount: BigNumberish,
      tokenOut: AddressLike,
      creditAccount: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [RouterResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findOpenStrategyPath"
  ): TypedContractMethod<
    [
      creditManager: AddressLike,
      balances: BalanceStruct[],
      leftoverBalances: BalanceStruct[],
      target: AddressLike,
      connectors: AddressLike[],
      slippage: BigNumberish
    ],
    [[BalanceStructOutput[], RouterResultStructOutput]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "futureRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRouterConfigurator"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxComponentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenTypes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ResolverUpdate"
  ): TypedContractEvent<
    ResolverUpdateEvent.InputTuple,
    ResolverUpdateEvent.OutputTuple,
    ResolverUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RouterComponentUpdate"
  ): TypedContractEvent<
    RouterComponentUpdateEvent.InputTuple,
    RouterComponentUpdateEvent.OutputTuple,
    RouterComponentUpdateEvent.OutputObject
  >;
  getEvent(
    key: "SetFutureRouter"
  ): TypedContractEvent<
    SetFutureRouterEvent.InputTuple,
    SetFutureRouterEvent.OutputTuple,
    SetFutureRouterEvent.OutputObject
  >;
  getEvent(
    key: "TokenTypeUpdate"
  ): TypedContractEvent<
    TokenTypeUpdateEvent.InputTuple,
    TokenTypeUpdateEvent.OutputTuple,
    TokenTypeUpdateEvent.OutputObject
  >;

  filters: {
    "ResolverUpdate(uint8,uint8,uint8)": TypedContractEvent<
      ResolverUpdateEvent.InputTuple,
      ResolverUpdateEvent.OutputTuple,
      ResolverUpdateEvent.OutputObject
    >;
    ResolverUpdate: TypedContractEvent<
      ResolverUpdateEvent.InputTuple,
      ResolverUpdateEvent.OutputTuple,
      ResolverUpdateEvent.OutputObject
    >;

    "RouterComponentUpdate(uint8,address,uint256)": TypedContractEvent<
      RouterComponentUpdateEvent.InputTuple,
      RouterComponentUpdateEvent.OutputTuple,
      RouterComponentUpdateEvent.OutputObject
    >;
    RouterComponentUpdate: TypedContractEvent<
      RouterComponentUpdateEvent.InputTuple,
      RouterComponentUpdateEvent.OutputTuple,
      RouterComponentUpdateEvent.OutputObject
    >;

    "SetFutureRouter(address)": TypedContractEvent<
      SetFutureRouterEvent.InputTuple,
      SetFutureRouterEvent.OutputTuple,
      SetFutureRouterEvent.OutputObject
    >;
    SetFutureRouter: TypedContractEvent<
      SetFutureRouterEvent.InputTuple,
      SetFutureRouterEvent.OutputTuple,
      SetFutureRouterEvent.OutputObject
    >;

    "TokenTypeUpdate(address,uint8)": TypedContractEvent<
      TokenTypeUpdateEvent.InputTuple,
      TokenTypeUpdateEvent.OutputTuple,
      TokenTypeUpdateEvent.OutputObject
    >;
    TokenTypeUpdate: TypedContractEvent<
      TokenTypeUpdateEvent.InputTuple,
      TokenTypeUpdateEvent.OutputTuple,
      TokenTypeUpdateEvent.OutputObject
    >;
  };
}
