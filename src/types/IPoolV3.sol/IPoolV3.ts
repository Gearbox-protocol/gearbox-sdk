/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IPoolV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "addressProvider"
      | "allowance"
      | "approve"
      | "asset"
      | "availableLiquidity"
      | "balanceOf"
      | "baseInterestIndex"
      | "baseInterestIndexLU"
      | "baseInterestRate"
      | "convertToAssets"
      | "convertToShares"
      | "creditManagerBorrowable"
      | "creditManagerBorrowed"
      | "creditManagerDebtLimit"
      | "creditManagers"
      | "decimals"
      | "deposit"
      | "depositWithReferral"
      | "expectedLiquidity"
      | "expectedLiquidityLU"
      | "interestRateModel"
      | "lastBaseInterestUpdate"
      | "lastQuotaRevenueUpdate"
      | "lendCreditAccount"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint"
      | "mintWithReferral"
      | "name"
      | "nonces"
      | "permit"
      | "poolQuotaKeeper"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "quotaRevenue"
      | "redeem"
      | "repayCreditAccount"
      | "setCreditManagerDebtLimit"
      | "setInterestRateModel"
      | "setPoolQuotaKeeper"
      | "setQuotaRevenue"
      | "setTotalDebtLimit"
      | "setWithdrawFee"
      | "supplyRate"
      | "symbol"
      | "totalAssets"
      | "totalBorrowed"
      | "totalDebtLimit"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "treasury"
      | "underlyingToken"
      | "updateQuotaRevenue"
      | "version"
      | "withdraw"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddCreditManager"
      | "Approval"
      | "Borrow"
      | "Deposit"
      | "IncurUncoveredLoss"
      | "Refer"
      | "Repay"
      | "SetCreditManagerDebtLimit"
      | "SetInterestRateModel"
      | "SetPoolQuotaKeeper"
      | "SetTotalDebtLimit"
      | "SetWithdrawFee"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestIndexLU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerBorrowable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerBorrowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerDebtLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithReferral",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidityLU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBaseInterestUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastQuotaRevenueUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithReferral",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolQuotaKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotaRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerDebtLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolQuotaKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuotaRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuotaRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestIndexLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidityLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBaseInterestUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastQuotaRevenueUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace AddCreditManagerEvent {
  export type InputTuple = [creditManager: AddressLike];
  export type OutputTuple = [creditManager: string];
  export interface OutputObject {
    creditManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    creditManager: AddressLike,
    creditAccount: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditManager: string,
    creditAccount: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditManager: string;
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncurUncoveredLossEvent {
  export type InputTuple = [creditManager: AddressLike, loss: BigNumberish];
  export type OutputTuple = [creditManager: string, loss: bigint];
  export interface OutputObject {
    creditManager: string;
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferEvent {
  export type InputTuple = [
    onBehalfOf: AddressLike,
    referralCode: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    onBehalfOf: string,
    referralCode: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    onBehalfOf: string;
    referralCode: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    creditManager: AddressLike,
    borrowedAmount: BigNumberish,
    profit: BigNumberish,
    loss: BigNumberish
  ];
  export type OutputTuple = [
    creditManager: string,
    borrowedAmount: bigint,
    profit: bigint,
    loss: bigint
  ];
  export interface OutputObject {
    creditManager: string;
    borrowedAmount: bigint;
    profit: bigint;
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCreditManagerDebtLimitEvent {
  export type InputTuple = [creditManager: AddressLike, newLimit: BigNumberish];
  export type OutputTuple = [creditManager: string, newLimit: bigint];
  export interface OutputObject {
    creditManager: string;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetInterestRateModelEvent {
  export type InputTuple = [newInterestRateModel: AddressLike];
  export type OutputTuple = [newInterestRateModel: string];
  export interface OutputObject {
    newInterestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolQuotaKeeperEvent {
  export type InputTuple = [newPoolQuotaKeeper: AddressLike];
  export type OutputTuple = [newPoolQuotaKeeper: string];
  export interface OutputObject {
    newPoolQuotaKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTotalDebtLimitEvent {
  export type InputTuple = [limit: BigNumberish];
  export type OutputTuple = [limit: bigint];
  export interface OutputObject {
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawFeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolV3;
  waitForDeployment(): Promise<this>;

  interface: IPoolV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  availableLiquidity: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  baseInterestIndex: TypedContractMethod<[], [bigint], "view">;

  baseInterestIndexLU: TypedContractMethod<[], [bigint], "view">;

  baseInterestRate: TypedContractMethod<[], [bigint], "view">;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  creditManagerBorrowable: TypedContractMethod<
    [creditManager: AddressLike],
    [bigint],
    "view"
  >;

  creditManagerBorrowed: TypedContractMethod<
    [creditManager: AddressLike],
    [bigint],
    "view"
  >;

  creditManagerDebtLimit: TypedContractMethod<
    [creditManager: AddressLike],
    [bigint],
    "view"
  >;

  creditManagers: TypedContractMethod<[], [string[]], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  depositWithReferral: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, referralCode: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  expectedLiquidity: TypedContractMethod<[], [bigint], "view">;

  expectedLiquidityLU: TypedContractMethod<[], [bigint], "view">;

  interestRateModel: TypedContractMethod<[], [string], "view">;

  lastBaseInterestUpdate: TypedContractMethod<[], [bigint], "view">;

  lastQuotaRevenueUpdate: TypedContractMethod<[], [bigint], "view">;

  lendCreditAccount: TypedContractMethod<
    [borrowedAmount: BigNumberish, creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  maxDeposit: TypedContractMethod<[receiver: AddressLike], [bigint], "view">;

  maxMint: TypedContractMethod<[receiver: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mintWithReferral: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, referralCode: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  poolQuotaKeeper: TypedContractMethod<[], [string], "view">;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  quotaRevenue: TypedContractMethod<[], [bigint], "view">;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  repayCreditAccount: TypedContractMethod<
    [repaidAmount: BigNumberish, profit: BigNumberish, loss: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCreditManagerDebtLimit: TypedContractMethod<
    [creditManager: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInterestRateModel: TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolQuotaKeeper: TypedContractMethod<
    [newPoolQuotaKeeper: AddressLike],
    [void],
    "nonpayable"
  >;

  setQuotaRevenue: TypedContractMethod<
    [newQuotaRevenue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalDebtLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawFee: TypedContractMethod<
    [newWithdrawFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  supplyRate: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalBorrowed: TypedContractMethod<[], [bigint], "view">;

  totalDebtLimit: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  underlyingToken: TypedContractMethod<[], [string], "view">;

  updateQuotaRevenue: TypedContractMethod<
    [quotaRevenueDelta: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseInterestIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseInterestIndexLU"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseInterestRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditManagerBorrowable"
  ): TypedContractMethod<[creditManager: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditManagerBorrowed"
  ): TypedContractMethod<[creditManager: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditManagerDebtLimit"
  ): TypedContractMethod<[creditManager: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditManagers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositWithReferral"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, referralCode: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectedLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expectedLiquidityLU"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "interestRateModel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastBaseInterestUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastQuotaRevenueUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendCreditAccount"
  ): TypedContractMethod<
    [borrowedAmount: BigNumberish, creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithReferral"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, referralCode: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolQuotaKeeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quotaRevenue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayCreditAccount"
  ): TypedContractMethod<
    [repaidAmount: BigNumberish, profit: BigNumberish, loss: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreditManagerDebtLimit"
  ): TypedContractMethod<
    [creditManager: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterestRateModel"
  ): TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolQuotaKeeper"
  ): TypedContractMethod<
    [newPoolQuotaKeeper: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setQuotaRevenue"
  ): TypedContractMethod<[newQuotaRevenue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalDebtLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawFee"
  ): TypedContractMethod<[newWithdrawFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supplyRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBorrowed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDebtLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateQuotaRevenue"
  ): TypedContractMethod<
    [quotaRevenueDelta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddCreditManager"
  ): TypedContractEvent<
    AddCreditManagerEvent.InputTuple,
    AddCreditManagerEvent.OutputTuple,
    AddCreditManagerEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "IncurUncoveredLoss"
  ): TypedContractEvent<
    IncurUncoveredLossEvent.InputTuple,
    IncurUncoveredLossEvent.OutputTuple,
    IncurUncoveredLossEvent.OutputObject
  >;
  getEvent(
    key: "Refer"
  ): TypedContractEvent<
    ReferEvent.InputTuple,
    ReferEvent.OutputTuple,
    ReferEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "SetCreditManagerDebtLimit"
  ): TypedContractEvent<
    SetCreditManagerDebtLimitEvent.InputTuple,
    SetCreditManagerDebtLimitEvent.OutputTuple,
    SetCreditManagerDebtLimitEvent.OutputObject
  >;
  getEvent(
    key: "SetInterestRateModel"
  ): TypedContractEvent<
    SetInterestRateModelEvent.InputTuple,
    SetInterestRateModelEvent.OutputTuple,
    SetInterestRateModelEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolQuotaKeeper"
  ): TypedContractEvent<
    SetPoolQuotaKeeperEvent.InputTuple,
    SetPoolQuotaKeeperEvent.OutputTuple,
    SetPoolQuotaKeeperEvent.OutputObject
  >;
  getEvent(
    key: "SetTotalDebtLimit"
  ): TypedContractEvent<
    SetTotalDebtLimitEvent.InputTuple,
    SetTotalDebtLimitEvent.OutputTuple,
    SetTotalDebtLimitEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawFee"
  ): TypedContractEvent<
    SetWithdrawFeeEvent.InputTuple,
    SetWithdrawFeeEvent.OutputTuple,
    SetWithdrawFeeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AddCreditManager(address)": TypedContractEvent<
      AddCreditManagerEvent.InputTuple,
      AddCreditManagerEvent.OutputTuple,
      AddCreditManagerEvent.OutputObject
    >;
    AddCreditManager: TypedContractEvent<
      AddCreditManagerEvent.InputTuple,
      AddCreditManagerEvent.OutputTuple,
      AddCreditManagerEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Borrow(address,address,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "IncurUncoveredLoss(address,uint256)": TypedContractEvent<
      IncurUncoveredLossEvent.InputTuple,
      IncurUncoveredLossEvent.OutputTuple,
      IncurUncoveredLossEvent.OutputObject
    >;
    IncurUncoveredLoss: TypedContractEvent<
      IncurUncoveredLossEvent.InputTuple,
      IncurUncoveredLossEvent.OutputTuple,
      IncurUncoveredLossEvent.OutputObject
    >;

    "Refer(address,uint256,uint256)": TypedContractEvent<
      ReferEvent.InputTuple,
      ReferEvent.OutputTuple,
      ReferEvent.OutputObject
    >;
    Refer: TypedContractEvent<
      ReferEvent.InputTuple,
      ReferEvent.OutputTuple,
      ReferEvent.OutputObject
    >;

    "Repay(address,uint256,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "SetCreditManagerDebtLimit(address,uint256)": TypedContractEvent<
      SetCreditManagerDebtLimitEvent.InputTuple,
      SetCreditManagerDebtLimitEvent.OutputTuple,
      SetCreditManagerDebtLimitEvent.OutputObject
    >;
    SetCreditManagerDebtLimit: TypedContractEvent<
      SetCreditManagerDebtLimitEvent.InputTuple,
      SetCreditManagerDebtLimitEvent.OutputTuple,
      SetCreditManagerDebtLimitEvent.OutputObject
    >;

    "SetInterestRateModel(address)": TypedContractEvent<
      SetInterestRateModelEvent.InputTuple,
      SetInterestRateModelEvent.OutputTuple,
      SetInterestRateModelEvent.OutputObject
    >;
    SetInterestRateModel: TypedContractEvent<
      SetInterestRateModelEvent.InputTuple,
      SetInterestRateModelEvent.OutputTuple,
      SetInterestRateModelEvent.OutputObject
    >;

    "SetPoolQuotaKeeper(address)": TypedContractEvent<
      SetPoolQuotaKeeperEvent.InputTuple,
      SetPoolQuotaKeeperEvent.OutputTuple,
      SetPoolQuotaKeeperEvent.OutputObject
    >;
    SetPoolQuotaKeeper: TypedContractEvent<
      SetPoolQuotaKeeperEvent.InputTuple,
      SetPoolQuotaKeeperEvent.OutputTuple,
      SetPoolQuotaKeeperEvent.OutputObject
    >;

    "SetTotalDebtLimit(uint256)": TypedContractEvent<
      SetTotalDebtLimitEvent.InputTuple,
      SetTotalDebtLimitEvent.OutputTuple,
      SetTotalDebtLimitEvent.OutputObject
    >;
    SetTotalDebtLimit: TypedContractEvent<
      SetTotalDebtLimitEvent.InputTuple,
      SetTotalDebtLimitEvent.OutputTuple,
      SetTotalDebtLimitEvent.OutputObject
    >;

    "SetWithdrawFee(uint256)": TypedContractEvent<
      SetWithdrawFeeEvent.InputTuple,
      SetWithdrawFeeEvent.OutputTuple,
      SetWithdrawFeeEvent.OutputObject
    >;
    SetWithdrawFee: TypedContractEvent<
      SetWithdrawFeeEvent.InputTuple,
      SetWithdrawFeeEvent.OutputTuple,
      SetWithdrawFeeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
