/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AddressProviderInterface extends ethers.utils.Interface {
  functions: {
    "ACCOUNT_MINER()": FunctionFragment;
    "ACL()": FunctionFragment;
    "CONTRACTS_REGISTER()": FunctionFragment;
    "DATA_COMPRESSOR()": FunctionFragment;
    "FARMING_ACCOUNT_FACTORY()": FunctionFragment;
    "GEAR_TOKEN()": FunctionFragment;
    "PRICE_ORACLE()": FunctionFragment;
    "TRADER_ACCOUNT_FACTORY()": FunctionFragment;
    "TREASURY_CONTRACT()": FunctionFragment;
    "VANILLA_ACCOUNT_FACTORY()": FunctionFragment;
    "WETH_GATEWAY()": FunctionFragment;
    "WETH_TOKEN()": FunctionFragment;
    "addresses(bytes32)": FunctionFragment;
    "getACL()": FunctionFragment;
    "getAccountMiner()": FunctionFragment;
    "getContractsRegister()": FunctionFragment;
    "getDataCompressor()": FunctionFragment;
    "getFarmingAccountFactory()": FunctionFragment;
    "getGearToken()": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getTraderAccountFactory()": FunctionFragment;
    "getTreasuryContract()": FunctionFragment;
    "getVanillaAccountFactory()": FunctionFragment;
    "getWETHGateway()": FunctionFragment;
    "getWethToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setACL(address)": FunctionFragment;
    "setAccountMiner(address)": FunctionFragment;
    "setContractsRegister(address)": FunctionFragment;
    "setDataCompressor(address)": FunctionFragment;
    "setFarmingAccountFactory(address)": FunctionFragment;
    "setGearToken(address)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setTraderAccountFactory(address)": FunctionFragment;
    "setTreasuryContract(address)": FunctionFragment;
    "setVanillaAccountFactory(address)": FunctionFragment;
    "setWETHGateway(address)": FunctionFragment;
    "setWethToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCOUNT_MINER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CONTRACTS_REGISTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATA_COMPRESSOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FARMING_ACCOUNT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GEAR_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_ACCOUNT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VANILLA_ACCOUNT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_GATEWAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataCompressor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFarmingAccountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGearToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderAccountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVanillaAccountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWethToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setACL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAccountMiner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractsRegister",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataCompressor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmingAccountFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGearToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderAccountFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVanillaAccountFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWETHGateway",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWethToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCOUNT_MINER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACTS_REGISTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATA_COMPRESSOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FARMING_ACCOUNT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GEAR_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_ACCOUNT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VANILLA_ACCOUNT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_GATEWAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataCompressor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFarmingAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVanillaAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataCompressor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFarmingAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGearToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVanillaAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWETHGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressSet(bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class AddressProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AddressProviderInterface;

  functions: {
    ACCOUNT_MINER(overrides?: CallOverrides): Promise<[string]>;

    "ACCOUNT_MINER()"(overrides?: CallOverrides): Promise<[string]>;

    ACL(overrides?: CallOverrides): Promise<[string]>;

    "ACL()"(overrides?: CallOverrides): Promise<[string]>;

    CONTRACTS_REGISTER(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACTS_REGISTER()"(overrides?: CallOverrides): Promise<[string]>;

    DATA_COMPRESSOR(overrides?: CallOverrides): Promise<[string]>;

    "DATA_COMPRESSOR()"(overrides?: CallOverrides): Promise<[string]>;

    FARMING_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "FARMING_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    GEAR_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    "GEAR_TOKEN()"(overrides?: CallOverrides): Promise<[string]>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "PRICE_ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    TRADER_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "TRADER_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "TREASURY_CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    VANILLA_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "VANILLA_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    WETH_GATEWAY(overrides?: CallOverrides): Promise<[string]>;

    "WETH_GATEWAY()"(overrides?: CallOverrides): Promise<[string]>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    "WETH_TOKEN()"(overrides?: CallOverrides): Promise<[string]>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "addresses(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getACL(overrides?: CallOverrides): Promise<[string]>;

    "getACL()"(overrides?: CallOverrides): Promise<[string]>;

    getAccountMiner(overrides?: CallOverrides): Promise<[string]>;

    "getAccountMiner()"(overrides?: CallOverrides): Promise<[string]>;

    getContractsRegister(overrides?: CallOverrides): Promise<[string]>;

    "getContractsRegister()"(overrides?: CallOverrides): Promise<[string]>;

    getDataCompressor(overrides?: CallOverrides): Promise<[string]>;

    "getDataCompressor()"(overrides?: CallOverrides): Promise<[string]>;

    getFarmingAccountFactory(overrides?: CallOverrides): Promise<[string]>;

    "getFarmingAccountFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getGearToken(overrides?: CallOverrides): Promise<[string]>;

    "getGearToken()"(overrides?: CallOverrides): Promise<[string]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    "getPriceOracle()"(overrides?: CallOverrides): Promise<[string]>;

    getTraderAccountFactory(overrides?: CallOverrides): Promise<[string]>;

    "getTraderAccountFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getTreasuryContract(overrides?: CallOverrides): Promise<[string]>;

    "getTreasuryContract()"(overrides?: CallOverrides): Promise<[string]>;

    getVanillaAccountFactory(overrides?: CallOverrides): Promise<[string]>;

    "getVanillaAccountFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getWETHGateway(overrides?: CallOverrides): Promise<[string]>;

    "getWETHGateway()"(overrides?: CallOverrides): Promise<[string]>;

    getWethToken(overrides?: CallOverrides): Promise<[string]>;

    "getWethToken()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setACL(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setACL(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccountMiner(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountMiner(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContractsRegister(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContractsRegister(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDataCompressor(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDataCompressor(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFarmingAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFarmingAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGearToken(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGearToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceOracle(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceOracle(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTraderAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTraderAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasuryContract(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasuryContract(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVanillaAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVanillaAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWETHGateway(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWETHGateway(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWethToken(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWethToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ACCOUNT_MINER(overrides?: CallOverrides): Promise<string>;

  "ACCOUNT_MINER()"(overrides?: CallOverrides): Promise<string>;

  ACL(overrides?: CallOverrides): Promise<string>;

  "ACL()"(overrides?: CallOverrides): Promise<string>;

  CONTRACTS_REGISTER(overrides?: CallOverrides): Promise<string>;

  "CONTRACTS_REGISTER()"(overrides?: CallOverrides): Promise<string>;

  DATA_COMPRESSOR(overrides?: CallOverrides): Promise<string>;

  "DATA_COMPRESSOR()"(overrides?: CallOverrides): Promise<string>;

  FARMING_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

  "FARMING_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  GEAR_TOKEN(overrides?: CallOverrides): Promise<string>;

  "GEAR_TOKEN()"(overrides?: CallOverrides): Promise<string>;

  PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

  "PRICE_ORACLE()"(overrides?: CallOverrides): Promise<string>;

  TRADER_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

  "TRADER_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  TREASURY_CONTRACT(overrides?: CallOverrides): Promise<string>;

  "TREASURY_CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  VANILLA_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

  "VANILLA_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  WETH_GATEWAY(overrides?: CallOverrides): Promise<string>;

  "WETH_GATEWAY()"(overrides?: CallOverrides): Promise<string>;

  WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

  "WETH_TOKEN()"(overrides?: CallOverrides): Promise<string>;

  addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addresses(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getACL(overrides?: CallOverrides): Promise<string>;

  "getACL()"(overrides?: CallOverrides): Promise<string>;

  getAccountMiner(overrides?: CallOverrides): Promise<string>;

  "getAccountMiner()"(overrides?: CallOverrides): Promise<string>;

  getContractsRegister(overrides?: CallOverrides): Promise<string>;

  "getContractsRegister()"(overrides?: CallOverrides): Promise<string>;

  getDataCompressor(overrides?: CallOverrides): Promise<string>;

  "getDataCompressor()"(overrides?: CallOverrides): Promise<string>;

  getFarmingAccountFactory(overrides?: CallOverrides): Promise<string>;

  "getFarmingAccountFactory()"(overrides?: CallOverrides): Promise<string>;

  getGearToken(overrides?: CallOverrides): Promise<string>;

  "getGearToken()"(overrides?: CallOverrides): Promise<string>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  "getPriceOracle()"(overrides?: CallOverrides): Promise<string>;

  getTraderAccountFactory(overrides?: CallOverrides): Promise<string>;

  "getTraderAccountFactory()"(overrides?: CallOverrides): Promise<string>;

  getTreasuryContract(overrides?: CallOverrides): Promise<string>;

  "getTreasuryContract()"(overrides?: CallOverrides): Promise<string>;

  getVanillaAccountFactory(overrides?: CallOverrides): Promise<string>;

  "getVanillaAccountFactory()"(overrides?: CallOverrides): Promise<string>;

  getWETHGateway(overrides?: CallOverrides): Promise<string>;

  "getWETHGateway()"(overrides?: CallOverrides): Promise<string>;

  getWethToken(overrides?: CallOverrides): Promise<string>;

  "getWethToken()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setACL(_address: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setACL(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccountMiner(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountMiner(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContractsRegister(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContractsRegister(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDataCompressor(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDataCompressor(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFarmingAccountFactory(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFarmingAccountFactory(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGearToken(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGearToken(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceOracle(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceOracle(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTraderAccountFactory(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTraderAccountFactory(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasuryContract(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasuryContract(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVanillaAccountFactory(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVanillaAccountFactory(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWETHGateway(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWETHGateway(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWethToken(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWethToken(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCOUNT_MINER(overrides?: CallOverrides): Promise<string>;

    "ACCOUNT_MINER()"(overrides?: CallOverrides): Promise<string>;

    ACL(overrides?: CallOverrides): Promise<string>;

    "ACL()"(overrides?: CallOverrides): Promise<string>;

    CONTRACTS_REGISTER(overrides?: CallOverrides): Promise<string>;

    "CONTRACTS_REGISTER()"(overrides?: CallOverrides): Promise<string>;

    DATA_COMPRESSOR(overrides?: CallOverrides): Promise<string>;

    "DATA_COMPRESSOR()"(overrides?: CallOverrides): Promise<string>;

    FARMING_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

    "FARMING_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    GEAR_TOKEN(overrides?: CallOverrides): Promise<string>;

    "GEAR_TOKEN()"(overrides?: CallOverrides): Promise<string>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

    "PRICE_ORACLE()"(overrides?: CallOverrides): Promise<string>;

    TRADER_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

    "TRADER_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    TREASURY_CONTRACT(overrides?: CallOverrides): Promise<string>;

    "TREASURY_CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    VANILLA_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<string>;

    "VANILLA_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    WETH_GATEWAY(overrides?: CallOverrides): Promise<string>;

    "WETH_GATEWAY()"(overrides?: CallOverrides): Promise<string>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

    "WETH_TOKEN()"(overrides?: CallOverrides): Promise<string>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addresses(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getACL(overrides?: CallOverrides): Promise<string>;

    "getACL()"(overrides?: CallOverrides): Promise<string>;

    getAccountMiner(overrides?: CallOverrides): Promise<string>;

    "getAccountMiner()"(overrides?: CallOverrides): Promise<string>;

    getContractsRegister(overrides?: CallOverrides): Promise<string>;

    "getContractsRegister()"(overrides?: CallOverrides): Promise<string>;

    getDataCompressor(overrides?: CallOverrides): Promise<string>;

    "getDataCompressor()"(overrides?: CallOverrides): Promise<string>;

    getFarmingAccountFactory(overrides?: CallOverrides): Promise<string>;

    "getFarmingAccountFactory()"(overrides?: CallOverrides): Promise<string>;

    getGearToken(overrides?: CallOverrides): Promise<string>;

    "getGearToken()"(overrides?: CallOverrides): Promise<string>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    "getPriceOracle()"(overrides?: CallOverrides): Promise<string>;

    getTraderAccountFactory(overrides?: CallOverrides): Promise<string>;

    "getTraderAccountFactory()"(overrides?: CallOverrides): Promise<string>;

    getTreasuryContract(overrides?: CallOverrides): Promise<string>;

    "getTreasuryContract()"(overrides?: CallOverrides): Promise<string>;

    getVanillaAccountFactory(overrides?: CallOverrides): Promise<string>;

    "getVanillaAccountFactory()"(overrides?: CallOverrides): Promise<string>;

    getWETHGateway(overrides?: CallOverrides): Promise<string>;

    "getWETHGateway()"(overrides?: CallOverrides): Promise<string>;

    getWethToken(overrides?: CallOverrides): Promise<string>;

    "getWethToken()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setACL(_address: string, overrides?: CallOverrides): Promise<void>;

    "setACL(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountMiner(_address: string, overrides?: CallOverrides): Promise<void>;

    "setAccountMiner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractsRegister(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractsRegister(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDataCompressor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDataCompressor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFarmingAccountFactory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFarmingAccountFactory(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGearToken(_address: string, overrides?: CallOverrides): Promise<void>;

    "setGearToken(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(_address: string, overrides?: CallOverrides): Promise<void>;

    "setPriceOracle(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderAccountFactory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTraderAccountFactory(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryContract(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryContract(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVanillaAccountFactory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVanillaAccountFactory(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWETHGateway(_address: string, overrides?: CallOverrides): Promise<void>;

    "setWETHGateway(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWethToken(_address: string, overrides?: CallOverrides): Promise<void>;

    "setWethToken(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddressSet(
      service: BytesLike | null,
      newAddress: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    ACCOUNT_MINER(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCOUNT_MINER()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACL(overrides?: CallOverrides): Promise<BigNumber>;

    "ACL()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACTS_REGISTER(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACTS_REGISTER()"(overrides?: CallOverrides): Promise<BigNumber>;

    DATA_COMPRESSOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DATA_COMPRESSOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    FARMING_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "FARMING_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    GEAR_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "GEAR_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PRICE_ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRADER_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "TRADER_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "TREASURY_CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    VANILLA_ACCOUNT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "VANILLA_ACCOUNT_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_GATEWAY(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH_GATEWAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH_TOKEN()"(overrides?: CallOverrides): Promise<BigNumber>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "addresses(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getACL(overrides?: CallOverrides): Promise<BigNumber>;

    "getACL()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountMiner(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccountMiner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getContractsRegister(overrides?: CallOverrides): Promise<BigNumber>;

    "getContractsRegister()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDataCompressor(overrides?: CallOverrides): Promise<BigNumber>;

    "getDataCompressor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFarmingAccountFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "getFarmingAccountFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGearToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getGearToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderAccountFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "getTraderAccountFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getTreasuryContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVanillaAccountFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "getVanillaAccountFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWETHGateway(overrides?: CallOverrides): Promise<BigNumber>;

    "getWETHGateway()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWethToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getWethToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setACL(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "setACL(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAccountMiner(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountMiner(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContractsRegister(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContractsRegister(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDataCompressor(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDataCompressor(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFarmingAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFarmingAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGearToken(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "setGearToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceOracle(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "setPriceOracle(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTraderAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTraderAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasuryContract(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasuryContract(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVanillaAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVanillaAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWETHGateway(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "setWETHGateway(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWethToken(_address: string, overrides?: Overrides): Promise<BigNumber>;

    "setWethToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCOUNT_MINER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACCOUNT_MINER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRACTS_REGISTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONTRACTS_REGISTER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DATA_COMPRESSOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DATA_COMPRESSOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FARMING_ACCOUNT_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FARMING_ACCOUNT_FACTORY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GEAR_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GEAR_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRICE_ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRADER_ACCOUNT_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRADER_ACCOUNT_FACTORY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TREASURY_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VANILLA_ACCOUNT_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "VANILLA_ACCOUNT_FACTORY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH_GATEWAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH_GATEWAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH_TOKEN()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addresses(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addresses(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getACL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getACL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountMiner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAccountMiner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractsRegister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractsRegister()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataCompressor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDataCompressor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFarmingAccountFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFarmingAccountFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGearToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGearToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPriceOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderAccountFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTraderAccountFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTreasuryContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVanillaAccountFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVanillaAccountFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWETHGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWETHGateway()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWethToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setACL(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setACL(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAccountMiner(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountMiner(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContractsRegister(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContractsRegister(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDataCompressor(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDataCompressor(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFarmingAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFarmingAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGearToken(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGearToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceOracle(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTraderAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTraderAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasuryContract(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasuryContract(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVanillaAccountFactory(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVanillaAccountFactory(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWETHGateway(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWETHGateway(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWethToken(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWethToken(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
