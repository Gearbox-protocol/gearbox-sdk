/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StepVestingInterface extends ethers.utils.Interface {
  functions: {
    "available()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimable()": FunctionFragment;
    "claimed()": FunctionFragment;
    "cliffAmount()": FunctionFragment;
    "cliffDuration()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "numOfSteps()": FunctionFragment;
    "receiver()": FunctionFragment;
    "setReceiver(address)": FunctionFragment;
    "started()": FunctionFragment;
    "stepAmount()": FunctionFragment;
    "stepDuration()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "available", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimable", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cliffDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numOfSteps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(functionFragment: "setReceiver", values: [string]): string;
  encodeFunctionData(functionFragment: "started", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stepAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stepDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cliffDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numOfSteps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "started", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stepAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stepDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "ReceiverChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceiverChanged"): EventFragment;
}

export class StepVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StepVestingInterface;

  functions: {
    available(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cliffDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numOfSteps(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    started(overrides?: CallOverrides): Promise<[BigNumber]>;

    stepAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    stepDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  available(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(overrides?: CallOverrides): Promise<BigNumber>;

  claimed(overrides?: CallOverrides): Promise<BigNumber>;

  cliffAmount(overrides?: CallOverrides): Promise<BigNumber>;

  cliffDuration(overrides?: CallOverrides): Promise<BigNumber>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numOfSteps(overrides?: CallOverrides): Promise<BigNumber>;

  receiver(overrides?: CallOverrides): Promise<string>;

  setReceiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  started(overrides?: CallOverrides): Promise<BigNumber>;

  stepAmount(overrides?: CallOverrides): Promise<BigNumber>;

  stepDuration(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    available(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    cliffAmount(overrides?: CallOverrides): Promise<BigNumber>;

    cliffDuration(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    numOfSteps(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<string>;

    setReceiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    stepAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stepDuration(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ReceiverChanged(
      oldWallet?: null,
      newWallet?: null
    ): TypedEventFilter<
      [string, string],
      { oldWallet: string; newWallet: string }
    >;
  };

  estimateGas: {
    available(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    cliffAmount(overrides?: CallOverrides): Promise<BigNumber>;

    cliffDuration(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numOfSteps(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    stepAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stepDuration(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numOfSteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stepAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stepDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
