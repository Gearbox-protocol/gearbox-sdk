/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RedstonePriceFeedInterface extends utils.Interface {
  functions: {
    "aggregateValues(uint256[])": FunctionFragment;
    "dataFeedId()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "extractTimestampsAndAssertAllAreEqual()": FunctionFragment;
    "getAuthorisedSignerIndex(address)": FunctionFragment;
    "getDataServiceId()": FunctionFragment;
    "getUniqueSignersThreshold()": FunctionFragment;
    "lastPayloadTimestamp()": FunctionFragment;
    "lastPrice()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "priceFeedType()": FunctionFragment;
    "signerAddress0()": FunctionFragment;
    "signerAddress1()": FunctionFragment;
    "signerAddress2()": FunctionFragment;
    "signerAddress3()": FunctionFragment;
    "signerAddress4()": FunctionFragment;
    "signerAddress5()": FunctionFragment;
    "signerAddress6()": FunctionFragment;
    "signerAddress7()": FunctionFragment;
    "signerAddress8()": FunctionFragment;
    "signerAddress9()": FunctionFragment;
    "skipPriceCheck()": FunctionFragment;
    "token()": FunctionFragment;
    "updatable()": FunctionFragment;
    "updatePrice(bytes)": FunctionFragment;
    "validateTimestamp(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregateValues"
      | "dataFeedId"
      | "decimals"
      | "description"
      | "extractTimestampsAndAssertAllAreEqual"
      | "getAuthorisedSignerIndex"
      | "getDataServiceId"
      | "getUniqueSignersThreshold"
      | "lastPayloadTimestamp"
      | "lastPrice"
      | "latestRoundData"
      | "priceFeedType"
      | "signerAddress0"
      | "signerAddress1"
      | "signerAddress2"
      | "signerAddress3"
      | "signerAddress4"
      | "signerAddress5"
      | "signerAddress6"
      | "signerAddress7"
      | "signerAddress8"
      | "signerAddress9"
      | "skipPriceCheck"
      | "token"
      | "updatable"
      | "updatePrice"
      | "validateTimestamp"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregateValues",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dataFeedId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPayloadTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress6",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress9",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipPriceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "updatable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "aggregateValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataFeedId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPayloadTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress7",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress9",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skipPriceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "UpdatePrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
}

export interface UpdatePriceEventObject {
  price: BigNumber;
}
export type UpdatePriceEvent = TypedEvent<[BigNumber], UpdatePriceEventObject>;

export type UpdatePriceEventFilter = TypedEventFilter<UpdatePriceEvent>;

export interface RedstonePriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RedstonePriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dataFeedId(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { extractedTimestamp: BigNumber }>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDataServiceId(overrides?: CallOverrides): Promise<[string]>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<[number]>;

    lastPayloadTimestamp(overrides?: CallOverrides): Promise<[number]>;

    lastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    priceFeedType(overrides?: CallOverrides): Promise<[number]>;

    signerAddress0(overrides?: CallOverrides): Promise<[string]>;

    signerAddress1(overrides?: CallOverrides): Promise<[string]>;

    signerAddress2(overrides?: CallOverrides): Promise<[string]>;

    signerAddress3(overrides?: CallOverrides): Promise<[string]>;

    signerAddress4(overrides?: CallOverrides): Promise<[string]>;

    signerAddress5(overrides?: CallOverrides): Promise<[string]>;

    signerAddress6(overrides?: CallOverrides): Promise<[string]>;

    signerAddress7(overrides?: CallOverrides): Promise<[string]>;

    signerAddress8(overrides?: CallOverrides): Promise<[string]>;

    signerAddress9(overrides?: CallOverrides): Promise<[string]>;

    skipPriceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    updatable(overrides?: CallOverrides): Promise<[boolean]>;

    updatePrice(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  aggregateValues(
    values: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dataFeedId(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  extractTimestampsAndAssertAllAreEqual(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuthorisedSignerIndex(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDataServiceId(overrides?: CallOverrides): Promise<string>;

  getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

  lastPayloadTimestamp(overrides?: CallOverrides): Promise<number>;

  lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  priceFeedType(overrides?: CallOverrides): Promise<number>;

  signerAddress0(overrides?: CallOverrides): Promise<string>;

  signerAddress1(overrides?: CallOverrides): Promise<string>;

  signerAddress2(overrides?: CallOverrides): Promise<string>;

  signerAddress3(overrides?: CallOverrides): Promise<string>;

  signerAddress4(overrides?: CallOverrides): Promise<string>;

  signerAddress5(overrides?: CallOverrides): Promise<string>;

  signerAddress6(overrides?: CallOverrides): Promise<string>;

  signerAddress7(overrides?: CallOverrides): Promise<string>;

  signerAddress8(overrides?: CallOverrides): Promise<string>;

  signerAddress9(overrides?: CallOverrides): Promise<string>;

  skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  updatable(overrides?: CallOverrides): Promise<boolean>;

  updatePrice(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTimestamp(
    receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataFeedId(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDataServiceId(overrides?: CallOverrides): Promise<string>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

    lastPayloadTimestamp(overrides?: CallOverrides): Promise<number>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    priceFeedType(overrides?: CallOverrides): Promise<number>;

    signerAddress0(overrides?: CallOverrides): Promise<string>;

    signerAddress1(overrides?: CallOverrides): Promise<string>;

    signerAddress2(overrides?: CallOverrides): Promise<string>;

    signerAddress3(overrides?: CallOverrides): Promise<string>;

    signerAddress4(overrides?: CallOverrides): Promise<string>;

    signerAddress5(overrides?: CallOverrides): Promise<string>;

    signerAddress6(overrides?: CallOverrides): Promise<string>;

    signerAddress7(overrides?: CallOverrides): Promise<string>;

    signerAddress8(overrides?: CallOverrides): Promise<string>;

    signerAddress9(overrides?: CallOverrides): Promise<string>;

    skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    updatable(overrides?: CallOverrides): Promise<boolean>;

    updatePrice(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "UpdatePrice(uint256)"(price?: null): UpdatePriceEventFilter;
    UpdatePrice(price?: null): UpdatePriceEventFilter;
  };

  estimateGas: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataFeedId(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataServiceId(overrides?: CallOverrides): Promise<BigNumber>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    lastPayloadTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedType(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress0(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress1(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress2(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress3(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress4(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress5(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress6(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress7(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress8(overrides?: CallOverrides): Promise<BigNumber>;

    signerAddress9(overrides?: CallOverrides): Promise<BigNumber>;

    skipPriceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    updatable(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataFeedId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataServiceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniqueSignersThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPayloadTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress6(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress7(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signerAddress9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skipPriceCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
