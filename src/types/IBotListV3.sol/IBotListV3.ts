/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBotListV3Interface extends utils.Interface {
  functions: {
    "activeBots(address,address)": FunctionFragment;
    "approvedCreditManager(address)": FunctionFragment;
    "botForbiddenStatus(address)": FunctionFragment;
    "botPermissions(address,address,address)": FunctionFragment;
    "botSpecialPermissions(address,address)": FunctionFragment;
    "eraseAllBotPermissions(address,address)": FunctionFragment;
    "getBotStatus(address,address,address)": FunctionFragment;
    "setBotForbiddenStatus(address,bool)": FunctionFragment;
    "setBotPermissions(address,address,address,uint192)": FunctionFragment;
    "setBotSpecialPermissions(address,address,uint192)": FunctionFragment;
    "setCreditManagerApprovedStatus(address,bool)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeBots"
      | "approvedCreditManager"
      | "botForbiddenStatus"
      | "botPermissions"
      | "botSpecialPermissions"
      | "eraseAllBotPermissions"
      | "getBotStatus"
      | "setBotForbiddenStatus"
      | "setBotPermissions"
      | "setBotSpecialPermissions"
      | "setCreditManagerApprovedStatus"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeBots",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCreditManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "botForbiddenStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "botPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "botSpecialPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "eraseAllBotPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBotStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotForbiddenStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotSpecialPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerApprovedStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "activeBots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botForbiddenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botSpecialPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eraseAllBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBotStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotForbiddenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotSpecialPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerApprovedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "EraseBot(address,address,address)": EventFragment;
    "SetBotForbiddenStatus(address,bool)": EventFragment;
    "SetBotPermissions(address,address,address,uint192)": EventFragment;
    "SetBotSpecialPermissions(address,address,uint192)": EventFragment;
    "SetCreditManagerApprovedStatus(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EraseBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotForbiddenStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotSpecialPermissions"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetCreditManagerApprovedStatus"
  ): EventFragment;
}

export interface EraseBotEventObject {
  bot: string;
  creditManager: string;
  creditAccount: string;
}
export type EraseBotEvent = TypedEvent<
  [string, string, string],
  EraseBotEventObject
>;

export type EraseBotEventFilter = TypedEventFilter<EraseBotEvent>;

export interface SetBotForbiddenStatusEventObject {
  bot: string;
  forbidden: boolean;
}
export type SetBotForbiddenStatusEvent = TypedEvent<
  [string, boolean],
  SetBotForbiddenStatusEventObject
>;

export type SetBotForbiddenStatusEventFilter =
  TypedEventFilter<SetBotForbiddenStatusEvent>;

export interface SetBotPermissionsEventObject {
  bot: string;
  creditManager: string;
  creditAccount: string;
  permissions: BigNumber;
}
export type SetBotPermissionsEvent = TypedEvent<
  [string, string, string, BigNumber],
  SetBotPermissionsEventObject
>;

export type SetBotPermissionsEventFilter =
  TypedEventFilter<SetBotPermissionsEvent>;

export interface SetBotSpecialPermissionsEventObject {
  bot: string;
  creditManager: string;
  permissions: BigNumber;
}
export type SetBotSpecialPermissionsEvent = TypedEvent<
  [string, string, BigNumber],
  SetBotSpecialPermissionsEventObject
>;

export type SetBotSpecialPermissionsEventFilter =
  TypedEventFilter<SetBotSpecialPermissionsEvent>;

export interface SetCreditManagerApprovedStatusEventObject {
  creditManager: string;
  approved: boolean;
}
export type SetCreditManagerApprovedStatusEvent = TypedEvent<
  [string, boolean],
  SetCreditManagerApprovedStatusEventObject
>;

export type SetCreditManagerApprovedStatusEventFilter =
  TypedEventFilter<SetCreditManagerApprovedStatusEvent>;

export interface IBotListV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBotListV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    approvedCreditManager(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    botForbiddenStatus(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    botPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    botSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBotStatus(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        permissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    setBotForbiddenStatus(
      bot: PromiseOrValue<string>,
      forbidden: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditManagerApprovedStatus(
      creditManager: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeBots(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  approvedCreditManager(
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  botForbiddenStatus(
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  botPermissions(
    bot: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  botSpecialPermissions(
    bot: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eraseAllBotPermissions(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBotStatus(
    bot: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      permissions: BigNumber;
      forbidden: boolean;
      hasSpecialPermissions: boolean;
    }
  >;

  setBotForbiddenStatus(
    bot: PromiseOrValue<string>,
    forbidden: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotPermissions(
    bot: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotSpecialPermissions(
    bot: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditManagerApprovedStatus(
    creditManager: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    approvedCreditManager(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    botForbiddenStatus(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    botPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBotStatus(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        permissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    setBotForbiddenStatus(
      bot: PromiseOrValue<string>,
      forbidden: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditManagerApprovedStatus(
      creditManager: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EraseBot(address,address,address)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;
    EraseBot(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;

    "SetBotForbiddenStatus(address,bool)"(
      bot?: PromiseOrValue<string> | null,
      forbidden?: null
    ): SetBotForbiddenStatusEventFilter;
    SetBotForbiddenStatus(
      bot?: PromiseOrValue<string> | null,
      forbidden?: null
    ): SetBotForbiddenStatusEventFilter;

    "SetBotPermissions(address,address,address,uint192)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotPermissionsEventFilter;
    SetBotPermissions(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotPermissionsEventFilter;

    "SetBotSpecialPermissions(address,address,uint192)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;
    SetBotSpecialPermissions(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;

    "SetCreditManagerApprovedStatus(address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      approved?: null
    ): SetCreditManagerApprovedStatusEventFilter;
    SetCreditManagerApprovedStatus(
      creditManager?: PromiseOrValue<string> | null,
      approved?: null
    ): SetCreditManagerApprovedStatusEventFilter;
  };

  estimateGas: {
    activeBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedCreditManager(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botForbiddenStatus(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBotStatus(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotForbiddenStatus(
      bot: PromiseOrValue<string>,
      forbidden: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditManagerApprovedStatus(
      creditManager: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedCreditManager(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botForbiddenStatus(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBotStatus(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBotForbiddenStatus(
      bot: PromiseOrValue<string>,
      forbidden: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotSpecialPermissions(
      bot: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditManagerApprovedStatus(
      creditManager: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
