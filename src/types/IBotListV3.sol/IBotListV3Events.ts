/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBotListV3EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "EraseBot(address,address,address)": EventFragment;
    "SetBotForbiddenStatus(address,bool)": EventFragment;
    "SetBotPermissions(address,address,address,uint192)": EventFragment;
    "SetBotSpecialPermissions(address,address,uint192)": EventFragment;
    "SetCreditManagerApprovedStatus(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EraseBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotForbiddenStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotSpecialPermissions"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetCreditManagerApprovedStatus"
  ): EventFragment;
}

export interface EraseBotEventObject {
  bot: string;
  creditManager: string;
  creditAccount: string;
}
export type EraseBotEvent = TypedEvent<
  [string, string, string],
  EraseBotEventObject
>;

export type EraseBotEventFilter = TypedEventFilter<EraseBotEvent>;

export interface SetBotForbiddenStatusEventObject {
  bot: string;
  forbidden: boolean;
}
export type SetBotForbiddenStatusEvent = TypedEvent<
  [string, boolean],
  SetBotForbiddenStatusEventObject
>;

export type SetBotForbiddenStatusEventFilter =
  TypedEventFilter<SetBotForbiddenStatusEvent>;

export interface SetBotPermissionsEventObject {
  bot: string;
  creditManager: string;
  creditAccount: string;
  permissions: BigNumber;
}
export type SetBotPermissionsEvent = TypedEvent<
  [string, string, string, BigNumber],
  SetBotPermissionsEventObject
>;

export type SetBotPermissionsEventFilter =
  TypedEventFilter<SetBotPermissionsEvent>;

export interface SetBotSpecialPermissionsEventObject {
  bot: string;
  creditManager: string;
  permissions: BigNumber;
}
export type SetBotSpecialPermissionsEvent = TypedEvent<
  [string, string, BigNumber],
  SetBotSpecialPermissionsEventObject
>;

export type SetBotSpecialPermissionsEventFilter =
  TypedEventFilter<SetBotSpecialPermissionsEvent>;

export interface SetCreditManagerApprovedStatusEventObject {
  creditManager: string;
  approved: boolean;
}
export type SetCreditManagerApprovedStatusEvent = TypedEvent<
  [string, boolean],
  SetCreditManagerApprovedStatusEventObject
>;

export type SetCreditManagerApprovedStatusEventFilter =
  TypedEventFilter<SetCreditManagerApprovedStatusEvent>;

export interface IBotListV3Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBotListV3EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "EraseBot(address,address,address)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;
    EraseBot(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;

    "SetBotForbiddenStatus(address,bool)"(
      bot?: PromiseOrValue<string> | null,
      forbidden?: null
    ): SetBotForbiddenStatusEventFilter;
    SetBotForbiddenStatus(
      bot?: PromiseOrValue<string> | null,
      forbidden?: null
    ): SetBotForbiddenStatusEventFilter;

    "SetBotPermissions(address,address,address,uint192)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotPermissionsEventFilter;
    SetBotPermissions(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotPermissionsEventFilter;

    "SetBotSpecialPermissions(address,address,uint192)"(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;
    SetBotSpecialPermissions(
      bot?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;

    "SetCreditManagerApprovedStatus(address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      approved?: null
    ): SetCreditManagerApprovedStatusEventFilter;
    SetCreditManagerApprovedStatus(
      creditManager?: PromiseOrValue<string> | null,
      approved?: null
    ): SetCreditManagerApprovedStatusEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
