/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface IBotListV3EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "EraseBot"
      | "SetBotForbiddenStatus"
      | "SetBotPermissions"
      | "SetBotSpecialPermissions"
      | "SetCreditManagerApprovedStatus"
  ): EventFragment;
}

export namespace EraseBotEvent {
  export type InputTuple = [
    bot: AddressLike,
    creditManager: AddressLike,
    creditAccount: AddressLike
  ];
  export type OutputTuple = [
    bot: string,
    creditManager: string,
    creditAccount: string
  ];
  export interface OutputObject {
    bot: string;
    creditManager: string;
    creditAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBotForbiddenStatusEvent {
  export type InputTuple = [bot: AddressLike, forbidden: boolean];
  export type OutputTuple = [bot: string, forbidden: boolean];
  export interface OutputObject {
    bot: string;
    forbidden: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBotPermissionsEvent {
  export type InputTuple = [
    bot: AddressLike,
    creditManager: AddressLike,
    creditAccount: AddressLike,
    permissions: BigNumberish
  ];
  export type OutputTuple = [
    bot: string,
    creditManager: string,
    creditAccount: string,
    permissions: bigint
  ];
  export interface OutputObject {
    bot: string;
    creditManager: string;
    creditAccount: string;
    permissions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBotSpecialPermissionsEvent {
  export type InputTuple = [
    bot: AddressLike,
    creditManager: AddressLike,
    permissions: BigNumberish
  ];
  export type OutputTuple = [
    bot: string,
    creditManager: string,
    permissions: bigint
  ];
  export interface OutputObject {
    bot: string;
    creditManager: string;
    permissions: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCreditManagerApprovedStatusEvent {
  export type InputTuple = [creditManager: AddressLike, approved: boolean];
  export type OutputTuple = [creditManager: string, approved: boolean];
  export interface OutputObject {
    creditManager: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBotListV3Events extends BaseContract {
  connect(runner?: ContractRunner | null): IBotListV3Events;
  waitForDeployment(): Promise<this>;

  interface: IBotListV3EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "EraseBot"
  ): TypedContractEvent<
    EraseBotEvent.InputTuple,
    EraseBotEvent.OutputTuple,
    EraseBotEvent.OutputObject
  >;
  getEvent(
    key: "SetBotForbiddenStatus"
  ): TypedContractEvent<
    SetBotForbiddenStatusEvent.InputTuple,
    SetBotForbiddenStatusEvent.OutputTuple,
    SetBotForbiddenStatusEvent.OutputObject
  >;
  getEvent(
    key: "SetBotPermissions"
  ): TypedContractEvent<
    SetBotPermissionsEvent.InputTuple,
    SetBotPermissionsEvent.OutputTuple,
    SetBotPermissionsEvent.OutputObject
  >;
  getEvent(
    key: "SetBotSpecialPermissions"
  ): TypedContractEvent<
    SetBotSpecialPermissionsEvent.InputTuple,
    SetBotSpecialPermissionsEvent.OutputTuple,
    SetBotSpecialPermissionsEvent.OutputObject
  >;
  getEvent(
    key: "SetCreditManagerApprovedStatus"
  ): TypedContractEvent<
    SetCreditManagerApprovedStatusEvent.InputTuple,
    SetCreditManagerApprovedStatusEvent.OutputTuple,
    SetCreditManagerApprovedStatusEvent.OutputObject
  >;

  filters: {
    "EraseBot(address,address,address)": TypedContractEvent<
      EraseBotEvent.InputTuple,
      EraseBotEvent.OutputTuple,
      EraseBotEvent.OutputObject
    >;
    EraseBot: TypedContractEvent<
      EraseBotEvent.InputTuple,
      EraseBotEvent.OutputTuple,
      EraseBotEvent.OutputObject
    >;

    "SetBotForbiddenStatus(address,bool)": TypedContractEvent<
      SetBotForbiddenStatusEvent.InputTuple,
      SetBotForbiddenStatusEvent.OutputTuple,
      SetBotForbiddenStatusEvent.OutputObject
    >;
    SetBotForbiddenStatus: TypedContractEvent<
      SetBotForbiddenStatusEvent.InputTuple,
      SetBotForbiddenStatusEvent.OutputTuple,
      SetBotForbiddenStatusEvent.OutputObject
    >;

    "SetBotPermissions(address,address,address,uint192)": TypedContractEvent<
      SetBotPermissionsEvent.InputTuple,
      SetBotPermissionsEvent.OutputTuple,
      SetBotPermissionsEvent.OutputObject
    >;
    SetBotPermissions: TypedContractEvent<
      SetBotPermissionsEvent.InputTuple,
      SetBotPermissionsEvent.OutputTuple,
      SetBotPermissionsEvent.OutputObject
    >;

    "SetBotSpecialPermissions(address,address,uint192)": TypedContractEvent<
      SetBotSpecialPermissionsEvent.InputTuple,
      SetBotSpecialPermissionsEvent.OutputTuple,
      SetBotSpecialPermissionsEvent.OutputObject
    >;
    SetBotSpecialPermissions: TypedContractEvent<
      SetBotSpecialPermissionsEvent.InputTuple,
      SetBotSpecialPermissionsEvent.OutputTuple,
      SetBotSpecialPermissionsEvent.OutputObject
    >;

    "SetCreditManagerApprovedStatus(address,bool)": TypedContractEvent<
      SetCreditManagerApprovedStatusEvent.InputTuple,
      SetCreditManagerApprovedStatusEvent.OutputTuple,
      SetCreditManagerApprovedStatusEvent.OutputObject
    >;
    SetCreditManagerApprovedStatus: TypedContractEvent<
      SetCreditManagerApprovedStatusEvent.InputTuple,
      SetCreditManagerApprovedStatusEvent.OutputTuple,
      SetCreditManagerApprovedStatusEvent.OutputObject
    >;
  };
}
