/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IPoolServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_cumulativeIndex_RAY"
      | "_timestampLU"
      | "addLiquidity"
      | "addressProvider"
      | "availableLiquidity"
      | "borrowAPY_RAY"
      | "calcLinearCumulative_RAY"
      | "creditManagers"
      | "creditManagersCanBorrow"
      | "creditManagersCount"
      | "dieselToken"
      | "expectedLiquidity"
      | "expectedLiquidityLimit"
      | "fromDiesel"
      | "getDieselRate_RAY"
      | "lendCreditAccount"
      | "removeLiquidity"
      | "repayCreditAccount"
      | "toDiesel"
      | "totalBorrowed"
      | "underlyingToken"
      | "version"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquidity"
      | "Borrow"
      | "BorrowForbidden"
      | "NewCreditManagerConnected"
      | "NewExpectedLiquidityLimit"
      | "NewInterestRateModel"
      | "NewWithdrawFee"
      | "RemoveLiquidity"
      | "Repay"
      | "UncoveredLoss"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_cumulativeIndex_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_timestampLU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAPY_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcLinearCumulative_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagersCanBorrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dieselToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidityLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fromDiesel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDieselRate_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toDiesel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_cumulativeIndex_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_timestampLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAPY_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLinearCumulative_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagersCanBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dieselToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fromDiesel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDieselRate_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toDiesel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [
    sender: AddressLike,
    onBehalfOf: AddressLike,
    amount: BigNumberish,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    onBehalfOf: string,
    amount: bigint,
    referralCode: bigint
  ];
  export interface OutputObject {
    sender: string;
    onBehalfOf: string;
    amount: bigint;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    creditManager: AddressLike,
    creditAccount: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    creditManager: string,
    creditAccount: string,
    amount: bigint
  ];
  export interface OutputObject {
    creditManager: string;
    creditAccount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowForbiddenEvent {
  export type InputTuple = [creditManager: AddressLike];
  export type OutputTuple = [creditManager: string];
  export interface OutputObject {
    creditManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCreditManagerConnectedEvent {
  export type InputTuple = [creditManager: AddressLike];
  export type OutputTuple = [creditManager: string];
  export interface OutputObject {
    creditManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewExpectedLiquidityLimitEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewInterestRateModelEvent {
  export type InputTuple = [newInterestRateModel: AddressLike];
  export type OutputTuple = [newInterestRateModel: string];
  export interface OutputObject {
    newInterestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewWithdrawFeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [
    sender: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, to: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    creditManager: AddressLike,
    borrowedAmount: BigNumberish,
    profit: BigNumberish,
    loss: BigNumberish
  ];
  export type OutputTuple = [
    creditManager: string,
    borrowedAmount: bigint,
    profit: bigint,
    loss: bigint
  ];
  export interface OutputObject {
    creditManager: string;
    borrowedAmount: bigint;
    profit: bigint;
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UncoveredLossEvent {
  export type InputTuple = [creditManager: AddressLike, loss: BigNumberish];
  export type OutputTuple = [creditManager: string, loss: bigint];
  export interface OutputObject {
    creditManager: string;
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolService extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolService;
  waitForDeployment(): Promise<this>;

  interface: IPoolServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _cumulativeIndex_RAY: TypedContractMethod<[], [bigint], "view">;

  _timestampLU: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [amount: BigNumberish, onBehalfOf: AddressLike, referralCode: BigNumberish],
    [void],
    "nonpayable"
  >;

  addressProvider: TypedContractMethod<[], [string], "view">;

  availableLiquidity: TypedContractMethod<[], [bigint], "view">;

  borrowAPY_RAY: TypedContractMethod<[], [bigint], "view">;

  calcLinearCumulative_RAY: TypedContractMethod<[], [bigint], "view">;

  creditManagers: TypedContractMethod<[id: BigNumberish], [string], "view">;

  creditManagersCanBorrow: TypedContractMethod<
    [id: AddressLike],
    [boolean],
    "view"
  >;

  creditManagersCount: TypedContractMethod<[], [bigint], "view">;

  dieselToken: TypedContractMethod<[], [string], "view">;

  expectedLiquidity: TypedContractMethod<[], [bigint], "view">;

  expectedLiquidityLimit: TypedContractMethod<[], [bigint], "view">;

  fromDiesel: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  getDieselRate_RAY: TypedContractMethod<[], [bigint], "view">;

  lendCreditAccount: TypedContractMethod<
    [borrowedAmount: BigNumberish, creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  repayCreditAccount: TypedContractMethod<
    [borrowedAmount: BigNumberish, profit: BigNumberish, loss: BigNumberish],
    [void],
    "nonpayable"
  >;

  toDiesel: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  totalBorrowed: TypedContractMethod<[], [bigint], "view">;

  underlyingToken: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_cumulativeIndex_RAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_timestampLU"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [amount: BigNumberish, onBehalfOf: AddressLike, referralCode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowAPY_RAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calcLinearCumulative_RAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditManagers"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "creditManagersCanBorrow"
  ): TypedContractMethod<[id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "creditManagersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dieselToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "expectedLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expectedLiquidityLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fromDiesel"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDieselRate_RAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendCreditAccount"
  ): TypedContractMethod<
    [borrowedAmount: BigNumberish, creditAccount: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayCreditAccount"
  ): TypedContractMethod<
    [borrowedAmount: BigNumberish, profit: BigNumberish, loss: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toDiesel"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBorrowed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "underlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "BorrowForbidden"
  ): TypedContractEvent<
    BorrowForbiddenEvent.InputTuple,
    BorrowForbiddenEvent.OutputTuple,
    BorrowForbiddenEvent.OutputObject
  >;
  getEvent(
    key: "NewCreditManagerConnected"
  ): TypedContractEvent<
    NewCreditManagerConnectedEvent.InputTuple,
    NewCreditManagerConnectedEvent.OutputTuple,
    NewCreditManagerConnectedEvent.OutputObject
  >;
  getEvent(
    key: "NewExpectedLiquidityLimit"
  ): TypedContractEvent<
    NewExpectedLiquidityLimitEvent.InputTuple,
    NewExpectedLiquidityLimitEvent.OutputTuple,
    NewExpectedLiquidityLimitEvent.OutputObject
  >;
  getEvent(
    key: "NewInterestRateModel"
  ): TypedContractEvent<
    NewInterestRateModelEvent.InputTuple,
    NewInterestRateModelEvent.OutputTuple,
    NewInterestRateModelEvent.OutputObject
  >;
  getEvent(
    key: "NewWithdrawFee"
  ): TypedContractEvent<
    NewWithdrawFeeEvent.InputTuple,
    NewWithdrawFeeEvent.OutputTuple,
    NewWithdrawFeeEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "UncoveredLoss"
  ): TypedContractEvent<
    UncoveredLossEvent.InputTuple,
    UncoveredLossEvent.OutputTuple,
    UncoveredLossEvent.OutputObject
  >;

  filters: {
    "AddLiquidity(address,address,uint256,uint256)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "Borrow(address,address,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "BorrowForbidden(address)": TypedContractEvent<
      BorrowForbiddenEvent.InputTuple,
      BorrowForbiddenEvent.OutputTuple,
      BorrowForbiddenEvent.OutputObject
    >;
    BorrowForbidden: TypedContractEvent<
      BorrowForbiddenEvent.InputTuple,
      BorrowForbiddenEvent.OutputTuple,
      BorrowForbiddenEvent.OutputObject
    >;

    "NewCreditManagerConnected(address)": TypedContractEvent<
      NewCreditManagerConnectedEvent.InputTuple,
      NewCreditManagerConnectedEvent.OutputTuple,
      NewCreditManagerConnectedEvent.OutputObject
    >;
    NewCreditManagerConnected: TypedContractEvent<
      NewCreditManagerConnectedEvent.InputTuple,
      NewCreditManagerConnectedEvent.OutputTuple,
      NewCreditManagerConnectedEvent.OutputObject
    >;

    "NewExpectedLiquidityLimit(uint256)": TypedContractEvent<
      NewExpectedLiquidityLimitEvent.InputTuple,
      NewExpectedLiquidityLimitEvent.OutputTuple,
      NewExpectedLiquidityLimitEvent.OutputObject
    >;
    NewExpectedLiquidityLimit: TypedContractEvent<
      NewExpectedLiquidityLimitEvent.InputTuple,
      NewExpectedLiquidityLimitEvent.OutputTuple,
      NewExpectedLiquidityLimitEvent.OutputObject
    >;

    "NewInterestRateModel(address)": TypedContractEvent<
      NewInterestRateModelEvent.InputTuple,
      NewInterestRateModelEvent.OutputTuple,
      NewInterestRateModelEvent.OutputObject
    >;
    NewInterestRateModel: TypedContractEvent<
      NewInterestRateModelEvent.InputTuple,
      NewInterestRateModelEvent.OutputTuple,
      NewInterestRateModelEvent.OutputObject
    >;

    "NewWithdrawFee(uint256)": TypedContractEvent<
      NewWithdrawFeeEvent.InputTuple,
      NewWithdrawFeeEvent.OutputTuple,
      NewWithdrawFeeEvent.OutputObject
    >;
    NewWithdrawFee: TypedContractEvent<
      NewWithdrawFeeEvent.InputTuple,
      NewWithdrawFeeEvent.OutputTuple,
      NewWithdrawFeeEvent.OutputObject
    >;

    "RemoveLiquidity(address,address,uint256)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "Repay(address,uint256,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "UncoveredLoss(address,uint256)": TypedContractEvent<
      UncoveredLossEvent.InputTuple,
      UncoveredLossEvent.OutputTuple,
      UncoveredLossEvent.OutputObject
    >;
    UncoveredLoss: TypedContractEvent<
      UncoveredLossEvent.InputTuple,
      UncoveredLossEvent.OutputTuple,
      UncoveredLossEvent.OutputObject
    >;
  };
}
