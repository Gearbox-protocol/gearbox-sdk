/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PathFinderInterface extends ethers.utils.Interface {
  functions: {
    "bestUniPath(uint256,address,uint256,address,address,uint256,address[])": FunctionFragment;
    "convertPathToPathV3(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bestUniPath",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPathToPathV3",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bestUniPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPathToPathV3",
    data: BytesLike
  ): Result;

  events: {};
}

export class PathFinder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PathFinderInterface;

  functions: {
    bestUniPath(
      swapInterface: BigNumberish,
      router: string,
      swapType: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertPathToPathV3(
      path: string[],
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;
  };

  bestUniPath(
    swapInterface: BigNumberish,
    router: string,
    swapType: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertPathToPathV3(
    path: string[],
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bestUniPath(
      swapInterface: BigNumberish,
      router: string,
      swapType: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber, BigNumber] & {
        path: string[];
        rate: BigNumber;
        expectedAmount: BigNumber;
      }
    >;

    convertPathToPathV3(
      path: string[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bestUniPath(
      swapInterface: BigNumberish,
      router: string,
      swapType: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertPathToPathV3(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bestUniPath(
      swapInterface: BigNumberish,
      router: string,
      swapType: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertPathToPathV3(
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
