/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WETHGatewayInterface extends ethers.utils.Interface {
  functions: {
    "addCollateralETH(address,address)": FunctionFragment;
    "addLiquidityETH(address,address,uint16)": FunctionFragment;
    "openCreditAccountETH(address,address,uint256,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,address)": FunctionFragment;
    "repayCreditAccountETH(address,address)": FunctionFragment;
    "unwrapWETH(address,uint256)": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateralETH",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccountETH",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccountETH",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateralETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccountETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccountETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrapWETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class WETHGateway extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WETHGatewayInterface;

  functions: {
    addCollateralETH(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addCollateralETH(address,address)"(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETH(address,address,uint16)"(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    openCreditAccountETH(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "openCreditAccountETH(address,address,uint256,uint256)"(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityETH(address,uint256,address)"(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayCreditAccountETH(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "repayCreditAccountETH(address,address)"(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    unwrapWETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unwrapWETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addCollateralETH(
    creditManager: string,
    onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addCollateralETH(address,address)"(
    creditManager: string,
    onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    pool: string,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETH(address,address,uint16)"(
    pool: string,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  openCreditAccountETH(
    creditManager: string,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "openCreditAccountETH(address,address,uint256,uint256)"(
    creditManager: string,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    pool: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityETH(address,uint256,address)"(
    pool: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayCreditAccountETH(
    creditManager: string,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "repayCreditAccountETH(address,address)"(
    creditManager: string,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  unwrapWETH(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unwrapWETH(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addCollateralETH(
      creditManager: string,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateralETH(address,address)"(
      creditManager: string,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityETH(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityETH(address,address,uint16)"(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openCreditAccountETH(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "openCreditAccountETH(address,address,uint256,uint256)"(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityETH(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidityETH(address,uint256,address)"(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccountETH(
      creditManager: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "repayCreditAccountETH(address,address)"(
      creditManager: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWETH(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unwrapWETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addCollateralETH(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addCollateralETH(address,address)"(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidityETH(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETH(address,address,uint16)"(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    openCreditAccountETH(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "openCreditAccountETH(address,address,uint256,uint256)"(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    removeLiquidityETH(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityETH(address,uint256,address)"(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayCreditAccountETH(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "repayCreditAccountETH(address,address)"(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    unwrapWETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unwrapWETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralETH(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addCollateralETH(address,address)"(
      creditManager: string,
      onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETH(address,address,uint16)"(
      pool: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    openCreditAccountETH(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "openCreditAccountETH(address,address,uint256,uint256)"(
      creditManager: string,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityETH(address,uint256,address)"(
      pool: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayCreditAccountETH(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "repayCreditAccountETH(address,address)"(
      creditManager: string,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    unwrapWETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unwrapWETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
