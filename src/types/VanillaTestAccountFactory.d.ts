/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VanillaTestAccountFactoryInterface extends ethers.utils.Interface {
  functions: {
    "accountMiner()": FunctionFragment;
    "connectMiner()": FunctionFragment;
    "countCreditAccounts()": FunctionFragment;
    "countCreditAccountsInStock()": FunctionFragment;
    "creditAccounts(uint256)": FunctionFragment;
    "getNext(address)": FunctionFragment;
    "head()": FunctionFragment;
    "returnCreditAccount(address)": FunctionFragment;
    "tail()": FunctionFragment;
    "takeCreditAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countCreditAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countCreditAccountsInStock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNext", values: [string]): string;
  encodeFunctionData(functionFragment: "head", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnCreditAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeCreditAccount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countCreditAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countCreditAccountsInStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "head", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeCreditAccount",
    data: BytesLike
  ): Result;

  events: {
    "AccountMinerChanged(address)": EventFragment;
    "InitializeCreditAccount(address,address)": EventFragment;
    "NewCreditAccount(address)": EventFragment;
    "ReturnCreditAccount(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountMinerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnCreditAccount"): EventFragment;
}

export class VanillaTestAccountFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VanillaTestAccountFactoryInterface;

  functions: {
    accountMiner(overrides?: CallOverrides): Promise<[string]>;

    "accountMiner()"(overrides?: CallOverrides): Promise<[string]>;

    connectMiner(overrides?: Overrides): Promise<ContractTransaction>;

    "connectMiner()"(overrides?: Overrides): Promise<ContractTransaction>;

    countCreditAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    "countCreditAccounts()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    countCreditAccountsInStock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "countCreditAccountsInStock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditAccounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditAccounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNext(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getNext(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    head(overrides?: CallOverrides): Promise<[string]>;

    "head()"(overrides?: CallOverrides): Promise<[string]>;

    returnCreditAccount(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "returnCreditAccount(address)"(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tail(overrides?: CallOverrides): Promise<[string]>;

    "tail()"(overrides?: CallOverrides): Promise<[string]>;

    takeCreditAccount(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "takeCreditAccount(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountMiner(overrides?: CallOverrides): Promise<string>;

  "accountMiner()"(overrides?: CallOverrides): Promise<string>;

  connectMiner(overrides?: Overrides): Promise<ContractTransaction>;

  "connectMiner()"(overrides?: Overrides): Promise<ContractTransaction>;

  countCreditAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  "countCreditAccounts()"(overrides?: CallOverrides): Promise<BigNumber>;

  countCreditAccountsInStock(overrides?: CallOverrides): Promise<BigNumber>;

  "countCreditAccountsInStock()"(overrides?: CallOverrides): Promise<BigNumber>;

  creditAccounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditAccounts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNext(creditAccount: string, overrides?: CallOverrides): Promise<string>;

  "getNext(address)"(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<string>;

  head(overrides?: CallOverrides): Promise<string>;

  "head()"(overrides?: CallOverrides): Promise<string>;

  returnCreditAccount(
    usedAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "returnCreditAccount(address)"(
    usedAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tail(overrides?: CallOverrides): Promise<string>;

  "tail()"(overrides?: CallOverrides): Promise<string>;

  takeCreditAccount(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "takeCreditAccount(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountMiner(overrides?: CallOverrides): Promise<string>;

    "accountMiner()"(overrides?: CallOverrides): Promise<string>;

    connectMiner(overrides?: CallOverrides): Promise<void>;

    "connectMiner()"(overrides?: CallOverrides): Promise<void>;

    countCreditAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    "countCreditAccounts()"(overrides?: CallOverrides): Promise<BigNumber>;

    countCreditAccountsInStock(overrides?: CallOverrides): Promise<BigNumber>;

    "countCreditAccountsInStock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditAccounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditAccounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNext(creditAccount: string, overrides?: CallOverrides): Promise<string>;

    "getNext(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<string>;

    head(overrides?: CallOverrides): Promise<string>;

    "head()"(overrides?: CallOverrides): Promise<string>;

    returnCreditAccount(
      usedAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "returnCreditAccount(address)"(
      usedAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tail(overrides?: CallOverrides): Promise<string>;

    "tail()"(overrides?: CallOverrides): Promise<string>;

    takeCreditAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "takeCreditAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    AccountMinerChanged(miner: null): EventFilter;

    InitializeCreditAccount(
      account: string | null,
      creditManager: string | null
    ): EventFilter;

    NewCreditAccount(account: string | null): EventFilter;

    ReturnCreditAccount(account: string | null): EventFilter;
  };

  estimateGas: {
    accountMiner(overrides?: CallOverrides): Promise<BigNumber>;

    "accountMiner()"(overrides?: CallOverrides): Promise<BigNumber>;

    connectMiner(overrides?: Overrides): Promise<BigNumber>;

    "connectMiner()"(overrides?: Overrides): Promise<BigNumber>;

    countCreditAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    "countCreditAccounts()"(overrides?: CallOverrides): Promise<BigNumber>;

    countCreditAccountsInStock(overrides?: CallOverrides): Promise<BigNumber>;

    "countCreditAccountsInStock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditAccounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditAccounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNext(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNext(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    "head()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnCreditAccount(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "returnCreditAccount(address)"(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    "tail()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeCreditAccount(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "takeCreditAccount(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountMiner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountMiner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectMiner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "connectMiner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    countCreditAccounts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countCreditAccounts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countCreditAccountsInStock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countCreditAccountsInStock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditAccounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditAccounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNext(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNext(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "head()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnCreditAccount(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "returnCreditAccount(address)"(
      usedAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tail()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeCreditAccount(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "takeCreditAccount(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
