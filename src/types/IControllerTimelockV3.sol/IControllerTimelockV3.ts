/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IControllerTimelockV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "GRACE_PERIOD"
      | "cancelTransaction"
      | "executeTransaction"
      | "forbidAdapter"
      | "forbidBoundsUpdate"
      | "queuedTransactions"
      | "rampLiquidationThreshold"
      | "setCreditManagerDebtLimit"
      | "setExpirationDate"
      | "setLPPriceFeedLimiter"
      | "setMaxDebtLimit"
      | "setMaxDebtPerBlockMultiplier"
      | "setMaxQuotaRate"
      | "setMinDebtLimit"
      | "setMinQuotaRate"
      | "setReservePriceFeedStatus"
      | "setTokenLimit"
      | "setTokenQuotaIncreaseFee"
      | "setTotalDebtLimit"
      | "setVetoAdmin"
      | "setWithdrawFee"
      | "version"
      | "vetoAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelTransaction"
      | "ExecuteTransaction"
      | "QueueTransaction"
      | "SetVetoAdmin"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidAdapter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidBoundsUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rampLiquidationThreshold",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerDebtLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPPriceFeedLimiter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuotaRate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDebtLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinQuotaRate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeedStatus",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLimit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenQuotaIncreaseFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVetoAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "vetoAdmin", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidBoundsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rampLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPPriceFeedLimiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenQuotaIncreaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVetoAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoAdmin", data: BytesLike): Result;
}

export namespace CancelTransactionEvent {
  export type InputTuple = [txHash: BytesLike];
  export type OutputTuple = [txHash: string];
  export interface OutputObject {
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteTransactionEvent {
  export type InputTuple = [txHash: BytesLike];
  export type OutputTuple = [txHash: string];
  export interface OutputObject {
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueueTransactionEvent {
  export type InputTuple = [
    txHash: BytesLike,
    executor: AddressLike,
    target: AddressLike,
    signature: string,
    data: BytesLike,
    eta: BigNumberish
  ];
  export type OutputTuple = [
    txHash: string,
    executor: string,
    target: string,
    signature: string,
    data: string,
    eta: bigint
  ];
  export interface OutputObject {
    txHash: string;
    executor: string;
    target: string;
    signature: string;
    data: string;
    eta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetVetoAdminEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IControllerTimelockV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IControllerTimelockV3;
  waitForDeployment(): Promise<this>;

  interface: IControllerTimelockV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  cancelTransaction: TypedContractMethod<
    [txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  executeTransaction: TypedContractMethod<
    [txHash: BytesLike],
    [void],
    "nonpayable"
  >;

  forbidAdapter: TypedContractMethod<
    [creditManager: AddressLike, adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  forbidBoundsUpdate: TypedContractMethod<
    [priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  queuedTransactions: TypedContractMethod<
    [txHash: BytesLike],
    [
      [boolean, string, string, bigint, string, string, bigint, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: bigint;
        signature: string;
        data: string;
        sanityCheckValue: bigint;
        sanityCheckCallData: string;
      }
    ],
    "view"
  >;

  rampLiquidationThreshold: TypedContractMethod<
    [
      creditManager: AddressLike,
      token: AddressLike,
      liquidationThresholdFinal: BigNumberish,
      rampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCreditManagerDebtLimit: TypedContractMethod<
    [creditManager: AddressLike, debtLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExpirationDate: TypedContractMethod<
    [creditManager: AddressLike, expirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLPPriceFeedLimiter: TypedContractMethod<
    [priceFeed: AddressLike, lowerBound: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDebtLimit: TypedContractMethod<
    [creditManager: AddressLike, maxDebt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDebtPerBlockMultiplier: TypedContractMethod<
    [creditManager: AddressLike, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxQuotaRate: TypedContractMethod<
    [pool: AddressLike, token: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDebtLimit: TypedContractMethod<
    [creditManager: AddressLike, minDebt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinQuotaRate: TypedContractMethod<
    [pool: AddressLike, token: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReservePriceFeedStatus: TypedContractMethod<
    [priceOracle: AddressLike, token: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  setTokenLimit: TypedContractMethod<
    [pool: AddressLike, token: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenQuotaIncreaseFee: TypedContractMethod<
    [pool: AddressLike, token: AddressLike, quotaIncreaseFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalDebtLimit: TypedContractMethod<
    [pool: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVetoAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawFee: TypedContractMethod<
    [pool: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  vetoAdmin: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTransaction"
  ): TypedContractMethod<[txHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[txHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forbidAdapter"
  ): TypedContractMethod<
    [creditManager: AddressLike, adapter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forbidBoundsUpdate"
  ): TypedContractMethod<[priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "queuedTransactions"
  ): TypedContractMethod<
    [txHash: BytesLike],
    [
      [boolean, string, string, bigint, string, string, bigint, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: bigint;
        signature: string;
        data: string;
        sanityCheckValue: bigint;
        sanityCheckCallData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rampLiquidationThreshold"
  ): TypedContractMethod<
    [
      creditManager: AddressLike,
      token: AddressLike,
      liquidationThresholdFinal: BigNumberish,
      rampStart: BigNumberish,
      rampDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreditManagerDebtLimit"
  ): TypedContractMethod<
    [creditManager: AddressLike, debtLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpirationDate"
  ): TypedContractMethod<
    [creditManager: AddressLike, expirationDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLPPriceFeedLimiter"
  ): TypedContractMethod<
    [priceFeed: AddressLike, lowerBound: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDebtLimit"
  ): TypedContractMethod<
    [creditManager: AddressLike, maxDebt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDebtPerBlockMultiplier"
  ): TypedContractMethod<
    [creditManager: AddressLike, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxQuotaRate"
  ): TypedContractMethod<
    [pool: AddressLike, token: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDebtLimit"
  ): TypedContractMethod<
    [creditManager: AddressLike, minDebt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinQuotaRate"
  ): TypedContractMethod<
    [pool: AddressLike, token: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservePriceFeedStatus"
  ): TypedContractMethod<
    [priceOracle: AddressLike, token: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenLimit"
  ): TypedContractMethod<
    [pool: AddressLike, token: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenQuotaIncreaseFee"
  ): TypedContractMethod<
    [pool: AddressLike, token: AddressLike, quotaIncreaseFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTotalDebtLimit"
  ): TypedContractMethod<
    [pool: AddressLike, newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVetoAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawFee"
  ): TypedContractMethod<
    [pool: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vetoAdmin"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CancelTransaction"
  ): TypedContractEvent<
    CancelTransactionEvent.InputTuple,
    CancelTransactionEvent.OutputTuple,
    CancelTransactionEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteTransaction"
  ): TypedContractEvent<
    ExecuteTransactionEvent.InputTuple,
    ExecuteTransactionEvent.OutputTuple,
    ExecuteTransactionEvent.OutputObject
  >;
  getEvent(
    key: "QueueTransaction"
  ): TypedContractEvent<
    QueueTransactionEvent.InputTuple,
    QueueTransactionEvent.OutputTuple,
    QueueTransactionEvent.OutputObject
  >;
  getEvent(
    key: "SetVetoAdmin"
  ): TypedContractEvent<
    SetVetoAdminEvent.InputTuple,
    SetVetoAdminEvent.OutputTuple,
    SetVetoAdminEvent.OutputObject
  >;

  filters: {
    "CancelTransaction(bytes32)": TypedContractEvent<
      CancelTransactionEvent.InputTuple,
      CancelTransactionEvent.OutputTuple,
      CancelTransactionEvent.OutputObject
    >;
    CancelTransaction: TypedContractEvent<
      CancelTransactionEvent.InputTuple,
      CancelTransactionEvent.OutputTuple,
      CancelTransactionEvent.OutputObject
    >;

    "ExecuteTransaction(bytes32)": TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;
    ExecuteTransaction: TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;

    "QueueTransaction(bytes32,address,address,string,bytes,uint40)": TypedContractEvent<
      QueueTransactionEvent.InputTuple,
      QueueTransactionEvent.OutputTuple,
      QueueTransactionEvent.OutputObject
    >;
    QueueTransaction: TypedContractEvent<
      QueueTransactionEvent.InputTuple,
      QueueTransactionEvent.OutputTuple,
      QueueTransactionEvent.OutputObject
    >;

    "SetVetoAdmin(address)": TypedContractEvent<
      SetVetoAdminEvent.InputTuple,
      SetVetoAdminEvent.OutputTuple,
      SetVetoAdminEvent.OutputObject
    >;
    SetVetoAdmin: TypedContractEvent<
      SetVetoAdminEvent.InputTuple,
      SetVetoAdminEvent.OutputTuple,
      SetVetoAdminEvent.OutputObject
    >;
  };
}
