/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GearMathTestInterface extends ethers.utils.Interface {
  functions: {
    "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)": FunctionFragment;
    "calcCreditAccountAccruedInterest(uint256,uint256,uint256)": FunctionFragment;
    "calcInterestAccrued(uint256,uint256,uint256)": FunctionFragment;
    "calcLinearIndex_RAY(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcBorrowAmountPlusFee",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountAccruedInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInterestAccrued",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLinearIndex_RAY",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcBorrowAmountPlusFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountAccruedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLinearIndex_RAY",
    data: BytesLike
  ): Result;

  events: {};
}

export class GearMathTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GearMathTestInterface;

  functions: {
    calcBorrowAmountPlusFee(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)"(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCreditAccountAccruedInterest(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcCreditAccountAccruedInterest(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcInterestAccrued(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcInterestAccrued(uint256,uint256,uint256)"(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcLinearIndex_RAY(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcLinearIndex_RAY(uint256,uint256,uint256)"(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcBorrowAmountPlusFee(
    totalFunds: BigNumberish,
    borrowedAmount: BigNumberish,
    borrowedAmountWithInterest: BigNumberish,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)"(
    totalFunds: BigNumberish,
    borrowedAmount: BigNumberish,
    borrowedAmountWithInterest: BigNumberish,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCreditAccountAccruedInterest(
    borrowedAmount: BigNumberish,
    currentCumulativeIndex_RAY: BigNumberish,
    cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcCreditAccountAccruedInterest(uint256,uint256,uint256)"(
    borrowedAmount: BigNumberish,
    currentCumulativeIndex_RAY: BigNumberish,
    cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcInterestAccrued(
    totalBorrow: BigNumberish,
    currentBorrowRate_RAY: BigNumberish,
    timeDifference: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcInterestAccrued(uint256,uint256,uint256)"(
    totalBorrow: BigNumberish,
    currentBorrowRate_RAY: BigNumberish,
    timeDifference: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcLinearIndex_RAY(
    cumulativeIndex_RAY: BigNumberish,
    currentBorrowRate_RAY: BigNumberish,
    timeDifference: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcLinearIndex_RAY(uint256,uint256,uint256)"(
    cumulativeIndex_RAY: BigNumberish,
    currentBorrowRate_RAY: BigNumberish,
    timeDifference: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcBorrowAmountPlusFee(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)"(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountAccruedInterest(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInterestAccrued(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcInterestAccrued(uint256,uint256,uint256)"(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLinearIndex_RAY(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLinearIndex_RAY(uint256,uint256,uint256)"(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcBorrowAmountPlusFee(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)"(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCreditAccountAccruedInterest(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInterestAccrued(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcInterestAccrued(uint256,uint256,uint256)"(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLinearIndex_RAY(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcLinearIndex_RAY(uint256,uint256,uint256)"(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcBorrowAmountPlusFee(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBorrowAmountPlusFee(uint256,uint256,uint256,bool)"(
      totalFunds: BigNumberish,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCreditAccountAccruedInterest(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCreditAccountAccruedInterest(uint256,uint256,uint256)"(
      borrowedAmount: BigNumberish,
      currentCumulativeIndex_RAY: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcInterestAccrued(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcInterestAccrued(uint256,uint256,uint256)"(
      totalBorrow: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLinearIndex_RAY(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcLinearIndex_RAY(uint256,uint256,uint256)"(
      cumulativeIndex_RAY: BigNumberish,
      currentBorrowRate_RAY: BigNumberish,
      timeDifference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
