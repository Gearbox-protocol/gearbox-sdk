/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RevocationPairStruct = {
  spender: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
};

export type RevocationPairStructOutput = [string, string] & {
  spender: string;
  token: string;
};

export type BalanceDeltaStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type BalanceDeltaStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export interface ICreditFacadeV3MulticallInterface extends utils.Interface {
  functions: {
    "addCollateral(address,uint256)": FunctionFragment;
    "addCollateralWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "compareBalances()": FunctionFragment;
    "decreaseDebt(uint256)": FunctionFragment;
    "disableToken(address)": FunctionFragment;
    "enableToken(address)": FunctionFragment;
    "increaseDebt(uint256)": FunctionFragment;
    "onDemandPriceUpdate(address,bool,bytes)": FunctionFragment;
    "revokeAdapterAllowances((address,address)[])": FunctionFragment;
    "setFullCheckParams(uint256[],uint16)": FunctionFragment;
    "storeExpectedBalances((address,int256)[])": FunctionFragment;
    "updateQuota(address,int96,uint96)": FunctionFragment;
    "withdrawCollateral(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "addCollateralWithPermit"
      | "compareBalances"
      | "decreaseDebt"
      | "disableToken"
      | "enableToken"
      | "increaseDebt"
      | "onDemandPriceUpdate"
      | "revokeAdapterAllowances"
      | "setFullCheckParams"
      | "storeExpectedBalances"
      | "updateQuota"
      | "withdrawCollateral",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "compareBalances",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "enableToken",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "onDemandPriceUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdapterAllowances",
    values: [RevocationPairStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: "setFullCheckParams",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "storeExpectedBalances",
    values: [BalanceDeltaStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuota",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralWithPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareBalances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "onDemandPriceUpdate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdapterAllowances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFullCheckParams",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeExpectedBalances",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuota",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ICreditFacadeV3Multicall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreditFacadeV3MulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addCollateralWithPermit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    compareBalances(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onDemandPriceUpdate(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeAdapterAllowances(
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFullCheckParams(
      collateralHints: PromiseOrValue<BigNumberish>[],
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    storeExpectedBalances(
      balanceDeltas: BalanceDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateQuota(
      token: PromiseOrValue<string>,
      quotaChange: PromiseOrValue<BigNumberish>,
      minQuota: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addCollateralWithPermit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  compareBalances(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseDebt(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enableToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseDebt(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onDemandPriceUpdate(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeAdapterAllowances(
    revocations: RevocationPairStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFullCheckParams(
    collateralHints: PromiseOrValue<BigNumberish>[],
    minHealthFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  storeExpectedBalances(
    balanceDeltas: BalanceDeltaStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateQuota(
    token: PromiseOrValue<string>,
    quotaChange: PromiseOrValue<BigNumberish>,
    minQuota: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addCollateralWithPermit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    compareBalances(overrides?: CallOverrides): Promise<void>;

    decreaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    disableToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enableToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    increaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    onDemandPriceUpdate(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeAdapterAllowances(
      revocations: RevocationPairStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setFullCheckParams(
      collateralHints: PromiseOrValue<BigNumberish>[],
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    storeExpectedBalances(
      balanceDeltas: BalanceDeltaStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateQuota(
      token: PromiseOrValue<string>,
      quotaChange: PromiseOrValue<BigNumberish>,
      minQuota: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addCollateralWithPermit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    compareBalances(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onDemandPriceUpdate(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeAdapterAllowances(
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFullCheckParams(
      collateralHints: PromiseOrValue<BigNumberish>[],
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    storeExpectedBalances(
      balanceDeltas: BalanceDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateQuota(
      token: PromiseOrValue<string>,
      quotaChange: PromiseOrValue<BigNumberish>,
      minQuota: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addCollateralWithPermit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    compareBalances(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enableToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onDemandPriceUpdate(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeAdapterAllowances(
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFullCheckParams(
      collateralHints: PromiseOrValue<BigNumberish>[],
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    storeExpectedBalances(
      balanceDeltas: BalanceDeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateQuota(
      token: PromiseOrValue<string>,
      quotaChange: PromiseOrValue<BigNumberish>,
      minQuota: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
