/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICurveV1AdapterInterface extends utils.Interface {
  functions: {
    "_gearboxAdapterType()": FunctionFragment;
    "_gearboxAdapterVersion()": FunctionFragment;
    "add_all_liquidity_one_coin(uint256,uint256)": FunctionFragment;
    "add_liquidity_one_coin(uint256,uint256,uint256)": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "calc_add_one_coin(uint256,uint256)": FunctionFragment;
    "creditManager()": FunctionFragment;
    "exchange(int128,int128,uint256,uint256)": FunctionFragment;
    "exchange(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exchange_all(uint256,uint256,uint256)": FunctionFragment;
    "exchange_all(int128,int128,uint256)": FunctionFragment;
    "exchange_all_underlying(int128,int128,uint256)": FunctionFragment;
    "exchange_all_underlying(uint256,uint256,uint256)": FunctionFragment;
    "exchange_underlying(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exchange_underlying(int128,int128,uint256,uint256)": FunctionFragment;
    "lpTokenMask()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "metapoolBase()": FunctionFragment;
    "nCoins()": FunctionFragment;
    "remove_all_liquidity_one_coin(int128,uint256)": FunctionFragment;
    "remove_all_liquidity_one_coin(uint256,uint256)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,uint256,uint256)": FunctionFragment;
    "targetContract()": FunctionFragment;
    "token()": FunctionFragment;
    "token0()": FunctionFragment;
    "token0Mask()": FunctionFragment;
    "token1()": FunctionFragment;
    "token1Mask()": FunctionFragment;
    "token2()": FunctionFragment;
    "token2Mask()": FunctionFragment;
    "token3()": FunctionFragment;
    "token3Mask()": FunctionFragment;
    "underlying0()": FunctionFragment;
    "underlying0Mask()": FunctionFragment;
    "underlying1()": FunctionFragment;
    "underlying1Mask()": FunctionFragment;
    "underlying2()": FunctionFragment;
    "underlying2Mask()": FunctionFragment;
    "underlying3()": FunctionFragment;
    "underlying3Mask()": FunctionFragment;
    "use256()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "add_all_liquidity_one_coin"
      | "add_liquidity_one_coin"
      | "addressProvider"
      | "calc_add_one_coin"
      | "creditManager"
      | "exchange(int128,int128,uint256,uint256)"
      | "exchange(uint256,uint256,uint256,uint256)"
      | "exchange_all(uint256,uint256,uint256)"
      | "exchange_all(int128,int128,uint256)"
      | "exchange_all_underlying(int128,int128,uint256)"
      | "exchange_all_underlying(uint256,uint256,uint256)"
      | "exchange_underlying(uint256,uint256,uint256,uint256)"
      | "exchange_underlying(int128,int128,uint256,uint256)"
      | "lpTokenMask"
      | "lp_token"
      | "metapoolBase"
      | "nCoins"
      | "remove_all_liquidity_one_coin(int128,uint256)"
      | "remove_all_liquidity_one_coin(uint256,uint256)"
      | "remove_liquidity_one_coin(uint256,int128,uint256)"
      | "remove_liquidity_one_coin(uint256,uint256,uint256)"
      | "targetContract"
      | "token"
      | "token0"
      | "token0Mask"
      | "token1"
      | "token1Mask"
      | "token2"
      | "token2Mask"
      | "token3"
      | "token3Mask"
      | "underlying0"
      | "underlying0Mask"
      | "underlying1"
      | "underlying1Mask"
      | "underlying2"
      | "underlying2Mask"
      | "underlying3"
      | "underlying3Mask"
      | "use256"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add_all_liquidity_one_coin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity_one_coin",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calc_add_one_coin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_all(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_all(int128,int128,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_all_underlying(int128,int128,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_all_underlying(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_underlying(int128,int128,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metapoolBase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nCoins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove_all_liquidity_one_coin(int128,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_all_liquidity_one_coin(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token0Mask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token1Mask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token2Mask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token3Mask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying0Mask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying1Mask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying2Mask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying3Mask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "use256", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_all_liquidity_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_add_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_all(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_all(int128,int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_all_underlying(int128,int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_all_underlying(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_underlying(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_underlying(int128,int128,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metapoolBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nCoins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_all_liquidity_one_coin(int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_all_liquidity_one_coin(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0Mask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1Mask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2Mask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token3Mask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlying0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying0Mask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying1Mask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying2Mask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying3Mask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "use256", data: BytesLike): Result;

  events: {};
}

export interface ICurveV1Adapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveV1AdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<[number]>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<[number]>;

    add_all_liquidity_one_coin(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_liquidity_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    calc_add_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_all(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_all(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_all_underlying(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_all_underlying(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_underlying(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lpTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    lp_token(overrides?: CallOverrides): Promise<[string]>;

    metapoolBase(overrides?: CallOverrides): Promise<[string]>;

    nCoins(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remove_all_liquidity_one_coin(int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_all_liquidity_one_coin(uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetContract(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token0Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    token1Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    token2(overrides?: CallOverrides): Promise<[string]>;

    token2Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    token3(overrides?: CallOverrides): Promise<[string]>;

    token3Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying0(overrides?: CallOverrides): Promise<[string]>;

    underlying0Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying1(overrides?: CallOverrides): Promise<[string]>;

    underlying1Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying2(overrides?: CallOverrides): Promise<[string]>;

    underlying2Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying3(overrides?: CallOverrides): Promise<[string]>;

    underlying3Mask(overrides?: CallOverrides): Promise<[BigNumber]>;

    use256(overrides?: CallOverrides): Promise<[boolean]>;
  };

  _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

  _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

  add_all_liquidity_one_coin(
    i: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_liquidity_one_coin(
    amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  calc_add_one_coin(
    amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  "exchange(int128,int128,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange(uint256,uint256,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_all(uint256,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_all(int128,int128,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_all_underlying(int128,int128,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_all_underlying(uint256,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_underlying(uint256,uint256,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exchange_underlying(int128,int128,uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lpTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  metapoolBase(overrides?: CallOverrides): Promise<string>;

  nCoins(overrides?: CallOverrides): Promise<BigNumber>;

  "remove_all_liquidity_one_coin(int128,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_all_liquidity_one_coin(uint256,uint256)"(
    i: PromiseOrValue<BigNumberish>,
    rateMinRAY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,uint256,uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetContract(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  token0(overrides?: CallOverrides): Promise<string>;

  token0Mask(overrides?: CallOverrides): Promise<BigNumber>;

  token1(overrides?: CallOverrides): Promise<string>;

  token1Mask(overrides?: CallOverrides): Promise<BigNumber>;

  token2(overrides?: CallOverrides): Promise<string>;

  token2Mask(overrides?: CallOverrides): Promise<BigNumber>;

  token3(overrides?: CallOverrides): Promise<string>;

  token3Mask(overrides?: CallOverrides): Promise<BigNumber>;

  underlying0(overrides?: CallOverrides): Promise<string>;

  underlying0Mask(overrides?: CallOverrides): Promise<BigNumber>;

  underlying1(overrides?: CallOverrides): Promise<string>;

  underlying1Mask(overrides?: CallOverrides): Promise<BigNumber>;

  underlying2(overrides?: CallOverrides): Promise<string>;

  underlying2Mask(overrides?: CallOverrides): Promise<BigNumber>;

  underlying3(overrides?: CallOverrides): Promise<string>;

  underlying3Mask(overrides?: CallOverrides): Promise<BigNumber>;

  use256(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

    add_all_liquidity_one_coin(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    add_liquidity_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    calc_add_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_all(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_all(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_all_underlying(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_all_underlying(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_underlying(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    lpTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    metapoolBase(overrides?: CallOverrides): Promise<string>;

    nCoins(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_all_liquidity_one_coin(int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "remove_all_liquidity_one_coin(uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    "remove_liquidity_one_coin(uint256,uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    targetContract(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    token0(overrides?: CallOverrides): Promise<string>;

    token0Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<string>;

    token1Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<string>;

    token2Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token3(overrides?: CallOverrides): Promise<string>;

    token3Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying0(overrides?: CallOverrides): Promise<string>;

    underlying0Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying1(overrides?: CallOverrides): Promise<string>;

    underlying1Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying2(overrides?: CallOverrides): Promise<string>;

    underlying2Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying3(overrides?: CallOverrides): Promise<string>;

    underlying3Mask(overrides?: CallOverrides): Promise<BigNumber>;

    use256(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<BigNumber>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<BigNumber>;

    add_all_liquidity_one_coin(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_liquidity_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    calc_add_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_all(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_all(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_all_underlying(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_all_underlying(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_underlying(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lpTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    metapoolBase(overrides?: CallOverrides): Promise<BigNumber>;

    nCoins(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_all_liquidity_one_coin(int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_all_liquidity_one_coin(uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetContract(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token0Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    token1Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;

    token2Mask(overrides?: CallOverrides): Promise<BigNumber>;

    token3(overrides?: CallOverrides): Promise<BigNumber>;

    token3Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying0(overrides?: CallOverrides): Promise<BigNumber>;

    underlying0Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying1(overrides?: CallOverrides): Promise<BigNumber>;

    underlying1Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying2(overrides?: CallOverrides): Promise<BigNumber>;

    underlying2Mask(overrides?: CallOverrides): Promise<BigNumber>;

    underlying3(overrides?: CallOverrides): Promise<BigNumber>;

    underlying3Mask(overrides?: CallOverrides): Promise<BigNumber>;

    use256(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _gearboxAdapterType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _gearboxAdapterVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add_all_liquidity_one_coin(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_liquidity_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc_add_one_coin(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchange(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_all(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_all(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_all_underlying(int128,int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_all_underlying(uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_underlying(uint256,uint256,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exchange_underlying(int128,int128,uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lpTokenMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metapoolBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nCoins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "remove_all_liquidity_one_coin(int128,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_all_liquidity_one_coin(uint256,uint256)"(
      i: PromiseOrValue<BigNumberish>,
      rateMinRAY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token3Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying0Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying1Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying2Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying3Mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    use256(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
