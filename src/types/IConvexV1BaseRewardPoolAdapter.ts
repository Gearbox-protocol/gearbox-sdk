/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IConvexV1BaseRewardPoolAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "creditManager"
      | "curveLPTokenMask"
      | "curveLPtoken"
      | "extraReward1"
      | "extraReward2"
      | "extraReward3"
      | "extraReward4"
      | "getReward"
      | "rewardTokensMask"
      | "stake"
      | "stakeDiff"
      | "stakedPhantomToken"
      | "stakedTokenMask"
      | "stakingToken"
      | "stakingTokenMask"
      | "targetContract"
      | "withdraw"
      | "withdrawAndUnwrap"
      | "withdrawDiff"
      | "withdrawDiffAndUnwrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveLPTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveLPtoken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward4",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokensMask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeDiff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedPhantomToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndUnwrap",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDiff",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDiffAndUnwrap",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveLPTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveLPtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeDiff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedPhantomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndUnwrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDiffAndUnwrap",
    data: BytesLike
  ): Result;
}

export interface IConvexV1BaseRewardPoolAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IConvexV1BaseRewardPoolAdapter;
  waitForDeployment(): Promise<this>;

  interface: IConvexV1BaseRewardPoolAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _gearboxAdapterType: TypedContractMethod<[], [bigint], "view">;

  _gearboxAdapterVersion: TypedContractMethod<[], [bigint], "view">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  creditManager: TypedContractMethod<[], [string], "view">;

  curveLPTokenMask: TypedContractMethod<[], [bigint], "view">;

  curveLPtoken: TypedContractMethod<[], [string], "view">;

  extraReward1: TypedContractMethod<[], [string], "view">;

  extraReward2: TypedContractMethod<[], [string], "view">;

  extraReward3: TypedContractMethod<[], [string], "view">;

  extraReward4: TypedContractMethod<[], [string], "view">;

  getReward: TypedContractMethod<
    [],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  rewardTokensMask: TypedContractMethod<[], [bigint], "view">;

  stake: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  stakeDiff: TypedContractMethod<
    [leftoverAmount: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  stakedPhantomToken: TypedContractMethod<[], [string], "view">;

  stakedTokenMask: TypedContractMethod<[], [bigint], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  stakingTokenMask: TypedContractMethod<[], [bigint], "view">;

  targetContract: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [arg0: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  withdrawAndUnwrap: TypedContractMethod<
    [arg0: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  withdrawDiff: TypedContractMethod<
    [leftoverAmount: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  withdrawDiffAndUnwrap: TypedContractMethod<
    [leftoverAmount: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_gearboxAdapterType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_gearboxAdapterVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "curveLPTokenMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "curveLPtoken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extraReward1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extraReward2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extraReward3"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extraReward4"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardTokensMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeDiff"
  ): TypedContractMethod<
    [leftoverAmount: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakedPhantomToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakedTokenMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingTokenMask"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [arg0: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndUnwrap"
  ): TypedContractMethod<
    [arg0: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDiff"
  ): TypedContractMethod<
    [leftoverAmount: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDiffAndUnwrap"
  ): TypedContractMethod<
    [leftoverAmount: BigNumberish, claim: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  filters: {};
}
