/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IConvexV1BaseRewardPoolAdapterInterface
  extends utils.Interface {
  functions: {
    "_gearboxAdapterType()": FunctionFragment;
    "_gearboxAdapterVersion()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "creditManager()": FunctionFragment;
    "curveLPTokenMask()": FunctionFragment;
    "curveLPtoken()": FunctionFragment;
    "extraReward1()": FunctionFragment;
    "extraReward2()": FunctionFragment;
    "getReward()": FunctionFragment;
    "rewardTokensMask()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeDiff(uint256)": FunctionFragment;
    "stakedPhantomToken()": FunctionFragment;
    "stakedTokenMask()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "stakingTokenMask()": FunctionFragment;
    "targetContract()": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
    "withdrawAndUnwrap(uint256,bool)": FunctionFragment;
    "withdrawDiff(uint256,bool)": FunctionFragment;
    "withdrawDiffAndUnwrap(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "creditManager"
      | "curveLPTokenMask"
      | "curveLPtoken"
      | "extraReward1"
      | "extraReward2"
      | "getReward"
      | "rewardTokensMask"
      | "stake"
      | "stakeDiff"
      | "stakedPhantomToken"
      | "stakedTokenMask"
      | "stakingToken"
      | "stakingTokenMask"
      | "targetContract"
      | "withdraw"
      | "withdrawAndUnwrap"
      | "withdrawDiff"
      | "withdrawDiffAndUnwrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveLPTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveLPtoken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraReward2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokensMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeDiff",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedPhantomToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndUnwrap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDiff",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDiffAndUnwrap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveLPTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveLPtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeDiff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedPhantomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndUnwrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDiffAndUnwrap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IConvexV1BaseRewardPoolAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConvexV1BaseRewardPoolAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<[number]>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<[number]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    curveLPTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    curveLPtoken(overrides?: CallOverrides): Promise<[string]>;

    extraReward1(overrides?: CallOverrides): Promise<[string]>;

    extraReward2(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokensMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedPhantomToken(overrides?: CallOverrides): Promise<[string]>;

    stakedTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    stakingTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetContract(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndUnwrap(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDiffAndUnwrap(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

  _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  curveLPTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  curveLPtoken(overrides?: CallOverrides): Promise<string>;

  extraReward1(overrides?: CallOverrides): Promise<string>;

  extraReward2(overrides?: CallOverrides): Promise<string>;

  getReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeDiff(
    leftoverAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedPhantomToken(overrides?: CallOverrides): Promise<string>;

  stakedTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  stakingTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  targetContract(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg0: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndUnwrap(
    arg0: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDiff(
    leftoverAmount: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDiffAndUnwrap(
    leftoverAmount: PromiseOrValue<BigNumberish>,
    claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    curveLPTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    curveLPtoken(overrides?: CallOverrides): Promise<string>;

    extraReward1(overrides?: CallOverrides): Promise<string>;

    extraReward2(overrides?: CallOverrides): Promise<string>;

    getReward(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    rewardTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    stakeDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    stakedPhantomToken(overrides?: CallOverrides): Promise<string>;

    stakedTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    stakingTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    targetContract(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    withdrawAndUnwrap(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    withdrawDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    withdrawDiffAndUnwrap(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _gearboxAdapterType(overrides?: CallOverrides): Promise<BigNumber>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    curveLPTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    curveLPtoken(overrides?: CallOverrides): Promise<BigNumber>;

    extraReward1(overrides?: CallOverrides): Promise<BigNumber>;

    extraReward2(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedPhantomToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakedTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    targetContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndUnwrap(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDiffAndUnwrap(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _gearboxAdapterType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _gearboxAdapterVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveLPTokenMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveLPtoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraReward1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraReward2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokensMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedPhantomToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedTokenMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingTokenMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndUnwrap(
      arg0: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDiff(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDiffAndUnwrap(
      leftoverAmount: PromiseOrValue<BigNumberish>,
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
