/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ILinearInterestRateModelV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "availableToBorrow"
      | "calcBorrowRate"
      | "getModelParameters"
      | "isBorrowingMoreU2Forbidden"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableToBorrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowRate",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getModelParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowingMoreU2Forbidden",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "availableToBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModelParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowingMoreU2Forbidden",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface ILinearInterestRateModelV3 extends BaseContract {
  connect(runner?: ContractRunner | null): ILinearInterestRateModelV3;
  waitForDeployment(): Promise<this>;

  interface: ILinearInterestRateModelV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  availableToBorrow: TypedContractMethod<
    [expectedLiquidity: BigNumberish, availableLiquidity: BigNumberish],
    [bigint],
    "view"
  >;

  calcBorrowRate: TypedContractMethod<
    [
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      checkOptimalBorrowing: boolean
    ],
    [bigint],
    "view"
  >;

  getModelParameters: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        U_1: bigint;
        U_2: bigint;
        R_base: bigint;
        R_slope1: bigint;
        R_slope2: bigint;
        R_slope3: bigint;
      }
    ],
    "view"
  >;

  isBorrowingMoreU2Forbidden: TypedContractMethod<[], [boolean], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "availableToBorrow"
  ): TypedContractMethod<
    [expectedLiquidity: BigNumberish, availableLiquidity: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcBorrowRate"
  ): TypedContractMethod<
    [
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      checkOptimalBorrowing: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getModelParameters"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        U_1: bigint;
        U_2: bigint;
        R_base: bigint;
        R_slope1: bigint;
        R_slope2: bigint;
        R_slope3: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBorrowingMoreU2Forbidden"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
