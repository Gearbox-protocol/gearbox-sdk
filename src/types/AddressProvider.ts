/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AddressProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addresses"
      | "claimOwnership"
      | "getACL"
      | "getAccountFactory"
      | "getContractsRegister"
      | "getDataCompressor"
      | "getGearToken"
      | "getLeveragedActions"
      | "getPriceOracle"
      | "getTreasuryContract"
      | "getWETHGateway"
      | "getWethToken"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setACL"
      | "setAccountFactory"
      | "setContractsRegister"
      | "setDataCompressor"
      | "setGearToken"
      | "setLeveragedActions"
      | "setPriceOracle"
      | "setTreasuryContract"
      | "setWETHGateway"
      | "setWethToken"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddressSet" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataCompressor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGearToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeveragedActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWethToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setACL", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAccountFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractsRegister",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataCompressor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGearToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeveragedActions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWETHGateway",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWethToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataCompressor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeveragedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataCompressor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGearToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeveragedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWETHGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [service: BytesLike, newAddress: AddressLike];
  export type OutputTuple = [service: string, newAddress: string];
  export interface OutputObject {
    service: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AddressProvider extends BaseContract {
  connect(runner?: ContractRunner | null): AddressProvider;
  waitForDeployment(): Promise<this>;

  interface: AddressProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addresses: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  getACL: TypedContractMethod<[], [string], "view">;

  getAccountFactory: TypedContractMethod<[], [string], "view">;

  getContractsRegister: TypedContractMethod<[], [string], "view">;

  getDataCompressor: TypedContractMethod<[], [string], "view">;

  getGearToken: TypedContractMethod<[], [string], "view">;

  getLeveragedActions: TypedContractMethod<[], [string], "view">;

  getPriceOracle: TypedContractMethod<[], [string], "view">;

  getTreasuryContract: TypedContractMethod<[], [string], "view">;

  getWETHGateway: TypedContractMethod<[], [string], "view">;

  getWethToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setACL: TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  setAccountFactory: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setContractsRegister: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setDataCompressor: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setGearToken: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setLeveragedActions: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryContract: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setWETHGateway: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setWethToken: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getACL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractsRegister"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataCompressor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGearToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLeveragedActions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasuryContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWETHGateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWethToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setACL"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAccountFactory"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractsRegister"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataCompressor"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGearToken"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLeveragedActions"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryContract"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWETHGateway"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWethToken"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AddressSet(bytes32,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
