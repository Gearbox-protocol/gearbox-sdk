/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface IUniswapPathCheckerInterface extends utils.Interface {
  functions: {
    "isConnector(address)": FunctionFragment;
    "parseUniV2Path(address[])": FunctionFragment;
    "parseUniV3Path(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "isConnector" | "parseUniV2Path" | "parseUniV3Path"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "isConnector", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseUniV2Path",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUniV3Path",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUniV2Path",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUniV3Path",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUniswapPathChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapPathCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isConnector(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    parseUniV2Path(
      path: string[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        valid: boolean;
        tokenIn: string;
        tokenOut: string;
      }
    >;

    parseUniV3Path(
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        valid: boolean;
        tokenIn: string;
        tokenOut: string;
      }
    >;
  };

  isConnector(token: string, overrides?: CallOverrides): Promise<boolean>;

  parseUniV2Path(
    path: string[],
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      valid: boolean;
      tokenIn: string;
      tokenOut: string;
    }
  >;

  parseUniV3Path(
    path: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      valid: boolean;
      tokenIn: string;
      tokenOut: string;
    }
  >;

  callStatic: {
    isConnector(token: string, overrides?: CallOverrides): Promise<boolean>;

    parseUniV2Path(
      path: string[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        valid: boolean;
        tokenIn: string;
        tokenOut: string;
      }
    >;

    parseUniV3Path(
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        valid: boolean;
        tokenIn: string;
        tokenOut: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    isConnector(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    parseUniV2Path(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUniV3Path(
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isConnector(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUniV2Path(
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUniV3Path(
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
