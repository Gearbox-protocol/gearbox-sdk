/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface IAirdropDistributorEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Claimed(address,uint256)": EventFragment;
    "RootUpdated(bytes32,bytes32)": EventFragment;
    "TokenAllocated(address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllocated"): EventFragment;
}

export interface ClaimedEventObject {
  account: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface RootUpdatedEventObject {
  oldRoot: string;
  newRoot: string;
}
export type RootUpdatedEvent = TypedEvent<
  [string, string],
  RootUpdatedEventObject
>;

export type RootUpdatedEventFilter = TypedEventFilter<RootUpdatedEvent>;

export interface TokenAllocatedEventObject {
  account: string;
  campaignId: number;
  amount: BigNumber;
}
export type TokenAllocatedEvent = TypedEvent<
  [string, number, BigNumber],
  TokenAllocatedEventObject
>;

export type TokenAllocatedEventFilter = TypedEventFilter<TokenAllocatedEvent>;

export interface IAirdropDistributorEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAirdropDistributorEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Claimed(address,uint256)"(
      account?: string | null,
      amount?: BigNumberish | null
    ): ClaimedEventFilter;
    Claimed(
      account?: string | null,
      amount?: BigNumberish | null
    ): ClaimedEventFilter;

    "RootUpdated(bytes32,bytes32)"(
      oldRoot?: null,
      newRoot?: BytesLike | null
    ): RootUpdatedEventFilter;
    RootUpdated(
      oldRoot?: null,
      newRoot?: BytesLike | null
    ): RootUpdatedEventFilter;

    "TokenAllocated(address,uint8,uint256)"(
      account?: string | null,
      campaignId?: BigNumberish | null,
      amount?: null
    ): TokenAllocatedEventFilter;
    TokenAllocated(
      account?: string | null,
      campaignId?: BigNumberish | null,
      amount?: null
    ): TokenAllocatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
