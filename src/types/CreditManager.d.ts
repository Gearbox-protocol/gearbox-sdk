/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreditManagerInterface extends ethers.utils.Interface {
  functions: {
    "_calcClosePayments(address,uint256,bool)": FunctionFragment;
    "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "addCollateral(address,address,uint256)": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "calcRepayAmount(address,bool)": FunctionFragment;
    "closeCreditAccount(address,tuple[])": FunctionFragment;
    "creditAccounts(address)": FunctionFragment;
    "creditFilter()": FunctionFragment;
    "defaultSwapContract()": FunctionFragment;
    "executeOrder(address,address,bytes)": FunctionFragment;
    "feeInterest()": FunctionFragment;
    "feeLiquidation()": FunctionFragment;
    "feeSuccess()": FunctionFragment;
    "getCreditAccountOrRevert(address)": FunctionFragment;
    "hasOpenedCreditAccount(address)": FunctionFragment;
    "increaseBorrowedAmount(uint256)": FunctionFragment;
    "liquidateCreditAccount(address,address)": FunctionFragment;
    "liquidationDiscount()": FunctionFragment;
    "maxAmount()": FunctionFragment;
    "maxLeverageFactor()": FunctionFragment;
    "minAmount()": FunctionFragment;
    "minHealthFactor()": FunctionFragment;
    "openCreditAccount(uint256,address,uint256,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "poolService()": FunctionFragment;
    "provideCreditAccountAllowance(address,address,address)": FunctionFragment;
    "repayCreditAccount(address)": FunctionFragment;
    "repayCreditAccountETH(address,address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setLimits(uint256,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "wethGateway()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_calcClosePayments",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_calcClosePaymentsPure",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcRepayAmount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [string, { path: string[]; amountOutMin: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFilter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSuccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountOrRevert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOpenedCreditAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBorrowedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCreditAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxLeverageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provideCreditAccountAllowance",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccountETH",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethGateway",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_calcClosePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_calcClosePaymentsPure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeSuccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOpenedCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideCreditAccountAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccountETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLimits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethGateway",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateral(address,address,uint256)": EventFragment;
    "CloseCreditAccount(address,address,uint256)": EventFragment;
    "ExecuteOrder(address,address)": EventFragment;
    "IncreaseBorrowedAmount(address,uint256)": EventFragment;
    "LiquidateCreditAccount(address,address,uint256)": EventFragment;
    "NewFees(uint256,uint256,uint256,uint256)": EventFragment;
    "NewLimits(uint256,uint256)": EventFragment;
    "OpenCreditAccount(address,address,address,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RepayCreditAccount(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseBorrowedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLimits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class CreditManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreditManagerInterface;

  functions: {
    _calcClosePayments(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    "_calcClosePayments(address,uint256,bool)"(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    _calcClosePaymentsPure(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)"(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    "addressProvider()"(overrides?: CallOverrides): Promise<[string]>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeCreditAccount(address,tuple[])"(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    creditAccounts(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "creditAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditFilter(overrides?: CallOverrides): Promise<[string]>;

    "creditFilter()"(overrides?: CallOverrides): Promise<[string]>;

    defaultSwapContract(overrides?: CallOverrides): Promise<[string]>;

    "defaultSwapContract()"(overrides?: CallOverrides): Promise<[string]>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeOrder(address,address,bytes)"(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeInterest()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeLiquidation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeLiquidation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeSuccess(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeSuccess()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOpenedCreditAccount(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateCreditAccount(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateCreditAccount(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationDiscount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minHealthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minHealthFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    poolService(overrides?: CallOverrides): Promise<[string]>;

    "poolService()"(overrides?: CallOverrides): Promise<[string]>;

    provideCreditAccountAllowance(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "provideCreditAccountAllowance(address,address,address)"(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayCreditAccountETH(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayCreditAccountETH(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFees(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFees(uint256,uint256,uint256,uint256)"(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLimits(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLimits(uint256,uint256)"(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;

    wethGateway(overrides?: CallOverrides): Promise<[string]>;

    "wethGateway()"(overrides?: CallOverrides): Promise<[string]>;
  };

  _calcClosePayments(
    creditAccount: string,
    totalValue: BigNumberish,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _borrowedAmount: BigNumber;
      amountToPool: BigNumber;
      remainingFunds: BigNumber;
      profit: BigNumber;
      loss: BigNumber;
    }
  >;

  "_calcClosePayments(address,uint256,bool)"(
    creditAccount: string,
    totalValue: BigNumberish,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _borrowedAmount: BigNumber;
      amountToPool: BigNumber;
      remainingFunds: BigNumber;
      profit: BigNumber;
      loss: BigNumber;
    }
  >;

  _calcClosePaymentsPure(
    totalValue: BigNumberish,
    isLiquidated: boolean,
    borrowedAmount: BigNumberish,
    cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
    cumulativeIndexNow_RAY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _borrowedAmount: BigNumber;
      amountToPool: BigNumber;
      remainingFunds: BigNumber;
      profit: BigNumber;
      loss: BigNumber;
    }
  >;

  "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)"(
    totalValue: BigNumberish,
    isLiquidated: boolean,
    borrowedAmount: BigNumberish,
    cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
    cumulativeIndexNow_RAY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _borrowedAmount: BigNumber;
      amountToPool: BigNumber;
      remainingFunds: BigNumber;
      profit: BigNumber;
      loss: BigNumber;
    }
  >;

  addCollateral(
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCollateral(address,address,uint256)"(
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  "addressProvider()"(overrides?: CallOverrides): Promise<string>;

  calcRepayAmount(
    borrower: string,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcRepayAmount(address,bool)"(
    borrower: string,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeCreditAccount(
    to: string,
    paths: { path: string[]; amountOutMin: BigNumberish }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeCreditAccount(address,tuple[])"(
    to: string,
    paths: { path: string[]; amountOutMin: BigNumberish }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  creditAccounts(arg0: string, overrides?: CallOverrides): Promise<string>;

  "creditAccounts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  creditFilter(overrides?: CallOverrides): Promise<string>;

  "creditFilter()"(overrides?: CallOverrides): Promise<string>;

  defaultSwapContract(overrides?: CallOverrides): Promise<string>;

  "defaultSwapContract()"(overrides?: CallOverrides): Promise<string>;

  executeOrder(
    borrower: string,
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeOrder(address,address,bytes)"(
    borrower: string,
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

  "feeInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

  "feeLiquidation()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeSuccess(overrides?: CallOverrides): Promise<BigNumber>;

  "feeSuccess()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCreditAccountOrRevert(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreditAccountOrRevert(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasOpenedCreditAccount(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOpenedCreditAccount(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseBorrowedAmount(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseBorrowedAmount(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateCreditAccount(
    borrower: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateCreditAccount(address,address)"(
    borrower: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  minHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "minHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  openCreditAccount(
    amount: BigNumberish,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openCreditAccount(uint256,address,uint256,uint256)"(
    amount: BigNumberish,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  poolService(overrides?: CallOverrides): Promise<string>;

  "poolService()"(overrides?: CallOverrides): Promise<string>;

  provideCreditAccountAllowance(
    creditAccount: string,
    toContract: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "provideCreditAccountAllowance(address,address,address)"(
    creditAccount: string,
    toContract: string,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayCreditAccount(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayCreditAccount(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayCreditAccountETH(
    borrower: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayCreditAccountETH(address,address)"(
    borrower: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFees(
    _feeSuccess: BigNumberish,
    _feeInterest: BigNumberish,
    _feeLiquidation: BigNumberish,
    _liquidationDiscount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFees(uint256,uint256,uint256,uint256)"(
    _feeSuccess: BigNumberish,
    _feeInterest: BigNumberish,
    _feeLiquidation: BigNumberish,
    _liquidationDiscount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLimits(
    newMinAmount: BigNumberish,
    newMaxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLimits(uint256,uint256)"(
    newMinAmount: BigNumberish,
    newMaxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  wethGateway(overrides?: CallOverrides): Promise<string>;

  "wethGateway()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _calcClosePayments(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    "_calcClosePayments(address,uint256,bool)"(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    _calcClosePaymentsPure(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)"(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _borrowedAmount: BigNumber;
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    "addressProvider()"(overrides?: CallOverrides): Promise<string>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "closeCreditAccount(address,tuple[])"(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    creditAccounts(arg0: string, overrides?: CallOverrides): Promise<string>;

    "creditAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    creditFilter(overrides?: CallOverrides): Promise<string>;

    "creditFilter()"(overrides?: CallOverrides): Promise<string>;

    defaultSwapContract(overrides?: CallOverrides): Promise<string>;

    "defaultSwapContract()"(overrides?: CallOverrides): Promise<string>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeOrder(address,address,bytes)"(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    "feeInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    "feeLiquidation()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSuccess(overrides?: CallOverrides): Promise<BigNumber>;

    "feeSuccess()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOpenedCreditAccount(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateCreditAccount(
      borrower: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateCreditAccount(address,address)"(
      borrower: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    minHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "minHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    poolService(overrides?: CallOverrides): Promise<string>;

    "poolService()"(overrides?: CallOverrides): Promise<string>;

    provideCreditAccountAllowance(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideCreditAccountAllowance(address,address,address)"(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccount(to: string, overrides?: CallOverrides): Promise<void>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccountETH(
      borrower: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayCreditAccountETH(address,address)"(
      borrower: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFees(uint256,uint256,uint256,uint256)"(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimits(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLimits(uint256,uint256)"(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;

    wethGateway(overrides?: CallOverrides): Promise<string>;

    "wethGateway()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddCollateral(
      onBehalfOf: string | null,
      token: string | null,
      value: null
    ): EventFilter;

    CloseCreditAccount(
      owner: string | null,
      to: string | null,
      remainingFunds: null
    ): EventFilter;

    ExecuteOrder(borrower: string | null, target: string | null): EventFilter;

    IncreaseBorrowedAmount(borrower: string | null, amount: null): EventFilter;

    LiquidateCreditAccount(
      owner: string | null,
      liquidator: string | null,
      remainingFunds: null
    ): EventFilter;

    NewFees(
      feeSuccess: null,
      feeInterest: null,
      feeLiquidation: null,
      liquidationDiscount: null
    ): EventFilter;

    NewLimits(minAmount: null, maxAmount: null): EventFilter;

    OpenCreditAccount(
      sender: string | null,
      onBehalfOf: string | null,
      creditAccount: string | null,
      amount: null,
      borrowAmount: null,
      referralCode: null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RepayCreditAccount(owner: string | null, to: string | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    _calcClosePayments(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_calcClosePayments(address,uint256,bool)"(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _calcClosePaymentsPure(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)"(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeCreditAccount(address,tuple[])"(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    creditAccounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "creditAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditFilter(overrides?: CallOverrides): Promise<BigNumber>;

    "creditFilter()"(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSwapContract(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultSwapContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeOrder(address,address,bytes)"(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    "feeInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    "feeLiquidation()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeSuccess(overrides?: CallOverrides): Promise<BigNumber>;

    "feeSuccess()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOpenedCreditAccount(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateCreditAccount(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateCreditAccount(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationDiscount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLeverageFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    minHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "minHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<BigNumber>;

    "poolService()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideCreditAccountAllowance(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "provideCreditAccountAllowance(address,address,address)"(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayCreditAccount(to: string, overrides?: Overrides): Promise<BigNumber>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayCreditAccountETH(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repayCreditAccountETH(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFees(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFees(uint256,uint256,uint256,uint256)"(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLimits(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLimits(uint256,uint256)"(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    wethGateway(overrides?: CallOverrides): Promise<BigNumber>;

    "wethGateway()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _calcClosePayments(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_calcClosePayments(address,uint256,bool)"(
      creditAccount: string,
      totalValue: BigNumberish,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _calcClosePaymentsPure(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_calcClosePaymentsPure(uint256,bool,uint256,uint256,uint256)"(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      cumulativeIndexAtCreditAccountOpen_RAY: BigNumberish,
      cumulativeIndexNow_RAY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeCreditAccount(address,tuple[])"(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    creditAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFilter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creditFilter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultSwapContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defaultSwapContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeOrder(address,address,bytes)"(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeInterest()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeLiquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeLiquidation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeSuccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeSuccess()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOpenedCreditAccount(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateCreditAccount(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateCreditAccount(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationDiscount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationDiscount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLeverageFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minHealthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minHealthFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolService()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideCreditAccountAllowance(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "provideCreditAccountAllowance(address,address,address)"(
      creditAccount: string,
      toContract: string,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayCreditAccountETH(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayCreditAccountETH(address,address)"(
      borrower: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFees(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFees(uint256,uint256,uint256,uint256)"(
      _feeSuccess: BigNumberish,
      _feeInterest: BigNumberish,
      _feeLiquidation: BigNumberish,
      _liquidationDiscount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLimits(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLimits(uint256,uint256)"(
      newMinAmount: BigNumberish,
      newMaxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethGateway()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
