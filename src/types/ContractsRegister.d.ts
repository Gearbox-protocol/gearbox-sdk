/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ContractsRegisterInterface extends ethers.utils.Interface {
  functions: {
    "addCreditManager(address)": FunctionFragment;
    "addPool(address)": FunctionFragment;
    "creditManagers(uint256)": FunctionFragment;
    "getCreditManagers()": FunctionFragment;
    "getCreditManagersCount()": FunctionFragment;
    "getPools()": FunctionFragment;
    "getPoolsCount()": FunctionFragment;
    "isCreditManager(address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCreditManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditManagers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditManagersCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditManagersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "NewCreditManagerAdded(address)": EventFragment;
    "NewPoolAdded(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCreditManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class ContractsRegister extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ContractsRegisterInterface;

  functions: {
    addCreditManager(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCreditManager(address)"(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      newPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(address)"(
      newPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    creditManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditManagers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreditManagers(overrides?: CallOverrides): Promise<[string[]]>;

    "getCreditManagers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getCreditManagersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCreditManagersCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPools(overrides?: CallOverrides): Promise<[string[]]>;

    "getPools()"(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPoolsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isCreditManager(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCreditManager(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPool(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addCreditManager(
    newCreditManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCreditManager(address)"(
    newCreditManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    newPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(address)"(
    newPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  creditManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditManagers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreditManagers(overrides?: CallOverrides): Promise<string[]>;

  "getCreditManagers()"(overrides?: CallOverrides): Promise<string[]>;

  getCreditManagersCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getCreditManagersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPools(overrides?: CallOverrides): Promise<string[]>;

  "getPools()"(overrides?: CallOverrides): Promise<string[]>;

  getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getPoolsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isCreditManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isCreditManager(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isPool(address)"(addr: string, overrides?: CallOverrides): Promise<boolean>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addCreditManager(
      newCreditManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCreditManager(address)"(
      newCreditManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(newPoolAddress: string, overrides?: CallOverrides): Promise<void>;

    "addPool(address)"(
      newPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creditManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditManagers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreditManagers(overrides?: CallOverrides): Promise<string[]>;

    "getCreditManagers()"(overrides?: CallOverrides): Promise<string[]>;

    getCreditManagersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCreditManagersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<string[]>;

    "getPools()"(overrides?: CallOverrides): Promise<string[]>;

    getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCreditManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isCreditManager(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isPool(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewCreditManagerAdded(creditManager: string | null): EventFilter;

    NewPoolAdded(pool: string | null): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    addCreditManager(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCreditManager(address)"(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(newPoolAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "addPool(address)"(
      newPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    creditManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditManagers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditManagers(overrides?: CallOverrides): Promise<BigNumber>;

    "getCreditManagers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditManagersCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCreditManagersCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    "getPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCreditManager(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCreditManager(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPool(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCreditManager(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCreditManager(address)"(
      newCreditManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      newPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(address)"(
      newPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    creditManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditManagers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditManagers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCreditManagers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditManagersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditManagersCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolsCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCreditManager(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCreditManager(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPool(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
