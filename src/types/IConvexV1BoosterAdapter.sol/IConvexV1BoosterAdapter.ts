/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IConvexV1BoosterAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "creditManager"
      | "deposit"
      | "depositDiff"
      | "pidToPhantomToken"
      | "targetContract"
      | "updateStakedPhantomTokensMap"
      | "withdraw"
      | "withdrawDiff"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetPidToPhantomToken"): EventFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDiff",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pidToPhantomToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakedPhantomTokensMap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDiff",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pidToPhantomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakedPhantomTokensMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDiff",
    data: BytesLike
  ): Result;
}

export namespace SetPidToPhantomTokenEvent {
  export type InputTuple = [pid: BigNumberish, phantomToken: AddressLike];
  export type OutputTuple = [pid: bigint, phantomToken: string];
  export interface OutputObject {
    pid: bigint;
    phantomToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConvexV1BoosterAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IConvexV1BoosterAdapter;
  waitForDeployment(): Promise<this>;

  interface: IConvexV1BoosterAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _gearboxAdapterType: TypedContractMethod<[], [bigint], "view">;

  _gearboxAdapterVersion: TypedContractMethod<[], [bigint], "view">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  creditManager: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [_pid: BigNumberish, arg1: BigNumberish, _stake: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  depositDiff: TypedContractMethod<
    [leftoverAmount: BigNumberish, _pid: BigNumberish, _stake: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  pidToPhantomToken: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  targetContract: TypedContractMethod<[], [string], "view">;

  updateStakedPhantomTokensMap: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [_pid: BigNumberish, arg1: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  withdrawDiff: TypedContractMethod<
    [leftoverAmount: BigNumberish, _pid: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_gearboxAdapterType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_gearboxAdapterVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_pid: BigNumberish, arg1: BigNumberish, _stake: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositDiff"
  ): TypedContractMethod<
    [leftoverAmount: BigNumberish, _pid: BigNumberish, _stake: boolean],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pidToPhantomToken"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "targetContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateStakedPhantomTokensMap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_pid: BigNumberish, arg1: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDiff"
  ): TypedContractMethod<
    [leftoverAmount: BigNumberish, _pid: BigNumberish],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "SetPidToPhantomToken"
  ): TypedContractEvent<
    SetPidToPhantomTokenEvent.InputTuple,
    SetPidToPhantomTokenEvent.OutputTuple,
    SetPidToPhantomTokenEvent.OutputObject
  >;

  filters: {
    "SetPidToPhantomToken(uint256,address)": TypedContractEvent<
      SetPidToPhantomTokenEvent.InputTuple,
      SetPidToPhantomTokenEvent.OutputTuple,
      SetPidToPhantomTokenEvent.OutputObject
    >;
    SetPidToPhantomToken: TypedContractEvent<
      SetPidToPhantomTokenEvent.InputTuple,
      SetPidToPhantomTokenEvent.OutputTuple,
      SetPidToPhantomTokenEvent.OutputObject
    >;
  };
}
