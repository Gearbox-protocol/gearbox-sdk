/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface ICreditFacadeV2EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateral"
      | "BlacklistHelperSet"
      | "CloseCreditAccount"
      | "DecreaseBorrowedAmount"
      | "IncreaseBorrowedAmount"
      | "IncurLossOnLiquidation"
      | "LiquidateCreditAccount"
      | "LiquidateExpiredCreditAccount"
      | "MultiCallFinished"
      | "MultiCallStarted"
      | "OpenCreditAccount"
      | "TokenDisabled"
      | "TokenEnabled"
      | "TransferAccount"
      | "TransferAccountAllowed"
      | "UnderlyingSentToBlacklistHelper"
  ): EventFragment;
}

export namespace AddCollateralEvent {
  export type InputTuple = [
    onBehalfOf: AddressLike,
    token: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [onBehalfOf: string, token: string, value: bigint];
  export interface OutputObject {
    onBehalfOf: string;
    token: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlacklistHelperSetEvent {
  export type InputTuple = [blacklistHelper: AddressLike];
  export type OutputTuple = [blacklistHelper: string];
  export interface OutputObject {
    blacklistHelper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseCreditAccountEvent {
  export type InputTuple = [borrower: AddressLike, to: AddressLike];
  export type OutputTuple = [borrower: string, to: string];
  export interface OutputObject {
    borrower: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseBorrowedAmountEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseBorrowedAmountEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncurLossOnLiquidationEvent {
  export type InputTuple = [loss: BigNumberish];
  export type OutputTuple = [loss: bigint];
  export interface OutputObject {
    loss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateCreditAccountEvent {
  export type InputTuple = [
    borrower: AddressLike,
    liquidator: AddressLike,
    to: AddressLike,
    remainingFunds: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    liquidator: string,
    to: string,
    remainingFunds: bigint
  ];
  export interface OutputObject {
    borrower: string;
    liquidator: string;
    to: string;
    remainingFunds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateExpiredCreditAccountEvent {
  export type InputTuple = [
    borrower: AddressLike,
    liquidator: AddressLike,
    to: AddressLike,
    remainingFunds: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    liquidator: string,
    to: string,
    remainingFunds: bigint
  ];
  export interface OutputObject {
    borrower: string;
    liquidator: string;
    to: string;
    remainingFunds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiCallFinishedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiCallStartedEvent {
  export type InputTuple = [borrower: AddressLike];
  export type OutputTuple = [borrower: string];
  export interface OutputObject {
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenCreditAccountEvent {
  export type InputTuple = [
    onBehalfOf: AddressLike,
    creditAccount: AddressLike,
    borrowAmount: BigNumberish,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    onBehalfOf: string,
    creditAccount: string,
    borrowAmount: bigint,
    referralCode: bigint
  ];
  export interface OutputObject {
    onBehalfOf: string;
    creditAccount: string;
    borrowAmount: bigint;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDisabledEvent {
  export type InputTuple = [borrower: AddressLike, token: AddressLike];
  export type OutputTuple = [borrower: string, token: string];
  export interface OutputObject {
    borrower: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenEnabledEvent {
  export type InputTuple = [borrower: AddressLike, token: AddressLike];
  export type OutputTuple = [borrower: string, token: string];
  export interface OutputObject {
    borrower: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAccountEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAccountAllowedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, state: boolean];
  export type OutputTuple = [from: string, to: string, state: boolean];
  export interface OutputObject {
    from: string;
    to: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnderlyingSentToBlacklistHelperEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreditFacadeV2Events extends BaseContract {
  connect(runner?: ContractRunner | null): ICreditFacadeV2Events;
  waitForDeployment(): Promise<this>;

  interface: ICreditFacadeV2EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AddCollateral"
  ): TypedContractEvent<
    AddCollateralEvent.InputTuple,
    AddCollateralEvent.OutputTuple,
    AddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "BlacklistHelperSet"
  ): TypedContractEvent<
    BlacklistHelperSetEvent.InputTuple,
    BlacklistHelperSetEvent.OutputTuple,
    BlacklistHelperSetEvent.OutputObject
  >;
  getEvent(
    key: "CloseCreditAccount"
  ): TypedContractEvent<
    CloseCreditAccountEvent.InputTuple,
    CloseCreditAccountEvent.OutputTuple,
    CloseCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseBorrowedAmount"
  ): TypedContractEvent<
    DecreaseBorrowedAmountEvent.InputTuple,
    DecreaseBorrowedAmountEvent.OutputTuple,
    DecreaseBorrowedAmountEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseBorrowedAmount"
  ): TypedContractEvent<
    IncreaseBorrowedAmountEvent.InputTuple,
    IncreaseBorrowedAmountEvent.OutputTuple,
    IncreaseBorrowedAmountEvent.OutputObject
  >;
  getEvent(
    key: "IncurLossOnLiquidation"
  ): TypedContractEvent<
    IncurLossOnLiquidationEvent.InputTuple,
    IncurLossOnLiquidationEvent.OutputTuple,
    IncurLossOnLiquidationEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateCreditAccount"
  ): TypedContractEvent<
    LiquidateCreditAccountEvent.InputTuple,
    LiquidateCreditAccountEvent.OutputTuple,
    LiquidateCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateExpiredCreditAccount"
  ): TypedContractEvent<
    LiquidateExpiredCreditAccountEvent.InputTuple,
    LiquidateExpiredCreditAccountEvent.OutputTuple,
    LiquidateExpiredCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "MultiCallFinished"
  ): TypedContractEvent<
    MultiCallFinishedEvent.InputTuple,
    MultiCallFinishedEvent.OutputTuple,
    MultiCallFinishedEvent.OutputObject
  >;
  getEvent(
    key: "MultiCallStarted"
  ): TypedContractEvent<
    MultiCallStartedEvent.InputTuple,
    MultiCallStartedEvent.OutputTuple,
    MultiCallStartedEvent.OutputObject
  >;
  getEvent(
    key: "OpenCreditAccount"
  ): TypedContractEvent<
    OpenCreditAccountEvent.InputTuple,
    OpenCreditAccountEvent.OutputTuple,
    OpenCreditAccountEvent.OutputObject
  >;
  getEvent(
    key: "TokenDisabled"
  ): TypedContractEvent<
    TokenDisabledEvent.InputTuple,
    TokenDisabledEvent.OutputTuple,
    TokenDisabledEvent.OutputObject
  >;
  getEvent(
    key: "TokenEnabled"
  ): TypedContractEvent<
    TokenEnabledEvent.InputTuple,
    TokenEnabledEvent.OutputTuple,
    TokenEnabledEvent.OutputObject
  >;
  getEvent(
    key: "TransferAccount"
  ): TypedContractEvent<
    TransferAccountEvent.InputTuple,
    TransferAccountEvent.OutputTuple,
    TransferAccountEvent.OutputObject
  >;
  getEvent(
    key: "TransferAccountAllowed"
  ): TypedContractEvent<
    TransferAccountAllowedEvent.InputTuple,
    TransferAccountAllowedEvent.OutputTuple,
    TransferAccountAllowedEvent.OutputObject
  >;
  getEvent(
    key: "UnderlyingSentToBlacklistHelper"
  ): TypedContractEvent<
    UnderlyingSentToBlacklistHelperEvent.InputTuple,
    UnderlyingSentToBlacklistHelperEvent.OutputTuple,
    UnderlyingSentToBlacklistHelperEvent.OutputObject
  >;

  filters: {
    "AddCollateral(address,address,uint256)": TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;
    AddCollateral: TypedContractEvent<
      AddCollateralEvent.InputTuple,
      AddCollateralEvent.OutputTuple,
      AddCollateralEvent.OutputObject
    >;

    "BlacklistHelperSet(address)": TypedContractEvent<
      BlacklistHelperSetEvent.InputTuple,
      BlacklistHelperSetEvent.OutputTuple,
      BlacklistHelperSetEvent.OutputObject
    >;
    BlacklistHelperSet: TypedContractEvent<
      BlacklistHelperSetEvent.InputTuple,
      BlacklistHelperSetEvent.OutputTuple,
      BlacklistHelperSetEvent.OutputObject
    >;

    "CloseCreditAccount(address,address)": TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;
    CloseCreditAccount: TypedContractEvent<
      CloseCreditAccountEvent.InputTuple,
      CloseCreditAccountEvent.OutputTuple,
      CloseCreditAccountEvent.OutputObject
    >;

    "DecreaseBorrowedAmount(address,uint256)": TypedContractEvent<
      DecreaseBorrowedAmountEvent.InputTuple,
      DecreaseBorrowedAmountEvent.OutputTuple,
      DecreaseBorrowedAmountEvent.OutputObject
    >;
    DecreaseBorrowedAmount: TypedContractEvent<
      DecreaseBorrowedAmountEvent.InputTuple,
      DecreaseBorrowedAmountEvent.OutputTuple,
      DecreaseBorrowedAmountEvent.OutputObject
    >;

    "IncreaseBorrowedAmount(address,uint256)": TypedContractEvent<
      IncreaseBorrowedAmountEvent.InputTuple,
      IncreaseBorrowedAmountEvent.OutputTuple,
      IncreaseBorrowedAmountEvent.OutputObject
    >;
    IncreaseBorrowedAmount: TypedContractEvent<
      IncreaseBorrowedAmountEvent.InputTuple,
      IncreaseBorrowedAmountEvent.OutputTuple,
      IncreaseBorrowedAmountEvent.OutputObject
    >;

    "IncurLossOnLiquidation(uint256)": TypedContractEvent<
      IncurLossOnLiquidationEvent.InputTuple,
      IncurLossOnLiquidationEvent.OutputTuple,
      IncurLossOnLiquidationEvent.OutputObject
    >;
    IncurLossOnLiquidation: TypedContractEvent<
      IncurLossOnLiquidationEvent.InputTuple,
      IncurLossOnLiquidationEvent.OutputTuple,
      IncurLossOnLiquidationEvent.OutputObject
    >;

    "LiquidateCreditAccount(address,address,address,uint256)": TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;
    LiquidateCreditAccount: TypedContractEvent<
      LiquidateCreditAccountEvent.InputTuple,
      LiquidateCreditAccountEvent.OutputTuple,
      LiquidateCreditAccountEvent.OutputObject
    >;

    "LiquidateExpiredCreditAccount(address,address,address,uint256)": TypedContractEvent<
      LiquidateExpiredCreditAccountEvent.InputTuple,
      LiquidateExpiredCreditAccountEvent.OutputTuple,
      LiquidateExpiredCreditAccountEvent.OutputObject
    >;
    LiquidateExpiredCreditAccount: TypedContractEvent<
      LiquidateExpiredCreditAccountEvent.InputTuple,
      LiquidateExpiredCreditAccountEvent.OutputTuple,
      LiquidateExpiredCreditAccountEvent.OutputObject
    >;

    "MultiCallFinished()": TypedContractEvent<
      MultiCallFinishedEvent.InputTuple,
      MultiCallFinishedEvent.OutputTuple,
      MultiCallFinishedEvent.OutputObject
    >;
    MultiCallFinished: TypedContractEvent<
      MultiCallFinishedEvent.InputTuple,
      MultiCallFinishedEvent.OutputTuple,
      MultiCallFinishedEvent.OutputObject
    >;

    "MultiCallStarted(address)": TypedContractEvent<
      MultiCallStartedEvent.InputTuple,
      MultiCallStartedEvent.OutputTuple,
      MultiCallStartedEvent.OutputObject
    >;
    MultiCallStarted: TypedContractEvent<
      MultiCallStartedEvent.InputTuple,
      MultiCallStartedEvent.OutputTuple,
      MultiCallStartedEvent.OutputObject
    >;

    "OpenCreditAccount(address,address,uint256,uint16)": TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;
    OpenCreditAccount: TypedContractEvent<
      OpenCreditAccountEvent.InputTuple,
      OpenCreditAccountEvent.OutputTuple,
      OpenCreditAccountEvent.OutputObject
    >;

    "TokenDisabled(address,address)": TypedContractEvent<
      TokenDisabledEvent.InputTuple,
      TokenDisabledEvent.OutputTuple,
      TokenDisabledEvent.OutputObject
    >;
    TokenDisabled: TypedContractEvent<
      TokenDisabledEvent.InputTuple,
      TokenDisabledEvent.OutputTuple,
      TokenDisabledEvent.OutputObject
    >;

    "TokenEnabled(address,address)": TypedContractEvent<
      TokenEnabledEvent.InputTuple,
      TokenEnabledEvent.OutputTuple,
      TokenEnabledEvent.OutputObject
    >;
    TokenEnabled: TypedContractEvent<
      TokenEnabledEvent.InputTuple,
      TokenEnabledEvent.OutputTuple,
      TokenEnabledEvent.OutputObject
    >;

    "TransferAccount(address,address)": TypedContractEvent<
      TransferAccountEvent.InputTuple,
      TransferAccountEvent.OutputTuple,
      TransferAccountEvent.OutputObject
    >;
    TransferAccount: TypedContractEvent<
      TransferAccountEvent.InputTuple,
      TransferAccountEvent.OutputTuple,
      TransferAccountEvent.OutputObject
    >;

    "TransferAccountAllowed(address,address,bool)": TypedContractEvent<
      TransferAccountAllowedEvent.InputTuple,
      TransferAccountAllowedEvent.OutputTuple,
      TransferAccountAllowedEvent.OutputObject
    >;
    TransferAccountAllowed: TypedContractEvent<
      TransferAccountAllowedEvent.InputTuple,
      TransferAccountAllowedEvent.OutputTuple,
      TransferAccountAllowedEvent.OutputObject
    >;

    "UnderlyingSentToBlacklistHelper(address,uint256)": TypedContractEvent<
      UnderlyingSentToBlacklistHelperEvent.InputTuple,
      UnderlyingSentToBlacklistHelperEvent.OutputTuple,
      UnderlyingSentToBlacklistHelperEvent.OutputObject
    >;
    UnderlyingSentToBlacklistHelper: TypedContractEvent<
      UnderlyingSentToBlacklistHelperEvent.InputTuple,
      UnderlyingSentToBlacklistHelperEvent.OutputTuple,
      UnderlyingSentToBlacklistHelperEvent.OutputObject
    >;
  };
}
