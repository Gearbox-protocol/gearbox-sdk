/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAccountMinerInterface extends ethers.utils.Interface {
  functions: {
    "accountFactories(uint256)": FunctionFragment;
    "accountFactoriesCount()": FunctionFragment;
    "addAccountFactory(address,uint256)": FunctionFragment;
    "deploymentCosts(address)": FunctionFragment;
    "kind()": FunctionFragment;
    "mineAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountFactories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accountFactoriesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccountFactory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentCosts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kind", values?: undefined): string;
  encodeFunctionData(functionFragment: "mineAccount", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "accountFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountFactoriesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mineAccount",
    data: BytesLike
  ): Result;

  events: {
    "NewAccountFactory(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAccountFactory"): EventFragment;
}

export class IAccountMiner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAccountMinerInterface;

  functions: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deploymentCosts(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "deploymentCosts(address)"(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kind(overrides?: CallOverrides): Promise<[string]>;

    "kind()"(overrides?: CallOverrides): Promise<[string]>;

    mineAccount(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mineAccount(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountFactories(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "accountFactories(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

  "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAccountFactory(
    accountFactory: string,
    deploymentCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAccountFactory(address,uint256)"(
    accountFactory: string,
    deploymentCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deploymentCosts(
    accountFactory: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deploymentCosts(address)"(
    accountFactory: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kind(overrides?: CallOverrides): Promise<string>;

  "kind()"(overrides?: CallOverrides): Promise<string>;

  mineAccount(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mineAccount(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deploymentCosts(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deploymentCosts(address)"(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kind(overrides?: CallOverrides): Promise<string>;

    "kind()"(overrides?: CallOverrides): Promise<string>;

    mineAccount(user: string, overrides?: CallOverrides): Promise<void>;

    "mineAccount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewAccountFactory(
      factoryAddress: string | null,
      deploymentCost: null
    ): EventFilter;
  };

  estimateGas: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountFactoriesCount(overrides?: CallOverrides): Promise<BigNumber>;

    "accountFactoriesCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deploymentCosts(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deploymentCosts(address)"(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kind(overrides?: CallOverrides): Promise<BigNumber>;

    "kind()"(overrides?: CallOverrides): Promise<BigNumber>;

    mineAccount(user: string, overrides?: Overrides): Promise<BigNumber>;

    "mineAccount(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountFactories(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountFactoriesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountFactoriesCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAccountFactory(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAccountFactory(address,uint256)"(
      accountFactory: string,
      deploymentCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deploymentCosts(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deploymentCosts(address)"(
      accountFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kind()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mineAccount(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mineAccount(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
