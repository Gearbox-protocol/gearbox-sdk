/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DataCompressorInterface extends ethers.utils.Interface {
  functions: {
    "WETHToken()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "contractsRegister()": FunctionFragment;
    "getAdapter(address,address)": FunctionFragment;
    "getCreditAccountData(address,address)": FunctionFragment;
    "getCreditAccountDataExtended(address,address)": FunctionFragment;
    "getCreditAccountList(address)": FunctionFragment;
    "getCreditAccountParameters(address)": FunctionFragment;
    "getCreditManagerData(address,address)": FunctionFragment;
    "getCreditManagersList(address)": FunctionFragment;
    "getPoolData(address)": FunctionFragment;
    "getPoolsList()": FunctionFragment;
    "getTokenData(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETHToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountDataExtended",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountParameters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditManagerData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditManagersList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPoolData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPoolsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenData",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "WETHToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountDataExtended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditManagerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditManagersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenData",
    data: BytesLike
  ): Result;

  events: {};
}

export class DataCompressor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DataCompressorInterface;

  functions: {
    WETHToken(overrides?: CallOverrides): Promise<[string]>;

    "WETHToken()"(overrides?: CallOverrides): Promise<[string]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    "addressProvider()"(overrides?: CallOverrides): Promise<[string]>;

    contractsRegister(overrides?: CallOverrides): Promise<[string]>;

    "contractsRegister()"(overrides?: CallOverrides): Promise<[string]>;

    getAdapter(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAdapter(address,address)"(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreditAccountData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[]
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
        }
      ]
    >;

    "getCreditAccountData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[]
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
        }
      ]
    >;

    getCreditAccountDataExtended(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
          repayAmount: BigNumber;
          liquidationAmount: BigNumber;
          borrowedAmount: BigNumber;
          cumulativeIndexAtOpen: BigNumber;
          since: BigNumber;
        }
      ]
    >;

    "getCreditAccountDataExtended(address,address)"(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
          repayAmount: BigNumber;
          liquidationAmount: BigNumber;
          borrowedAmount: BigNumber;
          cumulativeIndexAtOpen: BigNumber;
          since: BigNumber;
        }
      ]
    >;

    getCreditAccountList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[]
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
        })[]
      ]
    >;

    "getCreditAccountList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          boolean,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { token: string; balance: BigNumber })[]
        ] & {
          addr: string;
          borrower: string;
          inUse: boolean;
          creditManager: string;
          kind: string;
          underlyingToken: string;
          borrowedAmountPlusInterest: BigNumber;
          totalValue: BigNumber;
          healthFactor: BigNumber;
          borrowRate: BigNumber;
          balances: ([string, BigNumber] & {
            token: string;
            balance: BigNumber;
          })[];
        })[]
      ]
    >;

    getCreditAccountParameters(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        _creditManager: string;
        _borrowedAmount: BigNumber;
        _cumulativeIndexAtOpen: BigNumber;
        _since: BigNumber;
      }
    >;

    "getCreditAccountParameters(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        _creditManager: string;
        _borrowedAmount: BigNumber;
        _cumulativeIndexAtOpen: BigNumber;
        _since: BigNumber;
      }
    >;

    getCreditManagerData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          boolean,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          string[]
        ] & {
          addr: string;
          hasAccount: boolean;
          kind: string;
          underlyingToken: string;
          isWETH: boolean;
          canBorrow: boolean;
          borrowRate: BigNumber;
          minAmount: BigNumber;
          maxAmount: BigNumber;
          maxLeverageFactor: BigNumber;
          availableLiquidity: BigNumber;
          allowedTokens: string[];
          allowedContracts: string[];
        }
      ]
    >;

    "getCreditManagerData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          boolean,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          string[]
        ] & {
          addr: string;
          hasAccount: boolean;
          kind: string;
          underlyingToken: string;
          isWETH: boolean;
          canBorrow: boolean;
          borrowRate: BigNumber;
          minAmount: BigNumber;
          maxAmount: BigNumber;
          maxLeverageFactor: BigNumber;
          availableLiquidity: BigNumber;
          allowedTokens: string[];
          allowedContracts: string[];
        }
      ]
    >;

    getCreditManagersList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          boolean,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          string[]
        ] & {
          addr: string;
          hasAccount: boolean;
          kind: string;
          underlyingToken: string;
          isWETH: boolean;
          canBorrow: boolean;
          borrowRate: BigNumber;
          minAmount: BigNumber;
          maxAmount: BigNumber;
          maxLeverageFactor: BigNumber;
          availableLiquidity: BigNumber;
          allowedTokens: string[];
          allowedContracts: string[];
        })[]
      ]
    >;

    "getCreditManagersList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          boolean,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          string[]
        ] & {
          addr: string;
          hasAccount: boolean;
          kind: string;
          underlyingToken: string;
          isWETH: boolean;
          canBorrow: boolean;
          borrowRate: BigNumber;
          minAmount: BigNumber;
          maxAmount: BigNumber;
          maxLeverageFactor: BigNumber;
          availableLiquidity: BigNumber;
          allowedTokens: string[];
          allowedContracts: string[];
        })[]
      ]
    >;

    getPoolData(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          isWETH: boolean;
          underlyingToken: string;
          dieselToken: string;
          linearCumulativeIndex: BigNumber;
          availableLiquidity: BigNumber;
          expectedLiquidity: BigNumber;
          expectedLiquidityLimit: BigNumber;
          totalBorrowed: BigNumber;
          depositAPY_RAY: BigNumber;
          borrowAPY_RAY: BigNumber;
          dieselRate_RAY: BigNumber;
          withdrawFee: BigNumber;
        }
      ]
    >;

    "getPoolData(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          isWETH: boolean;
          underlyingToken: string;
          dieselToken: string;
          linearCumulativeIndex: BigNumber;
          availableLiquidity: BigNumber;
          expectedLiquidity: BigNumber;
          expectedLiquidityLimit: BigNumber;
          totalBorrowed: BigNumber;
          depositAPY_RAY: BigNumber;
          borrowAPY_RAY: BigNumber;
          dieselRate_RAY: BigNumber;
          withdrawFee: BigNumber;
        }
      ]
    >;

    getPoolsList(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          isWETH: boolean;
          underlyingToken: string;
          dieselToken: string;
          linearCumulativeIndex: BigNumber;
          availableLiquidity: BigNumber;
          expectedLiquidity: BigNumber;
          expectedLiquidityLimit: BigNumber;
          totalBorrowed: BigNumber;
          depositAPY_RAY: BigNumber;
          borrowAPY_RAY: BigNumber;
          dieselRate_RAY: BigNumber;
          withdrawFee: BigNumber;
        })[]
      ]
    >;

    "getPoolsList()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          boolean,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          isWETH: boolean;
          underlyingToken: string;
          dieselToken: string;
          linearCumulativeIndex: BigNumber;
          availableLiquidity: BigNumber;
          expectedLiquidity: BigNumber;
          expectedLiquidityLimit: BigNumber;
          totalBorrowed: BigNumber;
          depositAPY_RAY: BigNumber;
          borrowAPY_RAY: BigNumber;
          dieselRate_RAY: BigNumber;
          withdrawFee: BigNumber;
        })[]
      ]
    >;

    getTokenData(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          addr: string;
          symbol: string;
          decimals: number;
        }
      ]
    >;

    "getTokenData(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          addr: string;
          symbol: string;
          decimals: number;
        }
      ]
    >;
  };

  WETHToken(overrides?: CallOverrides): Promise<string>;

  "WETHToken()"(overrides?: CallOverrides): Promise<string>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  "addressProvider()"(overrides?: CallOverrides): Promise<string>;

  contractsRegister(overrides?: CallOverrides): Promise<string>;

  "contractsRegister()"(overrides?: CallOverrides): Promise<string>;

  getAdapter(
    _creditManager: string,
    _allowedContract: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAdapter(address,address)"(
    _creditManager: string,
    _allowedContract: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreditAccountData(
    _creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[]
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
    }
  >;

  "getCreditAccountData(address,address)"(
    _creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[]
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
    }
  >;

  getCreditAccountDataExtended(
    creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
      repayAmount: BigNumber;
      liquidationAmount: BigNumber;
      borrowedAmount: BigNumber;
      cumulativeIndexAtOpen: BigNumber;
      since: BigNumber;
    }
  >;

  "getCreditAccountDataExtended(address,address)"(
    creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
      repayAmount: BigNumber;
      liquidationAmount: BigNumber;
      borrowedAmount: BigNumber;
      cumulativeIndexAtOpen: BigNumber;
      since: BigNumber;
    }
  >;

  getCreditAccountList(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[]
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
    })[]
  >;

  "getCreditAccountList(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      boolean,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { token: string; balance: BigNumber })[]
    ] & {
      addr: string;
      borrower: string;
      inUse: boolean;
      creditManager: string;
      kind: string;
      underlyingToken: string;
      borrowedAmountPlusInterest: BigNumber;
      totalValue: BigNumber;
      healthFactor: BigNumber;
      borrowRate: BigNumber;
      balances: ([string, BigNumber] & { token: string; balance: BigNumber })[];
    })[]
  >;

  getCreditAccountParameters(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      _creditManager: string;
      _borrowedAmount: BigNumber;
      _cumulativeIndexAtOpen: BigNumber;
      _since: BigNumber;
    }
  >;

  "getCreditAccountParameters(address)"(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      _creditManager: string;
      _borrowedAmount: BigNumber;
      _cumulativeIndexAtOpen: BigNumber;
      _since: BigNumber;
    }
  >;

  getCreditManagerData(
    _creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      string[]
    ] & {
      addr: string;
      hasAccount: boolean;
      kind: string;
      underlyingToken: string;
      isWETH: boolean;
      canBorrow: boolean;
      borrowRate: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      maxLeverageFactor: BigNumber;
      availableLiquidity: BigNumber;
      allowedTokens: string[];
      allowedContracts: string[];
    }
  >;

  "getCreditManagerData(address,address)"(
    _creditManager: string,
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      string[]
    ] & {
      addr: string;
      hasAccount: boolean;
      kind: string;
      underlyingToken: string;
      isWETH: boolean;
      canBorrow: boolean;
      borrowRate: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      maxLeverageFactor: BigNumber;
      availableLiquidity: BigNumber;
      allowedTokens: string[];
      allowedContracts: string[];
    }
  >;

  getCreditManagersList(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      boolean,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      string[]
    ] & {
      addr: string;
      hasAccount: boolean;
      kind: string;
      underlyingToken: string;
      isWETH: boolean;
      canBorrow: boolean;
      borrowRate: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      maxLeverageFactor: BigNumber;
      availableLiquidity: BigNumber;
      allowedTokens: string[];
      allowedContracts: string[];
    })[]
  >;

  "getCreditManagersList(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      boolean,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      string[]
    ] & {
      addr: string;
      hasAccount: boolean;
      kind: string;
      underlyingToken: string;
      isWETH: boolean;
      canBorrow: boolean;
      borrowRate: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      maxLeverageFactor: BigNumber;
      availableLiquidity: BigNumber;
      allowedTokens: string[];
      allowedContracts: string[];
    })[]
  >;

  getPoolData(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      isWETH: boolean;
      underlyingToken: string;
      dieselToken: string;
      linearCumulativeIndex: BigNumber;
      availableLiquidity: BigNumber;
      expectedLiquidity: BigNumber;
      expectedLiquidityLimit: BigNumber;
      totalBorrowed: BigNumber;
      depositAPY_RAY: BigNumber;
      borrowAPY_RAY: BigNumber;
      dieselRate_RAY: BigNumber;
      withdrawFee: BigNumber;
    }
  >;

  "getPoolData(address)"(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      isWETH: boolean;
      underlyingToken: string;
      dieselToken: string;
      linearCumulativeIndex: BigNumber;
      availableLiquidity: BigNumber;
      expectedLiquidity: BigNumber;
      expectedLiquidityLimit: BigNumber;
      totalBorrowed: BigNumber;
      depositAPY_RAY: BigNumber;
      borrowAPY_RAY: BigNumber;
      dieselRate_RAY: BigNumber;
      withdrawFee: BigNumber;
    }
  >;

  getPoolsList(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      isWETH: boolean;
      underlyingToken: string;
      dieselToken: string;
      linearCumulativeIndex: BigNumber;
      availableLiquidity: BigNumber;
      expectedLiquidity: BigNumber;
      expectedLiquidityLimit: BigNumber;
      totalBorrowed: BigNumber;
      depositAPY_RAY: BigNumber;
      borrowAPY_RAY: BigNumber;
      dieselRate_RAY: BigNumber;
      withdrawFee: BigNumber;
    })[]
  >;

  "getPoolsList()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      isWETH: boolean;
      underlyingToken: string;
      dieselToken: string;
      linearCumulativeIndex: BigNumber;
      availableLiquidity: BigNumber;
      expectedLiquidity: BigNumber;
      expectedLiquidityLimit: BigNumber;
      totalBorrowed: BigNumber;
      depositAPY_RAY: BigNumber;
      borrowAPY_RAY: BigNumber;
      dieselRate_RAY: BigNumber;
      withdrawFee: BigNumber;
    })[]
  >;

  getTokenData(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      addr: string;
      symbol: string;
      decimals: number;
    }
  >;

  "getTokenData(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      addr: string;
      symbol: string;
      decimals: number;
    }
  >;

  callStatic: {
    WETHToken(overrides?: CallOverrides): Promise<string>;

    "WETHToken()"(overrides?: CallOverrides): Promise<string>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    "addressProvider()"(overrides?: CallOverrides): Promise<string>;

    contractsRegister(overrides?: CallOverrides): Promise<string>;

    "contractsRegister()"(overrides?: CallOverrides): Promise<string>;

    getAdapter(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAdapter(address,address)"(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreditAccountData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[]
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
      }
    >;

    "getCreditAccountData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[]
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
      }
    >;

    getCreditAccountDataExtended(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
        repayAmount: BigNumber;
        liquidationAmount: BigNumber;
        borrowedAmount: BigNumber;
        cumulativeIndexAtOpen: BigNumber;
        since: BigNumber;
      }
    >;

    "getCreditAccountDataExtended(address,address)"(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
        repayAmount: BigNumber;
        liquidationAmount: BigNumber;
        borrowedAmount: BigNumber;
        cumulativeIndexAtOpen: BigNumber;
        since: BigNumber;
      }
    >;

    getCreditAccountList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[]
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
      })[]
    >;

    "getCreditAccountList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        boolean,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { token: string; balance: BigNumber })[]
      ] & {
        addr: string;
        borrower: string;
        inUse: boolean;
        creditManager: string;
        kind: string;
        underlyingToken: string;
        borrowedAmountPlusInterest: BigNumber;
        totalValue: BigNumber;
        healthFactor: BigNumber;
        borrowRate: BigNumber;
        balances: ([string, BigNumber] & {
          token: string;
          balance: BigNumber;
        })[];
      })[]
    >;

    getCreditAccountParameters(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        _creditManager: string;
        _borrowedAmount: BigNumber;
        _cumulativeIndexAtOpen: BigNumber;
        _since: BigNumber;
      }
    >;

    "getCreditAccountParameters(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        _creditManager: string;
        _borrowedAmount: BigNumber;
        _cumulativeIndexAtOpen: BigNumber;
        _since: BigNumber;
      }
    >;

    getCreditManagerData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string[]
      ] & {
        addr: string;
        hasAccount: boolean;
        kind: string;
        underlyingToken: string;
        isWETH: boolean;
        canBorrow: boolean;
        borrowRate: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxLeverageFactor: BigNumber;
        availableLiquidity: BigNumber;
        allowedTokens: string[];
        allowedContracts: string[];
      }
    >;

    "getCreditManagerData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string[]
      ] & {
        addr: string;
        hasAccount: boolean;
        kind: string;
        underlyingToken: string;
        isWETH: boolean;
        canBorrow: boolean;
        borrowRate: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxLeverageFactor: BigNumber;
        availableLiquidity: BigNumber;
        allowedTokens: string[];
        allowedContracts: string[];
      }
    >;

    getCreditManagersList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        boolean,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string[]
      ] & {
        addr: string;
        hasAccount: boolean;
        kind: string;
        underlyingToken: string;
        isWETH: boolean;
        canBorrow: boolean;
        borrowRate: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxLeverageFactor: BigNumber;
        availableLiquidity: BigNumber;
        allowedTokens: string[];
        allowedContracts: string[];
      })[]
    >;

    "getCreditManagersList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        boolean,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        string[]
      ] & {
        addr: string;
        hasAccount: boolean;
        kind: string;
        underlyingToken: string;
        isWETH: boolean;
        canBorrow: boolean;
        borrowRate: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxLeverageFactor: BigNumber;
        availableLiquidity: BigNumber;
        allowedTokens: string[];
        allowedContracts: string[];
      })[]
    >;

    getPoolData(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        isWETH: boolean;
        underlyingToken: string;
        dieselToken: string;
        linearCumulativeIndex: BigNumber;
        availableLiquidity: BigNumber;
        expectedLiquidity: BigNumber;
        expectedLiquidityLimit: BigNumber;
        totalBorrowed: BigNumber;
        depositAPY_RAY: BigNumber;
        borrowAPY_RAY: BigNumber;
        dieselRate_RAY: BigNumber;
        withdrawFee: BigNumber;
      }
    >;

    "getPoolData(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        isWETH: boolean;
        underlyingToken: string;
        dieselToken: string;
        linearCumulativeIndex: BigNumber;
        availableLiquidity: BigNumber;
        expectedLiquidity: BigNumber;
        expectedLiquidityLimit: BigNumber;
        totalBorrowed: BigNumber;
        depositAPY_RAY: BigNumber;
        borrowAPY_RAY: BigNumber;
        dieselRate_RAY: BigNumber;
        withdrawFee: BigNumber;
      }
    >;

    getPoolsList(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        isWETH: boolean;
        underlyingToken: string;
        dieselToken: string;
        linearCumulativeIndex: BigNumber;
        availableLiquidity: BigNumber;
        expectedLiquidity: BigNumber;
        expectedLiquidityLimit: BigNumber;
        totalBorrowed: BigNumber;
        depositAPY_RAY: BigNumber;
        borrowAPY_RAY: BigNumber;
        dieselRate_RAY: BigNumber;
        withdrawFee: BigNumber;
      })[]
    >;

    "getPoolsList()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        isWETH: boolean;
        underlyingToken: string;
        dieselToken: string;
        linearCumulativeIndex: BigNumber;
        availableLiquidity: BigNumber;
        expectedLiquidity: BigNumber;
        expectedLiquidityLimit: BigNumber;
        totalBorrowed: BigNumber;
        depositAPY_RAY: BigNumber;
        borrowAPY_RAY: BigNumber;
        dieselRate_RAY: BigNumber;
        withdrawFee: BigNumber;
      })[]
    >;

    getTokenData(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        addr: string;
        symbol: string;
        decimals: number;
      }
    >;

    "getTokenData(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        addr: string;
        symbol: string;
        decimals: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    WETHToken(overrides?: CallOverrides): Promise<BigNumber>;

    "WETHToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractsRegister(overrides?: CallOverrides): Promise<BigNumber>;

    "contractsRegister()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAdapter(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapter(address,address)"(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountDataExtended(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountDataExtended(address,address)"(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditAccountParameters(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountParameters(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditManagerData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditManagerData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditManagersList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditManagersList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolData(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolData(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsList(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolsList()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenData(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenData(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETHToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETHToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractsRegister(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractsRegister()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdapter(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapter(address,address)"(
      _creditManager: string,
      _allowedContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountDataExtended(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountDataExtended(address,address)"(
      creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountParameters(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountParameters(address)"(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditManagerData(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditManagerData(address,address)"(
      _creditManager: string,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditManagersList(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditManagersList(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolData(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolData(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolsList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenData(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenData(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
