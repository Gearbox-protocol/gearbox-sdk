/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LinearInterestRateModelInterface extends ethers.utils.Interface {
  functions: {
    "_R_base_RAY()": FunctionFragment;
    "_R_slope1_RAY()": FunctionFragment;
    "_R_slope2_RAY()": FunctionFragment;
    "_U_Optimal_WAD()": FunctionFragment;
    "_U_Optimal_inverted_WAD()": FunctionFragment;
    "calcBorrowRate(uint256,uint256)": FunctionFragment;
    "getModelParameters()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_R_base_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_R_slope1_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_R_slope2_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_U_Optimal_WAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_U_Optimal_inverted_WAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModelParameters",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_R_base_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_R_slope1_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_R_slope2_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_U_Optimal_WAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_U_Optimal_inverted_WAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModelParameters",
    data: BytesLike
  ): Result;

  events: {};
}

export class LinearInterestRateModel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LinearInterestRateModelInterface;

  functions: {
    _R_base_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _R_slope1_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _R_slope2_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _U_Optimal_WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _U_Optimal_inverted_WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcBorrowRate(
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        U_optimal: BigNumber;
        R_base: BigNumber;
        R_slope1: BigNumber;
        R_slope2: BigNumber;
      }
    >;
  };

  _R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  _R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  _R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  _U_Optimal_WAD(overrides?: CallOverrides): Promise<BigNumber>;

  _U_Optimal_inverted_WAD(overrides?: CallOverrides): Promise<BigNumber>;

  calcBorrowRate(
    expectedLiquidity: BigNumberish,
    availableLiquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getModelParameters(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      U_optimal: BigNumber;
      R_base: BigNumber;
      R_slope1: BigNumber;
      R_slope2: BigNumber;
    }
  >;

  callStatic: {
    _R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _U_Optimal_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    _U_Optimal_inverted_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowRate(
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        U_optimal: BigNumber;
        R_base: BigNumber;
        R_slope1: BigNumber;
        R_slope2: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    _U_Optimal_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    _U_Optimal_inverted_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    calcBorrowRate(
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModelParameters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _R_base_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _R_slope1_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _R_slope2_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _U_Optimal_WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _U_Optimal_inverted_WAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBorrowRate(
      expectedLiquidity: BigNumberish,
      availableLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
