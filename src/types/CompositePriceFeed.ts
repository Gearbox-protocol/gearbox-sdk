/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PriceFeedParamsStruct = {
  priceFeed: AddressLike;
  stalenessPeriod: BigNumberish;
};

export type PriceFeedParamsStructOutput = [
  priceFeed: string,
  stalenessPeriod: bigint
] & { priceFeed: string; stalenessPeriod: bigint };

export interface CompositePriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decimals"
      | "description"
      | "latestRoundData"
      | "priceFeed0"
      | "priceFeed1"
      | "priceFeedType"
      | "skipCheck1"
      | "skipPriceCheck"
      | "stalenessPeriod0"
      | "stalenessPeriod1"
      | "targetFeedScale"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeed0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeed1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipCheck1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipPriceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stalenessPeriod0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stalenessPeriod1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetFeedScale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skipCheck1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skipPriceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalenessPeriod0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalenessPeriod1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetFeedScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface CompositePriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): CompositePriceFeed;
  waitForDeployment(): Promise<this>;

  interface: CompositePriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decimals: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint] & { answer: bigint }],
    "view"
  >;

  priceFeed0: TypedContractMethod<[], [string], "view">;

  priceFeed1: TypedContractMethod<[], [string], "view">;

  priceFeedType: TypedContractMethod<[], [bigint], "view">;

  skipCheck1: TypedContractMethod<[], [boolean], "view">;

  skipPriceCheck: TypedContractMethod<[], [boolean], "view">;

  stalenessPeriod0: TypedContractMethod<[], [bigint], "view">;

  stalenessPeriod1: TypedContractMethod<[], [bigint], "view">;

  targetFeedScale: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "latestRoundData"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint] & { answer: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceFeed0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeedType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "skipCheck1"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "skipPriceCheck"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "stalenessPeriod0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stalenessPeriod1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetFeedScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
