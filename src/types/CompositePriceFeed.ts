/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PriceFeedParamsStruct = {
  priceFeed: PromiseOrValue<string>;
  stalenessPeriod: PromiseOrValue<BigNumberish>;
};

export type PriceFeedParamsStructOutput = [string, number] & {
  priceFeed: string;
  stalenessPeriod: number;
};

export interface CompositePriceFeedInterface extends utils.Interface {
  functions: {
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "priceFeed0()": FunctionFragment;
    "priceFeed1()": FunctionFragment;
    "priceFeedType()": FunctionFragment;
    "skipCheck1()": FunctionFragment;
    "skipPriceCheck()": FunctionFragment;
    "stalenessPeriod0()": FunctionFragment;
    "stalenessPeriod1()": FunctionFragment;
    "targetFeedScale()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decimals"
      | "description"
      | "latestRoundData"
      | "priceFeed0"
      | "priceFeed1"
      | "priceFeedType"
      | "skipCheck1"
      | "skipPriceCheck"
      | "stalenessPeriod0"
      | "stalenessPeriod1"
      | "targetFeedScale"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeed0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeed1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipCheck1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipPriceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stalenessPeriod0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stalenessPeriod1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetFeedScale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skipCheck1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skipPriceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalenessPeriod0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stalenessPeriod1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetFeedScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface CompositePriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CompositePriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        answer: BigNumber;
      }
    >;

    priceFeed0(overrides?: CallOverrides): Promise<[string]>;

    priceFeed1(overrides?: CallOverrides): Promise<[string]>;

    priceFeedType(overrides?: CallOverrides): Promise<[number]>;

    skipCheck1(overrides?: CallOverrides): Promise<[boolean]>;

    skipPriceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    stalenessPeriod0(overrides?: CallOverrides): Promise<[number]>;

    stalenessPeriod1(overrides?: CallOverrides): Promise<[number]>;

    targetFeedScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      answer: BigNumber;
    }
  >;

  priceFeed0(overrides?: CallOverrides): Promise<string>;

  priceFeed1(overrides?: CallOverrides): Promise<string>;

  priceFeedType(overrides?: CallOverrides): Promise<number>;

  skipCheck1(overrides?: CallOverrides): Promise<boolean>;

  skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

  stalenessPeriod0(overrides?: CallOverrides): Promise<number>;

  stalenessPeriod1(overrides?: CallOverrides): Promise<number>;

  targetFeedScale(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        answer: BigNumber;
      }
    >;

    priceFeed0(overrides?: CallOverrides): Promise<string>;

    priceFeed1(overrides?: CallOverrides): Promise<string>;

    priceFeedType(overrides?: CallOverrides): Promise<number>;

    skipCheck1(overrides?: CallOverrides): Promise<boolean>;

    skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

    stalenessPeriod0(overrides?: CallOverrides): Promise<number>;

    stalenessPeriod1(overrides?: CallOverrides): Promise<number>;

    targetFeedScale(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed0(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed1(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedType(overrides?: CallOverrides): Promise<BigNumber>;

    skipCheck1(overrides?: CallOverrides): Promise<BigNumber>;

    skipPriceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    stalenessPeriod0(overrides?: CallOverrides): Promise<BigNumber>;

    stalenessPeriod1(overrides?: CallOverrides): Promise<BigNumber>;

    targetFeedScale(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skipCheck1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skipPriceCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stalenessPeriod0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stalenessPeriod1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetFeedScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
