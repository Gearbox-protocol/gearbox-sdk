/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAppCreditManagerInterface extends ethers.utils.Interface {
  functions: {
    "addCollateral(address,address,uint256)": FunctionFragment;
    "calcRepayAmount(address,bool)": FunctionFragment;
    "closeCreditAccount(address,uint256)": FunctionFragment;
    "getCreditAccountOrRevert(address)": FunctionFragment;
    "increaseBorrowedAmount(uint256)": FunctionFragment;
    "openCreditAccount(uint256,address,uint256,uint256)": FunctionFragment;
    "repayCreditAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRepayAmount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountOrRevert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBorrowedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAppCreditManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAppCreditManagerInterface;

  functions: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeCreditAccount(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeCreditAccount(address,uint256)"(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCollateral(address,address,uint256)"(
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcRepayAmount(
    borrower: string,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcRepayAmount(address,bool)"(
    borrower: string,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeCreditAccount(
    to: string,
    amountOutTolerance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeCreditAccount(address,uint256)"(
    to: string,
    amountOutTolerance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCreditAccountOrRevert(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreditAccountOrRevert(address)"(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseBorrowedAmount(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseBorrowedAmount(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openCreditAccount(
    amount: BigNumberish,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openCreditAccount(uint256,address,uint256,uint256)"(
    amount: BigNumberish,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayCreditAccount(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayCreditAccount(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeCreditAccount(address,uint256)"(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccount(to: string, overrides?: CallOverrides): Promise<void>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeCreditAccount(address,uint256)"(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayCreditAccount(to: string, overrides?: Overrides): Promise<BigNumber>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCollateral(address,address,uint256)"(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcRepayAmount(address,bool)"(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeCreditAccount(address,uint256)"(
      to: string,
      amountOutTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditAccountOrRevert(address)"(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseBorrowedAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openCreditAccount(uint256,address,uint256,uint256)"(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayCreditAccount(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
