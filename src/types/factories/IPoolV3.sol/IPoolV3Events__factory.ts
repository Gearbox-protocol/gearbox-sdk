/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPoolV3Events,
  IPoolV3EventsInterface,
} from "../../IPoolV3.sol/IPoolV3Events";

const _abi = [
  {
    type: "event",
    name: "AddCreditManager",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Borrow",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "creditAccount",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IncurUncoveredLoss",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "loss",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Refer",
    inputs: [
      {
        name: "onBehalfOf",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "referralCode",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Repay",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "borrowedAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "profit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "loss",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetCreditManagerDebtLimit",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newLimit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetInterestRateModel",
    inputs: [
      {
        name: "newInterestRateModel",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetPoolQuotaKeeper",
    inputs: [
      {
        name: "newPoolQuotaKeeper",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetTotalDebtLimit",
    inputs: [
      {
        name: "limit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetWithdrawFee",
    inputs: [
      {
        name: "fee",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

export class IPoolV3Events__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolV3EventsInterface {
    return new utils.Interface(_abi) as IPoolV3EventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPoolV3Events {
    return new Contract(address, _abi, signerOrProvider) as IPoolV3Events;
  }
}
