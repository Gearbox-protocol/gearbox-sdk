/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  FarmAccounting,
  FarmAccountingInterface,
} from "../FarmAccounting";

const _abi = [
  {
    type: "error",
    name: "AmountTooLarge",
    inputs: [],
  },
  {
    type: "error",
    name: "DurationTooLarge",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroDuration",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220aa0282c494da759d0a5d237b0e78c4654b93035aa7031973c744fcf85d4d5c8664736f6c63430008110033";

type FarmAccountingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FarmAccountingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FarmAccounting__factory extends ContractFactory {
  constructor(...args: FarmAccountingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FarmAccounting> {
    return super.deploy(overrides || {}) as Promise<FarmAccounting>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FarmAccounting {
    return super.attach(address) as FarmAccounting;
  }
  override connect(signer: Signer): FarmAccounting__factory {
    return super.connect(signer) as FarmAccounting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FarmAccountingInterface {
    return new utils.Interface(_abi) as FarmAccountingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FarmAccounting {
    return new Contract(address, _abi, signerOrProvider) as FarmAccounting;
  }
}
