/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IRedstonePriceFeedExceptions,
  IRedstonePriceFeedExceptionsInterface,
} from "../../RedstonePriceFeed.sol/IRedstonePriceFeedExceptions";

const _abi = [
  {
    type: "error",
    name: "DataPackageTimestampIncorrect",
    inputs: [],
  },
  {
    type: "error",
    name: "DuplicateSignersException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectSignersThresholdException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEnoughSignersException",
    inputs: [],
  },
  {
    type: "error",
    name: "RedstonePayloadTimestampIncorrect",
    inputs: [],
  },
] as const;

export class IRedstonePriceFeedExceptions__factory {
  static readonly abi = _abi;
  static createInterface(): IRedstonePriceFeedExceptionsInterface {
    return new utils.Interface(_abi) as IRedstonePriceFeedExceptionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRedstonePriceFeedExceptions {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IRedstonePriceFeedExceptions;
  }
}
