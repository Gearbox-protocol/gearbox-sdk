/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICreditFacadeV2,
  ICreditFacadeV2Interface,
} from "../../ICreditFacadeV2.sol/ICreditFacadeV2";

const _abi = [
  {
    type: "function",
    name: "addCollateral",
    inputs: [
      {
        name: "onBehalfOf",
        type: "address",
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "approveAccountTransfer",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "state",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blacklistHelper",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "calcCreditAccountHealthFactor",
    inputs: [
      {
        name: "creditAccount",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "hf",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "calcTotalValue",
    inputs: [
      {
        name: "creditAccount",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "total",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "twv",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "closeCreditAccount",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "closeCreditAccount",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "convertWETH",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "creditManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ICreditManagerV2",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "degenNFT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "hasOpenedCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isBlacklistableUnderlying",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isTokenAllowed",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "limits",
    inputs: [],
    outputs: [
      {
        name: "minBorrowedAmount",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "maxBorrowedAmount",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "liquidateCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "liquidateCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "convertWETH",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "liquidateExpiredCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "liquidateExpiredCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "skipTokenMask",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "convertWETH",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "lossParams",
    inputs: [],
    outputs: [
      {
        name: "currentCumulativeLoss",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "maxCumulativeLoss",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "multicall",
    inputs: [
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "openCreditAccount",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "onBehalfOf",
        type: "address",
        internalType: "address",
      },
      {
        name: "leverageFactor",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "referralCode",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "openCreditAccountMulticall",
    inputs: [
      {
        name: "borrowedAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "onBehalfOf",
        type: "address",
        internalType: "address",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "referralCode",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "params",
    inputs: [],
    outputs: [
      {
        name: "maxBorrowedAmountPerBlock",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "isIncreaseDebtForbidden",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "expirationDate",
        type: "uint40",
        internalType: "uint40",
      },
      {
        name: "emergencyLiquidationDiscount",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalDebt",
    inputs: [],
    outputs: [
      {
        name: "currentTotalDebt",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "totalDebtLimit",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferAccountOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transfersAllowed",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "underlying",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AddCollateral",
    inputs: [
      {
        name: "onBehalfOf",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BlacklistHelperSet",
    inputs: [
      {
        name: "blacklistHelper",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "CloseCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "DecreaseBorrowedAmount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IncreaseBorrowedAmount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IncurLossOnLiquidation",
    inputs: [
      {
        name: "loss",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiquidateCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "liquidator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "remainingFunds",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiquidateExpiredCreditAccount",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "liquidator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "remainingFunds",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MultiCallFinished",
    inputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "MultiCallStarted",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OpenCreditAccount",
    inputs: [
      {
        name: "onBehalfOf",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "creditAccount",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "borrowAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "referralCode",
        type: "uint16",
        indexed: false,
        internalType: "uint16",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokenDisabled",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokenEnabled",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferAccount",
    inputs: [
      {
        name: "oldOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferAccountAllowed",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "state",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UnderlyingSentToBlacklistHelper",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AccountTransferNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "ActionProhibitedWithForbiddenTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "AdaptersOrCreditFacadeOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "AllowanceFailedException",
    inputs: [],
  },
  {
    type: "error",
    name: "BalanceLessThanMinimumDesiredException",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "BorrowAmountOutOfLimitsException",
    inputs: [],
  },
  {
    type: "error",
    name: "BorrowedBlockLimitException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantLiquidateNonExpiredException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantLiquidateWithSuchHealthFactorException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantTransferLiquidatableAccountException",
    inputs: [],
  },
  {
    type: "error",
    name: "CreditConfiguratorOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "CreditFacadeOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "ExpectedBalancesAlreadySetException",
    inputs: [],
  },
  {
    type: "error",
    name: "ForbiddenDuringClosureException",
    inputs: [],
  },
  {
    type: "error",
    name: "HasNoOpenedAccountException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectCallDataException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncreaseAndDecreaseForbiddenInOneCallException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncreaseDebtForbiddenException",
    inputs: [],
  },
  {
    type: "error",
    name: "LiquiditySanityCheckException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedForBlacklistedAddressException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedInWhitelistedMode",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedWhenNotExpirableException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEnoughCollateralException",
    inputs: [],
  },
  {
    type: "error",
    name: "OpenAccountNotAllowedAfterExpirationException",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyLockException",
    inputs: [],
  },
  {
    type: "error",
    name: "TargetContractNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenAlreadyAddedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TooManyEnabledTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "TooManyTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownMethodException",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroAddressOrUserAlreadyHasAccountException",
    inputs: [],
  },
] as const;

export class ICreditFacadeV2__factory {
  static readonly abi = _abi;
  static createInterface(): ICreditFacadeV2Interface {
    return new utils.Interface(_abi) as ICreditFacadeV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICreditFacadeV2 {
    return new Contract(address, _abi, signerOrProvider) as ICreditFacadeV2;
  }
}
