/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICreditFacadeV2Exceptions,
  ICreditFacadeV2ExceptionsInterface,
} from "../../ICreditFacadeV2.sol/ICreditFacadeV2Exceptions";

const _abi = [
  {
    type: "error",
    name: "AccountTransferNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "ActionProhibitedWithForbiddenTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "AdaptersOrCreditFacadeOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "AllowanceFailedException",
    inputs: [],
  },
  {
    type: "error",
    name: "BalanceLessThanMinimumDesiredException",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "BorrowAmountOutOfLimitsException",
    inputs: [],
  },
  {
    type: "error",
    name: "BorrowedBlockLimitException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantLiquidateNonExpiredException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantLiquidateWithSuchHealthFactorException",
    inputs: [],
  },
  {
    type: "error",
    name: "CantTransferLiquidatableAccountException",
    inputs: [],
  },
  {
    type: "error",
    name: "CreditConfiguratorOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "CreditFacadeOnlyException",
    inputs: [],
  },
  {
    type: "error",
    name: "ExpectedBalancesAlreadySetException",
    inputs: [],
  },
  {
    type: "error",
    name: "ForbiddenDuringClosureException",
    inputs: [],
  },
  {
    type: "error",
    name: "HasNoOpenedAccountException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectCallDataException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncreaseAndDecreaseForbiddenInOneCallException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncreaseDebtForbiddenException",
    inputs: [],
  },
  {
    type: "error",
    name: "LiquiditySanityCheckException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedForBlacklistedAddressException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedInWhitelistedMode",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedWhenNotExpirableException",
    inputs: [],
  },
  {
    type: "error",
    name: "NotEnoughCollateralException",
    inputs: [],
  },
  {
    type: "error",
    name: "OpenAccountNotAllowedAfterExpirationException",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyLockException",
    inputs: [],
  },
  {
    type: "error",
    name: "TargetContractNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenAlreadyAddedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenNotAllowedException",
    inputs: [],
  },
  {
    type: "error",
    name: "TooManyEnabledTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "TooManyTokensException",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownMethodException",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroAddressOrUserAlreadyHasAccountException",
    inputs: [],
  },
] as const;

export class ICreditFacadeV2Exceptions__factory {
  static readonly abi = _abi;
  static createInterface(): ICreditFacadeV2ExceptionsInterface {
    return new Interface(_abi) as ICreditFacadeV2ExceptionsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICreditFacadeV2Exceptions {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICreditFacadeV2Exceptions;
  }
}
