/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CalldataExtractor,
  CalldataExtractorInterface,
} from "../CalldataExtractor";

const _abi = [
  {
    type: "function",
    name: "extractTimestampsAndAssertAllAreEqual",
    inputs: [],
    outputs: [
      {
        name: "extractedTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "CalldataMustHaveValidPayload",
    inputs: [],
  },
  {
    type: "error",
    name: "CalldataOverOrUnderFlow",
    inputs: [],
  },
  {
    type: "error",
    name: "DataPackageTimestampMustNotBeZero",
    inputs: [],
  },
  {
    type: "error",
    name: "DataPackageTimestampsMustBeEqual",
    inputs: [],
  },
  {
    type: "error",
    name: "EachSignerMustProvideTheSameValue",
    inputs: [],
  },
  {
    type: "error",
    name: "EmptyCalldataPointersArr",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectUnsignedMetadataSize",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientNumberOfUniqueSigners",
    inputs: [
      {
        name: "receivedSignersCount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "requiredSignersCount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidCalldataPointer",
    inputs: [],
  },
  {
    type: "error",
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    inputs: [],
  },
  {
    type: "error",
    name: "SignerNotAuthorised",
    inputs: [
      {
        name: "receivedSigner",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x608080604052346100165761049c908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b6000803560e01c6355a547d51461002d57600080fd5b3461042757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104275780926602ed57011e0000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013516036104005750366029116103d85762ffffff93847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7360135169460038601958681116103ac57600c81018097116103ac57600e81019687811161022c5736881161038457602c820180911161022c57361061035c5736037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4013561ffff16958615610334579083915b878310610145576020878751908152f35b60418101808211610308576061820180911161030857610165903661042a565b967ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8801978089116102dc578390351663ffffffff602099351689018099116102dc5788810298818a04149015171561030857604e9081890189116102dc57606883018084116102b0576101e065ffffffffffff913661042a565b351690811561028857806102585750975b82010180911161022c57917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461022c5760010191610134565b6024856011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b989089146101f1578588517fd9d1f465000000000000000000000000000000000000000000000000000000008152fd5b8689517f336dc9d0000000000000000000000000000000000000000000000000000000008152fd5b6024886011897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024876011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024866011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8285517f8552ff3c000000000000000000000000000000000000000000000000000000008152fd5b8285517f5796f78a000000000000000000000000000000000000000000000000000000008152fd5b8386517fc30a7bd7000000000000000000000000000000000000000000000000000000008152fd5b6024846011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8382517f5796f78a000000000000000000000000000000000000000000000000000000008152fd5b807fe7764c9e00000000000000000000000000000000000000000000000000000000869252fd5b80fd5b9190820391821161043757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212202861d34e0b660ed45b74035a93472e28843fbe448d94620cfba11ae7f69bde1264736f6c63430008110033";

type CalldataExtractorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalldataExtractorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalldataExtractor__factory extends ContractFactory {
  constructor(...args: CalldataExtractorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CalldataExtractor> {
    return super.deploy(overrides || {}) as Promise<CalldataExtractor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CalldataExtractor {
    return super.attach(address) as CalldataExtractor;
  }
  override connect(signer: Signer): CalldataExtractor__factory {
    return super.connect(signer) as CalldataExtractor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalldataExtractorInterface {
    return new utils.Interface(_abi) as CalldataExtractorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataExtractor {
    return new Contract(address, _abi, signerOrProvider) as CalldataExtractor;
  }
}
