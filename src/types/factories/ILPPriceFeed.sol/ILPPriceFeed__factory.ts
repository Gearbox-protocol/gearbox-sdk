/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILPPriceFeed,
  ILPPriceFeedInterface,
} from "../../ILPPriceFeed.sol/ILPPriceFeed";

const _abi = [
  {
    type: "function",
    name: "allowBoundsUpdate",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "description",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "forbidBoundsUpdate",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAggregatePrice",
    inputs: [],
    outputs: [
      {
        name: "answer",
        type: "int256",
        internalType: "int256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLPExchangeRate",
    inputs: [],
    outputs: [
      {
        name: "exchangeRate",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getScale",
    inputs: [],
    outputs: [
      {
        name: "scale",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lastBoundsUpdate",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint40",
        internalType: "uint40",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "latestRoundData",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint80",
        internalType: "uint80",
      },
      {
        name: "answer",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "updatedAt",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint80",
        internalType: "uint80",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lowerBound",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lpContract",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lpToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "priceFeedType",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum PriceFeedType",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "priceOracle",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setLimiter",
    inputs: [
      {
        name: "newLowerBound",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "skipPriceCheck",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updateBounds",
    inputs: [
      {
        name: "updateData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateBoundsAllowed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "upperBound",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "SetBounds",
    inputs: [
      {
        name: "lowerBound",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "upperBound",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SetUpdateBoundsAllowed",
    inputs: [
      {
        name: "allowed",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ExchangeRateOutOfBoundsException",
    inputs: [],
  },
  {
    type: "error",
    name: "LowerBoundCantBeZeroException",
    inputs: [],
  },
  {
    type: "error",
    name: "ReserveFeedMustNotBeSelfException",
    inputs: [],
  },
  {
    type: "error",
    name: "UpdateBoundsBeforeCooldownException",
    inputs: [],
  },
  {
    type: "error",
    name: "UpdateBoundsNotAllowedException",
    inputs: [],
  },
] as const;

export class ILPPriceFeed__factory {
  static readonly abi = _abi;
  static createInterface(): ILPPriceFeedInterface {
    return new utils.Interface(_abi) as ILPPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILPPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as ILPPriceFeed;
  }
}
