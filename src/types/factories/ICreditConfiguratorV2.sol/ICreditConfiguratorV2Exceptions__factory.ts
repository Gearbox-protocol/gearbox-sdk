/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICreditConfiguratorV2Exceptions,
  ICreditConfiguratorV2ExceptionsInterface,
} from "../../ICreditConfiguratorV2.sol/ICreditConfiguratorV2Exceptions";

const _abi = [
  {
    type: "error",
    name: "AdapterUsedTwiceException",
    inputs: [],
  },
  {
    type: "error",
    name: "ContractIsNotAnAllowedAdapterException",
    inputs: [],
  },
  {
    type: "error",
    name: "CreditManagerOrFacadeUsedAsTargetContractsException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncompatibleContractException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectExpirationDateException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectFeesException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectLimitsException",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectLiquidationThresholdException",
    inputs: [],
  },
  {
    type: "error",
    name: "SetLTForUnderlyingException",
    inputs: [],
  },
] as const;

export class ICreditConfiguratorV2Exceptions__factory {
  static readonly abi = _abi;
  static createInterface(): ICreditConfiguratorV2ExceptionsInterface {
    return new Interface(_abi) as ICreditConfiguratorV2ExceptionsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICreditConfiguratorV2Exceptions {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICreditConfiguratorV2Exceptions;
  }
}
