/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBalancerV2VaultAdapter,
  IBalancerV2VaultAdapterInterface,
} from "../../IBalancerV2VaultAdapter.sol/IBalancerV2VaultAdapter";

const _abi = [
  {
    type: "function",
    name: "_gearboxAdapterType",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum AdapterType",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "_gearboxAdapterVersion",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "addressProvider",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "batchSwap",
    inputs: [
      {
        name: "kind",
        type: "uint8",
        internalType: "enum SwapKind",
      },
      {
        name: "swaps",
        type: "tuple[]",
        internalType: "struct BatchSwapStep[]",
        components: [
          {
            name: "poolId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "assetInIndex",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "assetOutIndex",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "userData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "assets",
        type: "address[]",
        internalType: "contract IAsset[]",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct FundManagement",
        components: [
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromInternalBalance",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "toInternalBalance",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "limits",
        type: "int256[]",
        internalType: "int256[]",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "creditManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "exitPool",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address payable",
      },
      {
        name: "request",
        type: "tuple",
        internalType: "struct ExitPoolRequest",
        components: [
          {
            name: "assets",
            type: "address[]",
            internalType: "contract IAsset[]",
          },
          {
            name: "minAmountsOut",
            type: "uint256[]",
            internalType: "uint256[]",
          },
          {
            name: "userData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "toInternalBalance",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exitPoolSingleAsset",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "assetOut",
        type: "address",
        internalType: "contract IAsset",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minAmountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exitPoolSingleAssetDiff",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "assetOut",
        type: "address",
        internalType: "contract IAsset",
      },
      {
        name: "leftoverAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minRateRAY",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "joinPool",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "request",
        type: "tuple",
        internalType: "struct JoinPoolRequest",
        components: [
          {
            name: "assets",
            type: "address[]",
            internalType: "contract IAsset[]",
          },
          {
            name: "maxAmountsIn",
            type: "uint256[]",
            internalType: "uint256[]",
          },
          {
            name: "userData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "fromInternalBalance",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "joinPoolSingleAsset",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "assetIn",
        type: "address",
        internalType: "contract IAsset",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minAmountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "joinPoolSingleAssetDiff",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "assetIn",
        type: "address",
        internalType: "contract IAsset",
      },
      {
        name: "leftoverAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minRateRAY",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "poolStatus",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum PoolStatus",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setPoolStatus",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "newStatus",
        type: "uint8",
        internalType: "enum PoolStatus",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swap",
    inputs: [
      {
        name: "singleSwap",
        type: "tuple",
        internalType: "struct SingleSwap",
        components: [
          {
            name: "poolId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "kind",
            type: "uint8",
            internalType: "enum SwapKind",
          },
          {
            name: "assetIn",
            type: "address",
            internalType: "contract IAsset",
          },
          {
            name: "assetOut",
            type: "address",
            internalType: "contract IAsset",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "userData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct FundManagement",
        components: [
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromInternalBalance",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "toInternalBalance",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "limit",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapDiff",
    inputs: [
      {
        name: "singleSwapDiff",
        type: "tuple",
        internalType: "struct SingleSwapDiff",
        components: [
          {
            name: "poolId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "leftoverAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "assetIn",
            type: "address",
            internalType: "contract IAsset",
          },
          {
            name: "assetOut",
            type: "address",
            internalType: "contract IAsset",
          },
          {
            name: "userData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "limitRateRAY",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "tokensToEnable",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokensToDisable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "targetContract",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "SetPoolStatus",
    inputs: [
      {
        name: "poolId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "newStatus",
        type: "uint8",
        indexed: false,
        internalType: "enum PoolStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "PoolNotSupportedException",
    inputs: [],
  },
] as const;

export class IBalancerV2VaultAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IBalancerV2VaultAdapterInterface {
    return new Interface(_abi) as IBalancerV2VaultAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBalancerV2VaultAdapter {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IBalancerV2VaultAdapter;
  }
}
