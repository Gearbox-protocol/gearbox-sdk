/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConvexV1ClaimZapAdapter,
  ConvexV1ClaimZapAdapterInterface,
} from "../../../../../contracts/adapters/convex/ConvexV1_ClaimZap.sol/ConvexV1ClaimZapAdapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_creditManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_claimZap",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "TokenIsNotInAllowedList",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "_gearboxAdapterType",
    outputs: [
      {
        internalType: "enum AdapterType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_gearboxAdapterVersion",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "rewardContracts",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "extraRewardContracts",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokenRewardContracts",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokenRewardTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "creditFacade",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creditManager",
    outputs: [
      {
        internalType: "contract ICreditManagerV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "crv",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cvx",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "targetContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610e53380380610e538339818101604052604081101561003357600080fd5b50805160209091015181816001600160a01b038216158061005b57506001600160a01b038116155b1561007957604051635919af9760e11b815260040160405180910390fd5b6001600160a01b038216608081905260408051632f7a188160e01b81529051632f7a1881916004808201926020929091908290030181865afa1580156100c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e79190610106565b6001600160a01b0390811660a0521660c0525050600160005550610136565b60006020828403121561011857600080fd5b81516001600160a01b038116811461012f57600080fd5b9392505050565b60805160a05160c051610cd3610180600039600081816102920152818161040601526104900152600060920152600081816102b90152818161030e0152610b820152610cd36000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063923c1d611161005b578063923c1d6114610285578063bd90df701461028d578063c12c21c0146102b4578063ce30bbdb146102db57600080fd5b80632f7a18811461008d5780635a7b87f2146100dd5780636a4874a11461025e57806378aa73a414610266575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61025c60048036036101208110156100f457600080fd5b81019060208101813564010000000081111561010f57600080fd5b82018360208201111561012157600080fd5b8035906020019184602083028401116401000000008311171561014357600080fd5b91939092909160208101903564010000000081111561016157600080fd5b82018360208201111561017357600080fd5b8035906020019184602083028401116401000000008311171561019557600080fd5b9193909290916020810190356401000000008111156101b357600080fd5b8201836020820111156101c557600080fd5b803590602001918460208302840111640100000000831117156101e757600080fd5b91939092909160208101903564010000000081111561020557600080fd5b82018360208201111561021757600080fd5b8035906020019184602083028401116401000000008311171561023957600080fd5b91935091508035906020810135906040810135906060810135906080013561030a565b005b6100b4610402565b61026e600181565b6040805161ffff9092168252519081900360200190f35b6100b461048c565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6102e3600d81565b6040518082600e8111156102f9576102f9610c3f565b815260200191505060405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e958b704336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d60208110156103ae57600080fd5b505190506103bd818f8f6104f9565b6103c8818d8d61086c565b6103d5818b8b8b8b6109cd565b6103e6816103e1610402565b610af4565b6103f2816103e161048c565b5050505050505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636a4874a16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046f573d6000803e3d6000fd5b505050506040513d602081101561048557600080fd5b5051919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663923c1d616040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046f573d6000803e3d6000fd5b600081815b8181101561086457600085858381811061051a5761051a610c6e565b604080517f7050ccd900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301526001602483015291516020938402959095013590911694508493637050ccd993506044808301939282900301816000875af11580156105a1573d6000803e3d6000fd5b505050506040513d60208110156105b757600080fd5b5050604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163f7c618c19160048083019260209291908290030181865afa158015610624573d6000803e3d6000fd5b505050506040513d602081101561063a57600080fd5b5051604080517f40c354460000000000000000000000000000000000000000000000000000000081526000600482018190529151929650909173ffffffffffffffffffffffffffffffffffffffff8416916340c354469160248083019260209291908290030181865afa1580156106b5573d6000803e3d6000fd5b505050506040513d60208110156106cb57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81161561085a578073ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d602081101561074c57600080fd5b5051945061075a8886610af4565b60008273ffffffffffffffffffffffffffffffffffffffff166340c3544660016040518263ffffffff1660e01b815260040180828152602001915050602060405180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d60208110156107c957600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811615610858578073ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d602081101561084a57600080fd5b505195506108588987610af4565b505b50506001016104fe565b505050505050565b600081815b818110156108645784848281811061088b5761088b610c6e565b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d602081101561090857600080fd5b5051925084848281811061091e5761091e610c6e565b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c00007b0876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156109a357600080fd5b505af11580156109b7573d6000803e3d6000fd5b505050506109c58684610af4565b600101610871565b600083815b81811015610aea578484828181106109ec576109ec610c6e565b9050602002013573ffffffffffffffffffffffffffffffffffffffff169250868682818110610a1d57610a1d610c6e565b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b09169589856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610ac057600080fd5b505af1158015610ad4573d6000803e3d6000fd5b50505050610ae28884610af4565b6001016109d2565b5050505050505050565b60018173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d6020811015610b7857600080fd5b50511115610c3b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166351e3f16083836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610c2757600080fd5b505af1158015610864573d6000803e3d6000fd5b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122040924cf7a5e11152c944cdd36f9e30e5f8d961098d2ba0ed02dcff6f4a047a2a64736f6c634300080a0033";

type ConvexV1ClaimZapAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexV1ClaimZapAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexV1ClaimZapAdapter__factory extends ContractFactory {
  constructor(...args: ConvexV1ClaimZapAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _creditManager: string,
    _claimZap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConvexV1ClaimZapAdapter> {
    return super.deploy(
      _creditManager,
      _claimZap,
      overrides || {}
    ) as Promise<ConvexV1ClaimZapAdapter>;
  }
  override getDeployTransaction(
    _creditManager: string,
    _claimZap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _creditManager,
      _claimZap,
      overrides || {}
    );
  }
  override attach(address: string): ConvexV1ClaimZapAdapter {
    return super.attach(address) as ConvexV1ClaimZapAdapter;
  }
  override connect(signer: Signer): ConvexV1ClaimZapAdapter__factory {
    return super.connect(signer) as ConvexV1ClaimZapAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexV1ClaimZapAdapterInterface {
    return new utils.Interface(_abi) as ConvexV1ClaimZapAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexV1ClaimZapAdapter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConvexV1ClaimZapAdapter;
  }
}
