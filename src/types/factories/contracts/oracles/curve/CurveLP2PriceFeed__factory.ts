/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveLP2PriceFeed,
  CurveLP2PriceFeedInterface,
} from "../../../../contracts/oracles/curve/CurveLP2PriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_curvePool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed2",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeExpcetion",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract ACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "curvePool",
    outputs: [
      {
        internalType: "contract ICurvePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimalsDivider",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed1",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed2",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101406040523480156200001257600080fd5b506040516200171338038062001713833981016040819052620000359162000389565b6000805460ff191690558484828260c882826001600160a01b0381166200006f57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d49190620004b3565b6001600160a01b0316608052508051620000f6906002906020840190620002b0565b505060a052506001600160a01b0382166200012457604051635919af9760e11b815260040160405180910390fd5b6001600160a01b03821660c0819052670de0b6b3a764000060e05260408051630176f71760e71b815290516000929163bb7b8b809160048083019260209291908290030181865afa1580156200017e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a49190620004d8565b9050620001b18162000210565b505050506001600160a01b0383161580620001d357506001600160a01b038216155b15620001f257604051635919af9760e11b815260040160405180910390fd5b506001600160a01b0391821661010052166101205250620005a59050565b806200022f576040516309aadd6f60e41b815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de28162000261816200027c565b6040805192835260208301919091520160405180910390a150565b60a0516000906127109062000292908262000508565b6200029e908462000523565b620002aa919062000545565b92915050565b828054620002be9062000568565b90600052602060002090601f016020900481019282620002e257600085556200032d565b82601f10620002fd57805160ff19168380011785556200032d565b828001600101855582156200032d579182015b828111156200032d57825182559160200191906001019062000310565b506200033b9291506200033f565b5090565b5b808211156200033b576000815560010162000340565b80516001600160a01b03811681146200036e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215620003a257600080fd5b620003ad8662000356565b94506020620003be81880162000356565b9450620003ce6040880162000356565b9350620003de6060880162000356565b60808801519093506001600160401b0380821115620003fc57600080fd5b818901915089601f8301126200041157600080fd5b81518181111562000426576200042662000373565b604051601f8201601f19908116603f0116810190838211818310171562000451576200045162000373565b816040528281528c868487010111156200046a57600080fd5b600093505b828410156200048e57848401860151818501870152928501926200046f565b82841115620004a05760008684830101525b8096505050505050509295509295909350565b600060208284031215620004c657600080fd5b620004d18262000356565b9392505050565b600060208284031215620004eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156200051e576200051e620004f2565b500190565b6000816000190483118215151615620005405762000540620004f2565b500290565b6000826200056357634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200057d57607f821691505b602082108114156200059f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516110e66200062d6000396000818161034101526107c80152600081816102f701526107190152600081816102d00152610923015260008181610195015261088701526000818161015b0152610b150152600081816102a90152818161039901528181610515015261064d01526110e66000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80639a6fc8f5116100cd578063b09ad8a011610081578063d62ada1111610066578063d62ada1114610334578063e5693f411461033c578063feaf968c1461036357600080fd5b8063b09ad8a014610319578063bc489a651461032157600080fd5b8063a50cf2c8116100b2578063a50cf2c8146102a4578063a834559e146102cb578063ab0ca0e1146102f257600080fd5b80639a6fc8f514610251578063a384d6ff1461029b57600080fd5b80633fd0875f116101245780635c975abb116101095780635c975abb1461021d5780637284e416146102345780638456cb591461024957600080fd5b80633fd0875f1461020057806354fd4d501461021557600080fd5b806312b495a814610156578063218751b214610190578063313ce567146101dc5780633f4ba83a146101f6575b600080fd5b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610187565b6101e4600881565b60405160ff9091168152602001610187565b6101fe61036b565b005b610208600281565b6040516101879190610cd5565b61017d600181565b60005460ff165b6040519015158152602001610187565b61023c610459565b6040516101879190610d16565b6101fe6104e7565b61026461025f366004610da1565b6105d3565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610187565b61017d60015481565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b61017d61060d565b6101fe61032f366004610dc5565b61061f565b610224600181565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b61026461070f565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa1580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190610dde565b61044f576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610457610965565b565b6002805461046690610e00565b80601f016020809104026020016040519081016040528092919081815260200182805461049290610e00565b80156104df5780601f106104b4576101008083540402835291602001916104df565b820191906000526020600020905b8154815290600101906020018083116104c257829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610dde565b6105cb576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610457610a4b565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061061a600154610b0b565b905090565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190610dde565b610703576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61070c81610b54565b50565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a69190610e54565b9398509196509450925090506107be85858484610bd6565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190610e54565b9450945094509450945061086b85858484610bd6565b88841215610883578499508398508297508196508095505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190610eac565b905061091f81610c71565b90507f000000000000000000000000000000000000000000000000000000000000000061094c828c610ef4565b6109569190610fdf565b99505050505050509091929394565b60005460ff166109d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff1615610ab8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016109cd565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a213390565b6000612710610b3a7f000000000000000000000000000000000000000000000000000000000000000082611047565b610b44908461105f565b610b4e919061109c565b92915050565b80610b8b576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de281610bbb81610b0b565b6040805192835260208301919091520160405180910390a150565b60008313610c10576040517f56e05d2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8369ffffffffffffffffffff168169ffffffffffffffffffff161080610c34575081155b15610c6b576040517fb1cf675500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60015460009080831015610cb1576040517fb416da7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610cbc82610b0b565b905080841115610ccd579392505050565b509192915050565b6020810160068310610d10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b81811015610d4357858101830151858201604001528201610d27565b81811115610d55576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b69ffffffffffffffffffff8116811461070c57600080fd5b600060208284031215610db357600080fd5b8135610dbe81610d89565b9392505050565b600060208284031215610dd757600080fd5b5035919050565b600060208284031215610df057600080fd5b81518015158114610dbe57600080fd5b600181811c90821680610e1457607f821691505b60208210811415610e4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a08688031215610e6c57600080fd5b8551610e7781610d89565b809550506020860151935060408601519250606086015191506080860151610e9e81610d89565b809150509295509295909350565b600060208284031215610ebe57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615610f3557610f35610ec5565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615610f7057610f70610ec5565b60008712925087820587128484161615610f8c57610f8c610ec5565b87850587128184161615610fa257610fa2610ec5565b505050929093029392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610fee57610fee610fb0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561104257611042610ec5565b500590565b6000821982111561105a5761105a610ec5565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561109757611097610ec5565b500290565b6000826110ab576110ab610fb0565b50049056fea2646970667358221220ca5730f8ac976a41fd1283a55d712276536b576394940abc65027e8592280cc364736f6c634300080a0033";

type CurveLP2PriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLP2PriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLP2PriceFeed__factory extends ContractFactory {
  constructor(...args: CurveLP2PriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addressProvider: string,
    _curvePool: string,
    _priceFeed1: string,
    _priceFeed2: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveLP2PriceFeed> {
    return super.deploy(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _description,
      overrides || {}
    ) as Promise<CurveLP2PriceFeed>;
  }
  override getDeployTransaction(
    addressProvider: string,
    _curvePool: string,
    _priceFeed1: string,
    _priceFeed2: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): CurveLP2PriceFeed {
    return super.attach(address) as CurveLP2PriceFeed;
  }
  override connect(signer: Signer): CurveLP2PriceFeed__factory {
    return super.connect(signer) as CurveLP2PriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLP2PriceFeedInterface {
    return new utils.Interface(_abi) as CurveLP2PriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLP2PriceFeed {
    return new Contract(address, _abi, signerOrProvider) as CurveLP2PriceFeed;
  }
}
