/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveLP4PriceFeed,
  CurveLP4PriceFeedInterface,
} from "../../../../contracts/oracles/curve/CurveLP4PriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_curvePool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed3",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed4",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceFeedRequiresAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeExpcetion",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract ACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "curvePool",
    outputs: [
      {
        internalType: "contract ICurvePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimalsDivider",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dependsOnAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed1",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed2",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed3",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed4",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101806040523480156200001257600080fd5b5060405162001982380380620019828339810160408190526200003591620003bc565b6000805460ff191690558686828260c882826001600160a01b0381166200006f57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d491906200050b565b6001600160a01b0316608052508051620000f6906002906020840190620002e3565b505060a052506001600160a01b0382166200012457604051635919af9760e11b815260040160405180910390fd5b6001600160a01b03821660c0819052670de0b6b3a764000060e05260408051630176f71760e71b815290516000929163bb7b8b809160048083019260209291908290030181865afa1580156200017e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a4919062000530565b9050620001b18162000243565b505050506001600160a01b0385161580620001d357506001600160a01b038416155b80620001e657506001600160a01b038316155b80620001f957506001600160a01b038216155b156200021857604051635919af9760e11b815260040160405180910390fd5b506001600160a01b039384166101005291831661012052821661014052166101605250620005fd9050565b8062000262576040516309aadd6f60e41b815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2816200029481620002af565b6040805192835260208301919091520160405180910390a150565b60a05160009061271090620002c5908262000560565b620002d190846200057b565b620002dd91906200059d565b92915050565b828054620002f190620005c0565b90600052602060002090601f01602090048101928262000315576000855562000360565b82601f106200033057805160ff191683800117855562000360565b8280016001018555821562000360579182015b828111156200036057825182559160200191906001019062000343565b506200036e92915062000372565b5090565b5b808211156200036e576000815560010162000373565b80516001600160a01b0381168114620003a157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215620003d857600080fd5b620003e38862000389565b96506020620003f4818a0162000389565b96506200040460408a0162000389565b95506200041460608a0162000389565b94506200042460808a0162000389565b93506200043460a08a0162000389565b60c08a01519093506001600160401b03808211156200045257600080fd5b818b0191508b601f8301126200046757600080fd5b8151818111156200047c576200047c620003a6565b604051601f8201601f19908116603f01168101908382118183101715620004a757620004a7620003a6565b816040528281528e86848701011115620004c057600080fd5b600093505b82841015620004e45784840186015181850187015292850192620004c5565b82841115620004f65760008684830101525b80965050505050505092959891949750929550565b6000602082840312156200051e57600080fd5b620005298262000389565b9392505050565b6000602082840312156200054357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156200057657620005766200054a565b500190565b60008160001904831182151516156200059857620005986200054a565b500290565b600082620005bb57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680620005d557607f821691505b60208210811415620005f757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051610160516112d9620006a9600039600081816102a601526109cc01526000818161024b015261090d0152600081816103c8015261084e01526000818161037e01526107a70152600081816103570152610b270152600081816101c60152610a8d01526000818161018c0152610d19015260008181610330015281816104200152818161059c01526106d401526112d96000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c8063975c19ab116100d8578063ab0ca0e11161008c578063d62ada1111610066578063d62ada11146103bb578063e5693f41146103c3578063feaf968c146103ea57600080fd5b8063ab0ca0e114610379578063b09ad8a0146103a0578063bc489a65146103a857600080fd5b8063a384d6ff116100bd578063a384d6ff14610322578063a50cf2c81461032b578063a834559e1461035257600080fd5b8063975c19ab146102d05780639a6fc8f5146102d857600080fd5b8063427cb6fe1161013a5780637284e416116101145780637284e4161461028c5780637aac1c48146102a15780638456cb59146102c857600080fd5b8063427cb6fe1461024657806354fd4d501461026d5780635c975abb1461027557600080fd5b8063313ce5671161016b578063313ce5671461020d5780633f4ba83a146102275780633fd0875f1461023157600080fd5b806312b495a814610187578063218751b2146101c1575b600080fd5b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b8565b610215600881565b60405160ff90911681526020016101b8565b61022f6103f2565b005b610239600481565b6040516101b89190610ec8565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b6101ae600181565b60005460ff165b60405190151581526020016101b8565b6102946104e0565b6040516101b89190610f09565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b61022f61056e565b61027c600081565b6102eb6102e6366004610f94565b61065a565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101b8565b6101ae60015481565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b6101ae610694565b61022f6103b6366004610fb8565b6106a6565b61027c600181565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b6102eb610796565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa15801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610fd1565b6104d6576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104de610b69565b565b600280546104ed90610ff3565b80601f016020809104026020016040519081016040528092919081815260200182805461051990610ff3565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa1580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190610fd1565b610652576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104de610c4f565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106a1600154610d0f565b905090565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190610fd1565b61078a576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079381610d58565b50565b6000806000806000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190611047565b939d50919b5099509750955061084c8a8a8989610dda565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611047565b9398509196509450925090506108f385858484610dda565b8884121561090b578499508398508297508196508095505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190611047565b9398509196509450925090506109b285858484610dda565b888412156109ca578499508398508297508196508095505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a599190611047565b939850919650945092509050610a7185858484610dda565b88841215610a89578499508398508297508196508095505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a919061109f565b9050610b2581610e75565b7f0000000000000000000000000000000000000000000000000000000000000000610b50828c6110e7565b610b5a91906111d2565b99505050505050509091929394565b60005460ff16610bda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff1615610cbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610bd1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c253390565b6000612710610d3e7f00000000000000000000000000000000000000000000000000000000000000008261123a565b610d489084611252565b610d52919061128f565b92915050565b80610d8f576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de281610dbf81610d0f565b6040805192835260208301919091520160405180910390a150565b60008313610e14576040517f56e05d2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8369ffffffffffffffffffff168169ffffffffffffffffffff161080610e38575081155b15610e6f576040517fb1cf675500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60015480821080610e8d5750610e8a81610d0f565b82115b15610ec4576040517fb416da7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6020810160068310610f03577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b81811015610f3657858101830151858201604001528201610f1a565b81811115610f48576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b69ffffffffffffffffffff8116811461079357600080fd5b600060208284031215610fa657600080fd5b8135610fb181610f7c565b9392505050565b600060208284031215610fca57600080fd5b5035919050565b600060208284031215610fe357600080fd5b81518015158114610fb157600080fd5b600181811c9082168061100757607f821691505b60208210811415611041577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a0868803121561105f57600080fd5b855161106a81610f7c565b80955050602086015193506040860151925060608601519150608086015161109181610f7c565b809150509295509295909350565b6000602082840312156110b157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615611128576111286110b8565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615611163576111636110b8565b6000871292508782058712848416161561117f5761117f6110b8565b87850587128184161615611195576111956110b8565b505050929093029392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826111e1576111e16111a3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615611235576112356110b8565b500590565b6000821982111561124d5761124d6110b8565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561128a5761128a6110b8565b500290565b60008261129e5761129e6111a3565b50049056fea2646970667358221220568f8a17335a6e4b76c7d89ca258a115043059ee630b3c95e1ae99cd90f1cb7464736f6c634300080a0033";

type CurveLP4PriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLP4PriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLP4PriceFeed__factory extends ContractFactory {
  constructor(...args: CurveLP4PriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addressProvider: string,
    _curvePool: string,
    _priceFeed1: string,
    _priceFeed2: string,
    _priceFeed3: string,
    _priceFeed4: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveLP4PriceFeed> {
    return super.deploy(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _priceFeed3,
      _priceFeed4,
      _description,
      overrides || {}
    ) as Promise<CurveLP4PriceFeed>;
  }
  override getDeployTransaction(
    addressProvider: string,
    _curvePool: string,
    _priceFeed1: string,
    _priceFeed2: string,
    _priceFeed3: string,
    _priceFeed4: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _priceFeed3,
      _priceFeed4,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): CurveLP4PriceFeed {
    return super.attach(address) as CurveLP4PriceFeed;
  }
  override connect(signer: Signer): CurveLP4PriceFeed__factory {
    return super.connect(signer) as CurveLP4PriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLP4PriceFeedInterface {
    return new utils.Interface(_abi) as CurveLP4PriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLP4PriceFeed {
    return new Contract(address, _abi, signerOrProvider) as CurveLP4PriceFeed;
  }
}
