/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NormalTokenPathFinder,
  NormalTokenPathFinderInterface,
} from "../../../contracts/pathfinder/NormalTokenPathFinder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapPathFinder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "PathDoesNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "UnknownToken",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedAdapterType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum SwapOperation",
        name: "",
        type: "uint8",
      },
    ],
    name: "UnsupportedSwapOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "creditAccount",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
            ],
            internalType: "struct Balance[]",
            name: "balances",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "underlying",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "connectors",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "adapters",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceUnderlyingRAY",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
        ],
        internalType: "struct ClosePathTask",
        name: "task",
        type: "tuple",
      },
    ],
    name: "findNormalTokenBestPath",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsage",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
            ],
            internalType: "struct MultiCall[]",
            name: "calls",
            type: "tuple[]",
          },
        ],
        internalType: "struct PathFinderResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "creditAccount",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
            ],
            internalType: "struct Balance[]",
            name: "balances",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "underlying",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "connectors",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "adapters",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceUnderlyingRAY",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
        ],
        internalType: "struct ClosePathTask",
        name: "task",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isConnector",
        type: "bool",
      },
    ],
    name: "findSwapQuote",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
            ],
            internalType: "struct MultiCall",
            name: "multiCall",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "found",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "gasUsage",
            type: "uint256",
          },
        ],
        internalType: "struct SwapQuote",
        name: "quote",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum SwapOperation",
            name: "swapOperation",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "creditAccount",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "connectors",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippage",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "externalSlippage",
            type: "bool",
          },
        ],
        internalType: "struct SwapTask",
        name: "swapTask",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "connectorIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "connectorCumulativeBalance",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
    ],
    name: "getComplexPairSwap",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
            ],
            internalType: "struct MultiCall",
            name: "multiCall",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "found",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "gasUsage",
            type: "uint256",
          },
        ],
        internalType: "struct SwapQuote",
        name: "connectorTokenInQuote",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
            ],
            internalType: "struct MultiCall",
            name: "multiCall",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "found",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "gasUsage",
            type: "uint256",
          },
        ],
        internalType: "struct SwapQuote",
        name: "connectorTokenOutQuote",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getGasPriceTokenOutRAY",
    outputs: [
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracle",
    outputs: [
      {
        internalType: "contract IPriceOracleV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapPathFinder",
    outputs: [
      {
        internalType: "contract SwapPathFinder",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620024fd380380620024fd8339810160408190526200003491620001cd565b6200003f3362000160565b6000829050806001600160a01b0316634c252f916040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a9919062000205565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000127919062000205565b600280546001600160a01b039283166001600160a01b0319918216179091556001805494909216931692909217909155506200022a9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001c857600080fd5b919050565b60008060408385031215620001e157600080fd5b620001ec83620001b0565b9150620001fc60208401620001b0565b90509250929050565b6000602082840312156200021857600080fd5b6200022382620001b0565b9392505050565b6080516122b06200024d6000396000818161015e015261055001526122b06000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063553f67ec116100815780639b59deba1161005b5780639b59deba146101d1578063c1a5de80146101f2578063f2fde38b1461021257600080fd5b8063553f67ec14610196578063715018a6146101a95780638da5cb5b146101b357600080fd5b806347c242db116100b257806347c242db146101385780634b57b0be1461015957806354fd4d501461018057600080fd5b806308d665d3146100ce5780632630c12f14610118575b600080fd5b6001546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6002546100ee9073ffffffffffffffffffffffffffffffffffffffff1681565b61014b610146366004611955565b610225565b60405161010f929190611b5c565b6100ee7f000000000000000000000000000000000000000000000000000000000000000081565b610188600281565b60405190815260200161010f565b6101886101a4366004611b81565b6104ca565b6101b16105c7565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100ee565b6101e46101df366004611cf7565b610654565b60405161010f929190611d52565b610205610200366004611d8a565b6108a5565b60405161010f9190611dbf565b6101b1610220366004611b81565b610ce9565b6102626040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b61029f6040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b6102a886610e19565b6102ea5785516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102e19190600401611ec6565b60405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff1663ebf9deac6103128888610eb2565b856103398a608001518a8151811061032c5761032c611ed4565b60200260200101516104ca565b6040518463ffffffff1660e01b815260040161035793929190611f54565b6000604051808303816000875af1158015610376573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103bc9190810190612034565b91508160400151156104c15760008483602001516103da91906121a7565b60015490915073ffffffffffffffffffffffffffffffffffffffff1663ebf9deac61040889848a8a15610fbe565b866104168b606001516104ca565b6040518463ffffffff1660e01b815260040161043493929190611f54565b6000604051808303816000875af1158015610453573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104999190810190612034565b915080836020015183602001516104b091906121bf565b6104ba91906121fc565b6020830152505b94509492505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff1663b66102df6105056b033b2e3c9fd0803ce8000000633b9aca006121bf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116602483015285166044820152606401602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190612237565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e1565b61065260006110d2565b565b6106916040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b60008061069e8686611147565b600154608088015160a08901516040517febf9deac00000000000000000000000000000000000000000000000000000000815293945073ffffffffffffffffffffffffffffffffffffffff9092169263ebf9deac92610704928692909190600401611f54565b6000604051808303816000875af1158015610723573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107699190810190612034565b606081015160408801519194509092508461089b5760608701515160005b818110156108985760006107c58a6060015183815181106107aa576107aa611ed4565b60200260200101518b6020015161126290919063ffffffff16565b90506000806107da8785858f60800151610225565b9150915080604001511561088a5782156107f55760006107f9565b614e205b8160600151836060015161080d91906121a7565b61081791906121a7565b606082015260a08c015161083290829089908c908a90611293565b1561088a578198508260001461084957600061084d565b614e205b8960600181815161085e91906121a7565b90525060608c015180518590811061087857610878611ed4565b60200260200101519750806060015195505b836001019350505050610787565b50505b5050935093915050565b6108c960405180606001604052806000815260200160008152602001606081525090565b604082015160208301515160608401515160008267ffffffffffffffff8111156108f5576108f5611752565b60405190808252806020026020018201604052801561093b57816020015b6040805180820190915260008152606060208201528152602001906001900390816109135790505b50905060008267ffffffffffffffff81111561095957610959611752565b604051908082528060200260200182016040528015610982578160200160208202803683370190505b50905060008060005b86811015610b515760008a6020015182815181106109ab576109ab611ed4565b60200260200101516000015190508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b485760608b01516109fb90826113b6565b15610a2a5781858581518110610a1357610a13611ed4565b602002602001018181525050836001019350610b48565b60018b602001518381518110610a4257610a42611ed4565b6020026020010151602001511115610b4857600080610a638d856000610654565b915091508160400151610ac2576040517f201e176300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528c1660248201526044016102e1565b60008d602001518581518110610ada57610ada611ed4565b60200260200101516020018181525050610b078183602001518f602001516114309092919063ffffffff16565b8160000151888681518110610b1e57610b1e611ed4565b6020026020010181905250848060010195505081606001518c602001818151019150818152505050505b5060010161098b565b5060005b85811015610cc3576000848281518110610b7157610b71611ed4565b6020026020010151905060008b602001518281518110610b9357610b93611ed4565b602002602001015160000151905060018c602001518381518110610bb957610bb9611ed4565b6020026020010151602001511115610cb9576000610bd98d846001610654565b5090508060400151610c37576040517f201e176300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528c1660248201526044016102e1565b60008d602001518481518110610c4f57610c4f611ed4565b60200260200101516020018181525050610c7c8b82602001518f602001516114309092919063ffffffff16565b8060000151888681518110610c9357610c93611ed4565b602090810291909101810191909152606090910151908c01805190910190526001909301925b5050600101610b55565b50604088018490526020890151610cda9088611262565b88525095979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e1565b73ffffffffffffffffffffffffffffffffffffffff8116610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102e1565b610e16816110d2565b50565b60008082516002811115610e2f57610e2f611e5c565b1480610e4d5750600182516002811115610e4b57610e4b611e5c565b145b15610e5a57506001919050565b600282516002811115610e6f57610e6f611e5c565b1415610e7d57506000919050565b81516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102e19190600401611ec6565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e0810191909152606060405180610100016040528085600001516002811115610f1657610f16611e5c565b8152602001856020015173ffffffffffffffffffffffffffffffffffffffff168152602001856040015173ffffffffffffffffffffffffffffffffffffffff16815260200185608001518581518110610f7157610f71611ed4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018560a0015181526020018560c0015181526020016001151581525091505092915050565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e081019190915260606040518061010001604052808461101857875161101b565b60015b600281111561102c5761102c611e5c565b8152602001876020015173ffffffffffffffffffffffffffffffffffffffff1681526020018760800151868151811061106757611067611ed4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168152602001876060015173ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018681526020018760c00151815260200160011515815250915050949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051610100810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c0810182905260e08101919091526040805161010081019091528060018152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152602001846020015184815181106111d1576111d1611ed4565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff168152602001846060015181526020018460200151848151811061123857611238611ed4565b60200260200101516020015181526020018460c00151815260200160011515815250905092915050565b60008261126f848461146c565b8151811061127f5761127f611ed4565b602002602001015160200151905092915050565b600085604001516112a6575060006113ad565b83604001516112b7575060016113ad565b60006113148688602001516b033b2e3c9fd0803ce8000000868b606001516112df91906121bf565b6112e991906121fc565b60208901516b033b2e3c9fd0803ce8000000611305898b6121bf565b61130f91906121fc565b611524565b905060008651600281111561132b5761132b611e5c565b1480611349575060018651600281111561134757611347611e5c565b145b156113555790506113ad565b60028651600281111561136a5761136a611e5c565b1415611378571590506113ad565b85516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102e19190600401611ec6565b95945050505050565b8151600090815b81811015611425578373ffffffffffffffffffffffffffffffffffffffff168582815181106113ee576113ee611ed4565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561141d576001925050506105c1565b6001016113bd565b506000949350505050565b808361143c858561146c565b8151811061144c5761144c611ed4565b602002602001015160200181815161146491906121a7565b905250505050565b6000805b83518110156114d9578273ffffffffffffffffffffffffffffffffffffffff168482815181106114a2576114a2611ed4565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156114d15790506105c1565b600101611470565b506040517f81a3b1be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016102e1565b60006115646040518060400160405280600c81526020017f414141202d20616d6f756e740000000000000000000000000000000000000000815250611615565b61156d856116a4565b611576846116a4565b61157f836116a4565b611588826116a4565b61159a6115958587612250565b6116a4565b6115a76115958385612250565b6115b086610e19565b6115d1576115be82846121a7565b6115c885876121a7565b101590506113ad565b8385101580156115e15750818310155b156115fa576115f08284612250565b6115c88587612250565b83851061160857600161160b565b60005b9695505050505050565b610e16816040516024016116299190612267565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052611731565b610e16816040516024016116ba91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba9000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156117a5576117a5611752565b60405290565b6040805190810167ffffffffffffffff811182821017156117a5576117a5611752565b60405160e0810167ffffffffffffffff811182821017156117a5576117a5611752565b6040516080810167ffffffffffffffff811182821017156117a5576117a5611752565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561185b5761185b611752565b604052919050565b80356003811061187257600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e1657600080fd5b803561187281611877565b600067ffffffffffffffff8211156118be576118be611752565b5060051b60200190565b600082601f8301126118d957600080fd5b813560206118ee6118e9836118a4565b611814565b82815260059290921b8401810191818101908684111561190d57600080fd5b8286015b8481101561193157803561192481611877565b8352918301918301611911565b509695505050505050565b8015158114610e1657600080fd5b80356118728161193c565b6000806000806080858703121561196b57600080fd5b843567ffffffffffffffff8082111561198357600080fd5b90860190610100828903121561199857600080fd5b6119a0611781565b6119a983611863565b81526119b760208401611899565b60208201526119c860408401611899565b60408201526119d960608401611899565b60608201526080830135828111156119f057600080fd5b6119fc8a8286016118c8565b60808301525060a083013560a082015260c083013560c0820152611a2260e0840161194a565b60e0820152955060208701359450604087013593506060870135915080821115611a4b57600080fd5b50611a58878288016118c8565b91505092959194509250565b60005b83811015611a7f578181015183820152602001611a67565b83811115611a8e576000848401525b50505050565b60008151808452611aac816020860160208601611a64565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff81511682526000602082015160406020850152611b136040850182611a94565b949350505050565b6000815160808452611b306080850182611ade565b905060208301516020850152604083015115156040850152606083015160608501528091505092915050565b604081526000611b6f6040830185611b1b565b82810360208401526113ad8185611b1b565b600060208284031215611b9357600080fd5b8135611b9e81611877565b9392505050565b600082601f830112611bb657600080fd5b81356020611bc66118e9836118a4565b82815260069290921b84018101918181019086841115611be557600080fd5b8286015b848110156119315760408189031215611c025760008081fd5b611c0a6117ab565b8135611c1581611877565b81528185013585820152835291830191604001611be9565b600060e08284031215611c3f57600080fd5b611c476117ce565b9050611c5282611899565b8152602082013567ffffffffffffffff80821115611c6f57600080fd5b611c7b85838601611ba5565b6020840152611c8c60408501611899565b60408401526060840135915080821115611ca557600080fd5b611cb1858386016118c8565b60608401526080840135915080821115611cca57600080fd5b50611cd7848285016118c8565b60808301525060a082013560a082015260c082013560c082015292915050565b600080600060608486031215611d0c57600080fd5b833567ffffffffffffffff811115611d2357600080fd5b611d2f86828701611c2d565b935050602084013591506040840135611d478161193c565b809150509250925092565b604081526000611d656040830185611b1b565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b600060208284031215611d9c57600080fd5b813567ffffffffffffffff811115611db357600080fd5b611b1384828501611c2d565b6000602080835260808301845182850152818501516040850152604085015160608086015281815180845260a08701915060a08160051b8801019350848301925060005b81811015611e4f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60888603018352611e3d858551611ade565b94509285019291850191600101611e03565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611ec2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016105c18284611e8b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501945080840160005b83811015611f4957815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611f17565b509495945050505050565b60608152611f66606082018551611e8b565b602084015173ffffffffffffffffffffffffffffffffffffffff908116608083015260408501511660a08201526060840151600090611fbd60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060808501516101008060e0850152611fda610160850183611f03565b915060a0870151818501525060c086015161012084015260e086015161200561014085018215159052565b5082810360208401526120188186611f03565b915050826040830152949350505050565b80516118728161193c565b6000602080838503121561204757600080fd5b825167ffffffffffffffff8082111561205f57600080fd5b908401906080828703121561207357600080fd5b61207b6117f1565b82518281111561208a57600080fd5b83016040818903121561209c57600080fd5b6120a46117ab565b81516120af81611877565b815281860151848111156120c257600080fd5b80830192505088601f8301126120d757600080fd5b8151848111156120e9576120e9611752565b612119877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611814565b9450808552898782850101111561212f57600080fd5b61213e81888701898601611a64565b50808601849052825250828401518185015261215c60408401612029565b6040820152606083015160608201528094505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156121ba576121ba612178565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121f7576121f7612178565b500290565b600082612232577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561224957600080fd5b5051919050565b60008282101561226257612262612178565b500390565b602081526000611b9e6020830184611a9456fea264697066735822122062a2ca1eb00b46484704ebc3745cb0199763e60cd447c42272869be949de054264736f6c634300080a0033";

type NormalTokenPathFinderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NormalTokenPathFinderConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NormalTokenPathFinder__factory extends ContractFactory {
  constructor(...args: NormalTokenPathFinderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _addressProvider: string,
    _swapPathFinder: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<NormalTokenPathFinder> {
    return super.deploy(
      _addressProvider,
      _swapPathFinder,
      overrides || {},
    ) as Promise<NormalTokenPathFinder>;
  }
  override getDeployTransaction(
    _addressProvider: string,
    _swapPathFinder: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _addressProvider,
      _swapPathFinder,
      overrides || {},
    );
  }
  override attach(address: string): NormalTokenPathFinder {
    return super.attach(address) as NormalTokenPathFinder;
  }
  override connect(signer: Signer): NormalTokenPathFinder__factory {
    return super.connect(signer) as NormalTokenPathFinder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NormalTokenPathFinderInterface {
    return new utils.Interface(_abi) as NormalTokenPathFinderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): NormalTokenPathFinder {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as NormalTokenPathFinder;
  }
}
