/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConvexPathFinder,
  ConvexPathFinderInterface,
} from "../../../contracts/pathfinder/ConvexPathFinder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_booster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BoosterAdapterNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "UnknownToken",
    type: "error",
  },
  {
    inputs: [],
    name: "booster",
    outputs: [
      {
        internalType: "contract IBooster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cvx",
    outputs: [
      {
        internalType: "contract IConvexToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
    ],
    name: "filterConvexAdapters",
    outputs: [
      {
        internalType: "address[]",
        name: "result",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "boosterAdapter",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creditAccount",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "b",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
    ],
    name: "withdrawAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405162001a6f38038062001a6f833981016040819052610031916100b1565b6001600160a01b0381166080819052604080516303aa30b960e11b815290516307546172916004808201926020929091908290030181865afa15801561007b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009f91906100b1565b6001600160a01b031660a052506100e1565b6000602082840312156100c357600080fd5b81516001600160a01b03811681146100da57600080fd5b9392505050565b60805160a05161193f620001306000396000818160d20152818161039001528181610d8401528181610e2301528181610ec00152610f8101526000818161011e01526102f6015261193f6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635c522017116100505780635c522017146100ac578063923c1d61146100cd578063c6def0761461011957600080fd5b806328add6b31461006c57806354fd4d5014610096575b600080fd5b61007f61007a36600461145e565b610140565b60405161008d929190611559565b60405180910390f35b61009e600181565b60405190815260200161008d565b6100bf6100ba366004611692565b6103db565b60405161008d9291906116c7565b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008d565b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b606080600061014e846103db565b815191955091506000808267ffffffffffffffff8111156101715761017161131f565b6040519080825280602002602001820160405280156101b757816020015b60408051808201909152600081526060602082015281526020019060019003908161018f5790505b5090506000805b848110156102e75760008982815181106101da576101da61173e565b602002602001015190506102176040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60006102248d848b6105a5565b8051919e50925073ffffffffffffffffffffffffffffffffffffffff161561027357818686815181106102595761025961173e565b6020026020010181905250848061026f9061179c565b9550505b61027e8e8e8561086c565b8151929f50909350915073ffffffffffffffffffffffffffffffffffffffff16156102dc576102ad81886117d5565b9650818686815181106102c2576102c261173e565b602002602001018190525084806102d89061179c565b9550505b5050506001016101be565b5060018311156103c05761038b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636a4874a16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038391906117ed565b8a9085610d43565b6103c07f00000000000000000000000000000000000000000000000000000000000000006103b885610d7f565b8b9190610d43565b886103ca8361103c565b965096505050505050935093915050565b80516060906000908067ffffffffffffffff8111156103fc576103fc61131f565b604051908082528060200260200182016040528015610425578160200160208202803683370190505b5092506000805b828110156105825760008682815181106104485761044861173e565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561048d575061057a565b60008173ffffffffffffffffffffffffffffffffffffffff1663ce30bbdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611811565b9050600c81601081111561051457610514611832565b1415610559578187858151811061052d5761052d61173e565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001909301925b600d81601081111561056d5761056d611832565b1415610577578195505b50505b60010161042c565b508181101561059e5761059584826110d8565b93505050915091565b5050915091565b60408051808201909152600081526060602082018190529060008473ffffffffffffffffffffffffffffffffffffffff166399253ac06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e91906117ed565b9050600061063c878361118a565b905060018782815181106106525761065261173e565b60200260200101516020015111156108605760008673ffffffffffffffffffffffffffffffffffffffff1663927188d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d591906117ed565b9050610709818984815181106106ed576106ed61173e565b6020026020010151602001518a610d439092919063ffffffff16565b600188838151811061071d5761071d61173e565b6020026020010151602001818152505060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff16815260200163958e2d3160e01b8973ffffffffffffffffffffffffffffffffffffffff1663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190611861565b6040516024016107dd91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290529350505b50949590945092505050565b6040805180820190915260008152606060208201819052906000808473ffffffffffffffffffffffffffffffffffffffff166320b2c1516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906117ed565b90506000610904878361118a565b9050600187828151811061091a5761091a61173e565b6020026020010151602001511115610d365760008673ffffffffffffffffffffffffffffffffffffffff1663927188d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099d91906117ed565b90506109b5818984815181106106ed576106ed61173e565b60018883815181106109c9576109c961173e565b60209081029190910181015101526040517e8cc26200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152881690628cc26290602401602060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611861565b935060008773ffffffffffffffffffffffffffffffffffffffff1663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190611861565b905060005b81811015610ca0576040517f40c354460000000000000000000000000000000000000000000000000000000081526004810182905260009073ffffffffffffffffffffffffffffffffffffffff8b16906340c3544690602401602060405180830381865afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7791906117ed565b6040517e8cc26200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e81166004830152919250600091831690628cc26290602401602060405180830381865afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190611861565b90506001811115610c965760008273ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8791906117ed565b9050610c948d8284610d43565b505b5050600101610add565b505060408051808201825273ffffffffffffffffffffffffffffffffffffffff8916815281516001602480830191909152835180830390910181526044909101909252602082810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f49f039a2000000000000000000000000000000000000000000000000000000001790528101919091529450505b5094969195509350915050565b8083610d4f858561118a565b81518110610d5f57610d5f61173e565b6020026020010151602001818151610d7791906117d5565b905250505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611861565b905080610e1f575090919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa74e6226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190611861565b610eba908361187a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f96e76f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d9190611861565b905080821015611031576000610f6383836118b5565b905081610f7082886118cc565b610f7a919061187a565b95506000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100e9190611861565b61101891906118b5565b905080871115611026578096505b509495945050505050565b506000949350505050565b80516060908061104d575090919050565b60005b600073ffffffffffffffffffffffffffffffffffffffff1684828151811061107a5761107a61173e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16146110b957600101818114156110b457509192915050565b611050565b80156110d1576110c9848261124c565b949350505050565b5050919050565b60608167ffffffffffffffff8111156110f3576110f361131f565b60405190808252806020026020018201604052801561111c578160200160208202803683370190505b50905060005b828110156111835783818151811061113c5761113c61173e565b60200260200101518282815181106111565761115661173e565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611122565b5092915050565b6000805b83518110156111f7578273ffffffffffffffffffffffffffffffffffffffff168482815181106111c0576111c061173e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156111ef579050611246565b60010161118e565b506040517f81a3b1be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240160405180910390fd5b92915050565b60608167ffffffffffffffff8111156112675761126761131f565b6040519080825280602002602001820160405280156112ad57816020015b6040805180820190915260008152606060208201528152602001906001900390816112855790505b50905060005b82811015611183578381815181106112cd576112cd61173e565b60200260200101518282815181106112e7576112e761173e565b60209081029190910101526001016112b3565b73ffffffffffffffffffffffffffffffffffffffff8116811461131c57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156113715761137161131f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156113be576113be61131f565b604052919050565b600067ffffffffffffffff8211156113e0576113e061131f565b5060051b60200190565b600082601f8301126113fb57600080fd5b8135602061141061140b836113c6565b611377565b82815260059290921b8401810191818101908684111561142f57600080fd5b8286015b84811015611453578035611446816112fa565b8352918301918301611433565b509695505050505050565b60008060006060848603121561147357600080fd5b833561147e816112fa565b925060208481013567ffffffffffffffff8082111561149c57600080fd5b818701915087601f8301126114b057600080fd5b81356114be61140b826113c6565b81815260069190911b8301840190848101908a8311156114dd57600080fd5b938501935b82851015611529576040858c0312156114fb5760008081fd5b61150361134e565b853561150e816112fa565b815285870135878201528252604090940193908501906114e2565b96505050604087013592508083111561154157600080fd5b505061154f868287016113ea565b9150509250925092565b6040808252835182820181905260009190606090818501906020808901865b838110156115b3578151805173ffffffffffffffffffffffffffffffffffffffff168652830151838601529386019390820190600101611578565b50508683038188015287518084528184019250600581901b8401820189830160005b83811015611681577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080888503018752825173ffffffffffffffffffffffffffffffffffffffff81511685528681015190508a878601528051808c87015260005b81811015611651578281018901518782018d01528801611636565b818111156116625760008c83890101525b5097870197601f019091169390930188019250908401906001016115d5565b50909b9a5050505050505050505050565b6000602082840312156116a457600080fd5b813567ffffffffffffffff8111156116bb57600080fd5b6110c9848285016113ea565b604080825283519082018190526000906020906060840190828701845b8281101561171657815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016116e4565b50505073ffffffffffffffffffffffffffffffffffffffff9490941692019190915250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117ce576117ce61176d565b5060010190565b600082198211156117e8576117e861176d565b500190565b6000602082840312156117ff57600080fd5b815161180a816112fa565b9392505050565b60006020828403121561182357600080fd5b81516011811061180a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561187357600080fd5b5051919050565b6000826118b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156118c7576118c761176d565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119045761190461176d565b50029056fea2646970667358221220c4b79a653bca66f7157281facae00decd73fdd7793ee15fef5956733881fd68f64736f6c634300080a0033";

type ConvexPathFinderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexPathFinderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexPathFinder__factory extends ContractFactory {
  constructor(...args: ConvexPathFinderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _booster: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConvexPathFinder> {
    return super.deploy(_booster, overrides || {}) as Promise<ConvexPathFinder>;
  }
  override getDeployTransaction(
    _booster: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_booster, overrides || {});
  }
  override attach(address: string): ConvexPathFinder {
    return super.attach(address) as ConvexPathFinder;
  }
  override connect(signer: Signer): ConvexPathFinder__factory {
    return super.connect(signer) as ConvexPathFinder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexPathFinderInterface {
    return new utils.Interface(_abi) as ConvexPathFinderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexPathFinder {
    return new Contract(address, _abi, signerOrProvider) as ConvexPathFinder;
  }
}
