/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveLPPathFinder,
  CurveLPPathFinderInterface,
} from "../../../contracts/pathfinder/CurveLPPathFinder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "UnknownToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "metaPool",
        type: "bool",
      },
    ],
    name: "filterCurveLPAdapters",
    outputs: [
      {
        internalType: "address[]",
        name: "result",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "b",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "option",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "totalOptions",
            type: "uint8",
          },
        ],
        internalType: "struct PathOption[]",
        name: "pathOptions",
        type: "tuple[]",
      },
    ],
    name: "withdrawAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "b",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "adapters",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "option",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "totalOptions",
            type: "uint8",
          },
        ],
        internalType: "struct PathOption[]",
        name: "pathOptions",
        type: "tuple[]",
      },
    ],
    name: "withdrawAllMeta",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct Balance[]",
        name: "",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCall[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6113dd8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80639b17fa6f116100505780639b17fa6f146100cf578063cc06dd33146100e2578063f2fde38b1461010257600080fd5b8063715018a6146100775780638da5cb5b14610081578063901d1145146100ae575b600080fd5b61007f610115565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c16100bc366004610f9a565b6101a7565b6040516100a59291906110a5565b6100c16100dd366004610f9a565b6101d1565b6100f56100f03660046111de565b6101dd565b6040516100a59190611235565b61007f61011036600461128f565b61048a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101a560006105ba565b565b60608060006101b78560016101dd565b90506101c486828661062f565b9250925050935093915050565b60608060006101b78560005b81516060908067ffffffffffffffff8111156101fb576101fb610d55565b604051908082528060200260200182016040528015610224578160200160208202803683370190505b5091506000805b82811015610465576000868281518110610247576102476112b3565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561028c575061045d565b60008173ffffffffffffffffffffffffffffffffffffffff1663ce30bbdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd91906112e2565b9050600581601081111561031357610313611303565b14806103305750600681601081111561032e5761032e611303565b145b8061034c5750600781601081111561034a5761034a611303565b145b806103685750600881601081111561036657610366611303565b145b1561045a5760008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166364a89bca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190611332565b73ffffffffffffffffffffffffffffffffffffffff1614159050871515811415610458578287868151811061042c5761042c6112b3565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001909401935b505b50505b60010161022b565b508181101561048157610478838261080f565b92505050610484565b50505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610192565b73ffffffffffffffffffffffffffffffffffffffff81166105ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610192565b6105b7816105ba565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8151606090819060008167ffffffffffffffff81111561065157610651610d55565b60405190808252806020026020018201604052801561069757816020015b60408051808201909152600081526060602082015281526020019060019003908161066f5790505b5090506000805b838110156107f4576000806000806106d08d8d87815181106106c2576106c26112b3565b60200260200101518d6108c1565b935093509350935060008211156107e55760018d85815181106106f5576106f56112b3565b602002602001015160200181815250506107c08c868151811061071a5761071a6112b3565b60209081029190910101516040517f23746eb8000000000000000000000000000000000000000000000000000000008152600f86900b600482015273ffffffffffffffffffffffffffffffffffffffff909116906323746eb890602401602060405180830381865afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190611332565b8e9084610b1a565b808787815181106107d3576107d36112b3565b60200260200101819052508560010195505b8460010194505050505061069e565b50876108008383610b56565b94509450505050935093915050565b60608167ffffffffffffffff81111561082a5761082a610d55565b604051908082528060200260200182016040528015610853578160200160208202803683370190505b50905060005b828110156108ba57838181518110610873576108736112b3565b602002602001015182828151811061088d5761088d6112b3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610859565b5092915050565b60008060006108f96040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60008673ffffffffffffffffffffffffffffffffffffffff166382c630666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190611332565b90506109768882610c04565b9450600188868151811061098c5761098c6112b3565b6020026020010151602001511115610b10576109a88682610cbc565b93508673ffffffffffffffffffffffffffffffffffffffff1663cc2b27d78987815181106109d8576109d86112b3565b602002602001015160200151866040518363ffffffff1660e01b8152600401610a0e929190918252600f0b602082015260400190565b602060405180830381865afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f919061134f565b92506001888681518110610a6557610a656112b3565b60209081029190910181015181019190915260408051808201825273ffffffffffffffffffffffffffffffffffffffff8a1681528151600f88900b6024820152600060448083019190915283518083039091018152606490910190925281830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f33d2ebf2000000000000000000000000000000000000000000000000000000001790529182015291505b5093509350935093565b8083610b268585610c04565b81518110610b3657610b366112b3565b6020026020010151602001818151610b4e9190611368565b905250505050565b60608167ffffffffffffffff811115610b7157610b71610d55565b604051908082528060200260200182016040528015610bb757816020015b604080518082019091526000815260606020820152815260200190600190039081610b8f5790505b50905060005b828110156108ba57838181518110610bd757610bd76112b3565b6020026020010151828281518110610bf157610bf16112b3565b6020908102919091010152600101610bbd565b6000805b8351811015610c71578273ffffffffffffffffffffffffffffffffffffffff16848281518110610c3a57610c3a6112b3565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610c69579050610484565b600101610c08565b506040517f81a3b1be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610192565b6000805b8351811015610d4b578273ffffffffffffffffffffffffffffffffffffffff16848281518110610cf257610cf26112b3565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610d4357838181518110610d2c57610d2c6112b3565b60200260200101516020015160ff16915050610484565b600101610cc0565b5060009392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610da757610da7610d55565b60405290565b6040805190810167ffffffffffffffff81118282101715610da757610da7610d55565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610e1757610e17610d55565b604052919050565b600067ffffffffffffffff821115610e3957610e39610d55565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff811681146105b757600080fd5b600082601f830112610e7657600080fd5b81356020610e8b610e8683610e1f565b610dd0565b82815260059290921b84018101918181019086841115610eaa57600080fd5b8286015b84811015610ece578035610ec181610e43565b8352918301918301610eae565b509695505050505050565b803560ff81168114610eea57600080fd5b919050565b600082601f830112610f0057600080fd5b81356020610f10610e8683610e1f565b82815260609283028501820192828201919087851115610f2f57600080fd5b8387015b85811015610f8d5781818a031215610f4b5760008081fd5b610f53610d84565b8135610f5e81610e43565b8152610f6b828701610ed9565b868201526040610f7c818401610ed9565b908201528452928401928101610f33565b5090979650505050505050565b600080600060608486031215610faf57600080fd5b833567ffffffffffffffff80821115610fc757600080fd5b818601915086601f830112610fdb57600080fd5b81356020610feb610e8683610e1f565b82815260069290921b8401810191818101908a84111561100a57600080fd5b948201945b83861015611056576040868c0312156110285760008081fd5b611030610dad565b863561103b81610e43565b8152868401358482015282526040909501949082019061100f565b9750508701359250508082111561106c57600080fd5b61107887838801610e65565b9350604086013591508082111561108e57600080fd5b5061109b86828701610eef565b9150509250925092565b6040808252835182820181905260009190606090818501906020808901865b838110156110ff578151805173ffffffffffffffffffffffffffffffffffffffff1686528301518386015293860193908201906001016110c4565b50508683038188015287518084528184019250600581901b8401820189830160005b838110156111cd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080888503018752825173ffffffffffffffffffffffffffffffffffffffff81511685528681015190508a878601528051808c87015260005b8181101561119d578281018901518782018d01528801611182565b818111156111ae5760008c83890101525b5097870197601f01909116939093018801925090840190600101611121565b50909b9a5050505050505050505050565b600080604083850312156111f157600080fd5b823567ffffffffffffffff81111561120857600080fd5b61121485828601610e65565b9250506020830135801515811461122a57600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561128357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611251565b50909695505050505050565b6000602082840312156112a157600080fd5b81356112ac81610e43565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112f457600080fd5b8151601181106112ac57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561134457600080fd5b81516112ac81610e43565b60006020828403121561136157600080fd5b5051919050565b600082198211156113a2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea264697066735822122007a21f86b7b83416fac922b7fad648d880d7ed3a37662a6bdd344da6d4b5f88764736f6c634300080a0033";

type CurveLPPathFinderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLPPathFinderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLPPathFinder__factory extends ContractFactory {
  constructor(...args: CurveLPPathFinderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveLPPathFinder> {
    return super.deploy(overrides || {}) as Promise<CurveLPPathFinder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveLPPathFinder {
    return super.attach(address) as CurveLPPathFinder;
  }
  override connect(signer: Signer): CurveLPPathFinder__factory {
    return super.connect(signer) as CurveLPPathFinder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLPPathFinderInterface {
    return new utils.Interface(_abi) as CurveLPPathFinderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLPPathFinder {
    return new Contract(address, _abi, signerOrProvider) as CurveLPPathFinder;
  }
}
