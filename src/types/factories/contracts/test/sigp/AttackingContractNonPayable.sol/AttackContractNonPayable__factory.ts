/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackContractNonPayable,
  AttackContractNonPayableInterface,
} from "../../../../../contracts/test/sigp/AttackingContractNonPayable.sol/AttackContractNonPayable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561012c806100326000396000f3fe608060405260043610601c5760003560e01c80638da5cb5b1460a2575b60005473ffffffffffffffffffffffffffffffffffffffff16331460a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265766572743a20455448207472616e7366657220626c6f636b656421000000604482015260640160405180910390fd5b005b34801560ad57600080fd5b5060005460cd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220f16831e91347b2904da02ba96b52cba7f595f3424154199aa0c59781dc84d43864736f6c634300080a0033";

type AttackContractNonPayableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackContractNonPayableConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackContractNonPayable__factory extends ContractFactory {
  constructor(...args: AttackContractNonPayableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<AttackContractNonPayable> {
    return super.deploy(overrides || {}) as Promise<AttackContractNonPayable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AttackContractNonPayable {
    return super.attach(address) as AttackContractNonPayable;
  }
  override connect(signer: Signer): AttackContractNonPayable__factory {
    return super.connect(signer) as AttackContractNonPayable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackContractNonPayableInterface {
    return new utils.Interface(_abi) as AttackContractNonPayableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): AttackContractNonPayable {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as AttackContractNonPayable;
  }
}
