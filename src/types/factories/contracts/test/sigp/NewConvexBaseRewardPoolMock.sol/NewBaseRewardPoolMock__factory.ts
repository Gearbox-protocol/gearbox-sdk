/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NewBaseRewardPoolMock,
  NewBaseRewardPoolMockInterface,
} from "../../../../../contracts/test/sigp/NewConvexBaseRewardPoolMock.sol/NewBaseRewardPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pid_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "stakingToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "Mock_BaseRewardPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Mock_BaseStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Mock_BaseWithdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_reward",
        type: "address",
      },
    ],
    name: "addExtraReward",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addRewardAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "clearExtraRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "donate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "extraRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extraRewardsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_claimExtras",
        type: "bool",
      },
    ],
    name: "getReward",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "historicalRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "newRewardRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "operator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "queueNewRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "queuedRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_for",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stakeFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claim",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "claim",
        type: "bool",
      },
    ],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "claim",
        type: "bool",
      },
    ],
    name: "withdrawAllAndUnwrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claim",
        type: "bool",
      },
    ],
    name: "withdrawAndUnwrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600555600060065560006009556000600a556000600b55600060115560006012553480156200003457600080fd5b5060405162001cd738038062001cd78339810160408190526200005791620000bd565b600493909355600180546001600160a01b03199081166001600160a01b039485161790915560008054821692841692909217909155600280549091169190921617905562000111565b80516001600160a01b0381168114620000b857600080fd5b919050565b60008060008060808587031215620000d457600080fd5b84519350620000e660208601620000a0565b9250620000f660408601620000a0565b91506200010660608601620000a0565b905092959194509250565b611bb680620001216000396000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c80637050ccd911610160578063a694fc3a116100d8578063df136d651161008c578063f106845411610071578063f10684541461050a578063f14faf6f146103c2578063f7c618c11461051357600080fd5b8063df136d65146104f8578063ebe2b12b1461050157600080fd5b8063c8f33c91116100bd578063c8f33c91146104df578063cd3daf9d146104e8578063d55a23f4146104f057600080fd5b8063a694fc3a146104b9578063c32e7202146104cc57600080fd5b806380faa57d1161012f5780638dcb4061116101145780638dcb406114610495578063901a7d531461049d5780639b7ccf4c146104a657600080fd5b806380faa57d1461046d5780638b8763471461047557600080fd5b80637050ccd9146103fb57806370a082311461040e57806372f702f3146104445780637b0a47ee1461046457600080fd5b806338d07436116101f3578063570ca735116101c25780635e43c47b116101a75780635e43c47b146103d657806363d38c3b146103e95780636c8bcee8146103f257600080fd5b8063570ca735146103a2578063590a41f5146103c257600080fd5b806338d07436146103615780633d18b9121461037457806340c354461461037c57806349f039a21461038f57600080fd5b80630fb5a6b41161024a5780631c1c6fe51161022f5780631c1c6fe514610322578063262d3d6d146103355780632ee409081461033e57600080fd5b80630fb5a6b41461031057806318160ddd1461031a57600080fd5b80628cc2621461027b5780630569d388146102a15780630700037d146102ab5780630f4ef8a6146102cb575b600080fd5b61028e61028936600461188e565b610533565b6040519081526020015b60405180910390f35b6102a96105cc565b005b61028e6102b936600461188e565b600e6020526000908152604090205481565b6003546102eb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610298565b61028e62093a8081565b600c5461028e565b6102a96103303660046118b7565b6105da565b61028e600b5481565b61035161034c3660046118d4565b6105f8565b6040519015158152602001610298565b61035161036f3660046118fe565b61087f565b610351610aa7565b6102eb61038a36600461192e565b610abc565b6102a961039d3660046118b7565b610af3565b6002546102eb9073ffffffffffffffffffffffffffffffffffffffff1681565b6103516103d036600461192e565b50600190565b6103516103e436600461188e565b610b0d565b61028e60095481565b61028e61033e81565b610351610409366004611947565b610c07565b61028e61041c36600461188e565b73ffffffffffffffffffffffffffffffffffffffff166000908152600f602052604090205490565b6001546102eb9073ffffffffffffffffffffffffffffffffffffffff1681565b61028e60065481565b61028e610e85565b61028e61048336600461188e565b600d6020526000908152604090205481565b610351610e98565b61028e600a5481565b6102a96104b436600461192e565b610f43565b6103516104c736600461192e565b610f84565b6103516104da3660046118fe565b6111bd565b61028e60075481565b60085461028e565b60105461028e565b61028e60085481565b61028e60055481565b61028e60045481565b6000546102eb9073ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e6020908152604080832054600d9092528220546105c691906105c090670de0b6b3a7640000906105ba9061058e9061058860085490565b906113b3565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020526040902054906113c6565b906113d2565b906113de565b92915050565b6105d860106000611833565b565b336000908152600f60205260409020546105f4908261087f565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff8116156106595761062081610533565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020908152604080832093909355600854600d909152919020555b600083116106c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b652030000000000060448201526064015b60405180910390fd5b60005b60105481101561079057601081815481106106e8576106e8611973565b6000918252602090912001546040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790529091169063adc9772e90604401600060405180830381600087803b15801561076557600080fd5b505af1158015610779573d6000803e3d6000fd5b505050508080610788906119d1565b9150506106cb565b50600c5461079e90846113de565b600c5573ffffffffffffffffffffffffffffffffffffffff84166000908152600f60205260409020546107d190846113de565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600f602052604090209190915560015461080b91163330866113ea565b8373ffffffffffffffffffffffffffffffffffffffff166012547e12ea37eafadc86c304798c357ee0b9923724f92be4e45c4796ccf0e33f84ce8560405161085591815260200190565b60405180910390a36001601260008282546108709190611a0a565b90915550600195945050505050565b60003380156108ca5761089181610533565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020908152604080832093909355600854600d909152919020555b60008411610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526577617264506f6f6c203a2043616e6e6f742077697468647261772030000060448201526064016106bf565b60005b6010548110156109fa576010818154811061095457610954611973565b6000918252602090912001546040517ff3fef3a30000000000000000000000000000000000000000000000000000000081523360048201526024810187905273ffffffffffffffffffffffffffffffffffffffff9091169063f3fef3a390604401600060405180830381600087803b1580156109cf57600080fd5b505af11580156109e3573d6000803e3d6000fd5b5050505080806109f2906119d1565b915050610937565b50600c54610a0890856113b3565b600c55336000908152600f6020526040902054610a2590856113b3565b336000818152600f6020526040902091909155600154610a5e9173ffffffffffffffffffffffffffffffffffffffff90911690866114cc565b8215610a7157610a6f336001610c07565b505b6012546040518581523391907f5512f168a2a6322c28d70f2b2811c8857ea8b1f256d7be8ee8ef770665c3f96290602001610855565b6000610ab4336001610c07565b506001905090565b60108181548110610acc57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600f60205260409020546105f490826111bd565b600073ffffffffffffffffffffffffffffffffffffffff8216610b8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e67000000000000000000000000000000000060448201526064016106bf565b5060108054600180820183556000929092527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169290921790915590565b60008273ffffffffffffffffffffffffffffffffffffffff811615610c6857610c2f81610533565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020908152604080832093909355600854600d909152919020555b6000610c7385610533565b90508015610d465773ffffffffffffffffffffffffffffffffffffffff8086166000908152600e6020526040812081905554610cb1911686836114cc565b600254600480546040517f71192b170000000000000000000000000000000000000000000000000000000081529182015273ffffffffffffffffffffffffffffffffffffffff878116602483015260448201849052909116906371192b1790606401600060405180830381600087803b158015610d2d57600080fd5b505af1158015610d41573d6000803e3d6000fd5b505050505b8315610e0f5760005b601054811015610e0d5760108181548110610d6c57610d6c611973565b6000918252602090912001546040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529091169063c00007b090602401600060405180830381600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050508080610e05906119d1565b915050610d4f565b505b8473ffffffffffffffffffffffffffffffffffffffff166012547fa7283f521536f3db5cd5c50a1f053bbba463b20de118ee0f9dd4c3ff2bc9532f83604051610e5a91815260200190565b60405180910390a3600160126000828254610e759190611a0a565b9091555060019695505050505050565b6000610e9342600554611527565b905090565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611a22565b9050610f3a81610f84565b50600191505090565b600c5415610f8157600c54610f6082670de0b6b3a7640000611a3b565b610f6a9190611a78565b60086000828254610f7b9190611a0a565b90915550505b50565b6000338015610fcf57610f9681610533565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020908152604080832093909355600854600d909152919020555b60008311611039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b652030000000000060448201526064016106bf565b60005b6010548110156110ff576010818154811061105957611059611973565b6000918252602090912001546040517fadc9772e0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff9091169063adc9772e90604401600060405180830381600087803b1580156110d457600080fd5b505af11580156110e8573d6000803e3d6000fd5b5050505080806110f7906119d1565b91505061103c565b50600c5461110d90846113de565b600c55336000908152600f602052604090205461112a90846113de565b336000818152600f60205260409020919091556001546111649173ffffffffffffffffffffffffffffffffffffffff9091169030866113ea565b6012546040518481523391907e12ea37eafadc86c304798c357ee0b9923724f92be4e45c4796ccf0e33f84ce9060200160405180910390a36001601260008282546111af9190611a0a565b909155506001949350505050565b6000338015611208576111cf81610533565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020908152604080832093909355600854600d909152919020555b60005b6010548110156112ce576010818154811061122857611228611973565b6000918252602090912001546040517ff3fef3a30000000000000000000000000000000000000000000000000000000081523360048201526024810187905273ffffffffffffffffffffffffffffffffffffffff9091169063f3fef3a390604401600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b5050505080806112c6906119d1565b91505061120b565b50600c546112dc90856113b3565b600c55336000908152600f60205260409020546112f990856113b3565b336000818152600f602052604090819020929092556002546004805493517f14cd70e40000000000000000000000000000000000000000000000000000000081529081019390935260248301879052604483019190915273ffffffffffffffffffffffffffffffffffffffff16906314cd70e490606401600060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b505050508215610a7157610a6f336001610c07565b60006113bf8284611ab3565b9392505050565b60006113bf8284611a3b565b60006113bf8284611a78565b60006113bf8284611a0a565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526114c69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261153d565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526115229084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611444565b505050565b600081831061153657816113bf565b5090919050565b600061159f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116499092919063ffffffff16565b80519091501561152257808060200190518101906115bd9190611aca565b611522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106bf565b60606116588484600085611660565b949350505050565b6060824710156116f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106bf565b843b61175a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bf565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117839190611b13565b60006040518083038185875af1925050503d80600081146117c0576040519150601f19603f3d011682016040523d82523d6000602084013e6117c5565b606091505b50915091506117d58282866117e0565b979650505050505050565b606083156117ef5750816113bf565b8251156117ff5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf9190611b2f565b5080546000825590600052602060002090810190610f8191905b80821115611861576000815560010161184d565b5090565b803573ffffffffffffffffffffffffffffffffffffffff8116811461188957600080fd5b919050565b6000602082840312156118a057600080fd5b6113bf82611865565b8015158114610f8157600080fd5b6000602082840312156118c957600080fd5b81356113bf816118a9565b600080604083850312156118e757600080fd5b6118f083611865565b946020939093013593505050565b6000806040838503121561191157600080fd5b823591506020830135611923816118a9565b809150509250929050565b60006020828403121561194057600080fd5b5035919050565b6000806040838503121561195a57600080fd5b61196383611865565b91506020830135611923816118a9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a0357611a036119a2565b5060010190565b60008219821115611a1d57611a1d6119a2565b500190565b600060208284031215611a3457600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a7357611a736119a2565b500290565b600082611aae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611ac557611ac56119a2565b500390565b600060208284031215611adc57600080fd5b81516113bf816118a9565b60005b83811015611b02578181015183820152602001611aea565b838111156114c65750506000910152565b60008251611b25818460208701611ae7565b9190910192915050565b6020815260008251806020840152611b4e816040850160208701611ae7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212207617fdeb11a4435e71b1c7ba9196963159099b4fb00b53cb02d7b5708165f28064736f6c634300080a0033";

type NewBaseRewardPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NewBaseRewardPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NewBaseRewardPoolMock__factory extends ContractFactory {
  constructor(...args: NewBaseRewardPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    pid_: BigNumberish,
    stakingToken_: string,
    rewardToken_: string,
    operator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NewBaseRewardPoolMock> {
    return super.deploy(
      pid_,
      stakingToken_,
      rewardToken_,
      operator_,
      overrides || {}
    ) as Promise<NewBaseRewardPoolMock>;
  }
  override getDeployTransaction(
    pid_: BigNumberish,
    stakingToken_: string,
    rewardToken_: string,
    operator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      pid_,
      stakingToken_,
      rewardToken_,
      operator_,
      overrides || {}
    );
  }
  override attach(address: string): NewBaseRewardPoolMock {
    return super.attach(address) as NewBaseRewardPoolMock;
  }
  override connect(signer: Signer): NewBaseRewardPoolMock__factory {
    return super.connect(signer) as NewBaseRewardPoolMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NewBaseRewardPoolMockInterface {
    return new utils.Interface(_abi) as NewBaseRewardPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NewBaseRewardPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NewBaseRewardPoolMock;
  }
}
