/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBoosterMockEvents,
  IBoosterMockEventsInterface,
} from "../../../../../../contracts/test/mocks/integrations/ConvexBoosterMock.sol/IBoosterMockEvents";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "poolid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_stake",
        type: "bool",
      },
    ],
    name: "Mock_Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "poolid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Mock_Withdrawn",
    type: "event",
  },
];

export class IBoosterMockEvents__factory {
  static readonly abi = _abi;
  static createInterface(): IBoosterMockEventsInterface {
    return new utils.Interface(_abi) as IBoosterMockEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBoosterMockEvents {
    return new Contract(address, _abi, signerOrProvider) as IBoosterMockEvents;
  }
}
