/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LPPriceFeedMock,
  LPPriceFeedMockInterface,
} from "../../../../../contracts/test/mocks/oracles/LPPriceFeedMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "range",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "descrition",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceFeedRequiresAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeExpcetion",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract ACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "checkValue",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dependsOnAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162000f0e38038062000f0e8339810160408190526200003491620001da565b6000805460ff19169055828282826001600160a01b0381166200006a57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cf9190620002d6565b6001600160a01b0316608052508051620000f190600290602084019062000101565b505060a052506200033892505050565b8280546200010f90620002fb565b90600052602060002090601f0160209004810192826200013357600085556200017e565b82601f106200014e57805160ff19168380011785556200017e565b828001600101855582156200017e579182015b828111156200017e57825182559160200191906001019062000161565b506200018c92915062000190565b5090565b5b808211156200018c576000815560010162000191565b80516001600160a01b0381168114620001bf57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620001f057600080fd5b620001fb84620001a7565b60208581015160408701519295509350906001600160401b03808211156200022257600080fd5b818701915087601f8301126200023757600080fd5b8151818111156200024c576200024c620001c4565b604051601f8201601f19908116603f01168101908382118183101715620002775762000277620001c4565b816040528281528a868487010111156200029057600080fd5b600093505b82841015620002b4578484018601518185018701529285019262000295565b82841115620002c65760008684830101525b8096505050505050509250925092565b600060208284031215620002e957600080fd5b620002f482620001a7565b9392505050565b600181811c908216806200031057607f821691505b602082108114156200033257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051610b946200037a600039600081816101250152610868015260008181610242015281816102f20152818161046e01526105a60152610b946000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638456cb59116100b2578063a50cf2c811610081578063bc489a6511610066578063bc489a6514610291578063d62ada11146102a4578063feaf968c146102ac57600080fd5b8063a50cf2c81461023d578063b09ad8a01461028957600080fd5b80638456cb59146101da578063975c19ab146101e25780639a6fc8f5146101ea578063a384d6ff1461023457600080fd5b80633fd0875f116100ee5780633fd0875f1461019157806354fd4d50146101a65780635c975abb146101ae5780637284e416146101c557600080fd5b806312b495a81461012057806318db62fb1461015a578063313ce5671461016f5780633f4ba83a14610189575b600080fd5b6101477f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61016d610168366004610929565b6102b8565b005b610177600881565b60405160ff9091168152602001610151565b61016d6102c4565b610199600181565b6040516101519190610942565b610147600181565b60005460ff165b6040519015158152602001610151565b6101cd6103b2565b6040516101519190610983565b61016d610440565b6101b5600081565b6101fd6101f83660046109f6565b61052c565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610151565b61014760015481565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b610147610566565b61016d61029f366004610929565b610578565b6101b5600181565b600160004280836101fd565b6102c181610665565b50565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103729190610a29565b6103a8576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b06106b8565b565b600280546103bf90610a4b565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb90610a4b565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610a29565b610524576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b061079e565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061057360015461085e565b905090565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190610a29565b61065c576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102c1816108a7565b6001548082108061067d575061067a8161085e565b82115b156106b4576040517fb416da7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60005460ff16610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff161561080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610720565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107743390565b600061271061088d7f000000000000000000000000000000000000000000000000000000000000000082610ace565b6108979084610ae6565b6108a19190610b23565b92915050565b806108de576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de28161090e8161085e565b6040805192835260208301919091520160405180910390a150565b60006020828403121561093b57600080fd5b5035919050565b602081016006831061097d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b818110156109b057858101830151858201604001528201610994565b818111156109c2576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215610a0857600080fd5b813569ffffffffffffffffffff81168114610a2257600080fd5b9392505050565b600060208284031215610a3b57600080fd5b81518015158114610a2257600080fd5b600181811c90821680610a5f57607f821691505b60208210811415610a99577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ae157610ae1610a9f565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b1e57610b1e610a9f565b500290565b600082610b59577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220ba820cc6c9cb5f687f5217b215de44ef9c10659550cdcbac5aa9e78aaa21d8c764736f6c634300080a0033";

type LPPriceFeedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPPriceFeedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPPriceFeedMock__factory extends ContractFactory {
  constructor(...args: LPPriceFeedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addressProvider: string,
    range: BigNumberish,
    descrition: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LPPriceFeedMock> {
    return super.deploy(
      addressProvider,
      range,
      descrition,
      overrides || {}
    ) as Promise<LPPriceFeedMock>;
  }
  override getDeployTransaction(
    addressProvider: string,
    range: BigNumberish,
    descrition: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      range,
      descrition,
      overrides || {}
    );
  }
  override attach(address: string): LPPriceFeedMock {
    return super.attach(address) as LPPriceFeedMock;
  }
  override connect(signer: Signer): LPPriceFeedMock__factory {
    return super.connect(signer) as LPPriceFeedMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPPriceFeedMockInterface {
    return new utils.Interface(_abi) as LPPriceFeedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPPriceFeedMock {
    return new Contract(address, _abi, signerOrProvider) as LPPriceFeedMock;
  }
}
