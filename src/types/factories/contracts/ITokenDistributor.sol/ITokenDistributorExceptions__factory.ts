/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITokenDistributorExceptions,
  ITokenDistributorExceptionsInterface,
} from "../../../contracts/ITokenDistributor.sol/ITokenDistributorExceptions";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "ContributorNotRegisteredException",
    type: "error",
  },
  {
    inputs: [],
    name: "MultiplierValueIncorrect",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NonZeroBalanceAfterDistributionException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotDistributionControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTreasuryException",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingCategoryDoesntExist",
    type: "error",
  },
];

export class ITokenDistributorExceptions__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenDistributorExceptionsInterface {
    return new utils.Interface(_abi) as ITokenDistributorExceptionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITokenDistributorExceptions {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITokenDistributorExceptions;
  }
}
