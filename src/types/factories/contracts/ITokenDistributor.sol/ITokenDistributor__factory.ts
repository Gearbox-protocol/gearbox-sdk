/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITokenDistributor,
  ITokenDistributorInterface,
} from "../../../contracts/ITokenDistributor.sol/ITokenDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "ContributorNotRegisteredException",
    type: "error",
  },
  {
    inputs: [],
    name: "MultiplierValueIncorrect",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NonZeroBalanceAfterDistributionException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotDistributionControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTreasuryException",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingCategoryDoesntExist",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewDistrubtionController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "category",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "multiplier",
        type: "uint16",
      },
    ],
    name: "NewVotingMultiplier",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "vestingContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "votingPowerCategory",
        type: "string",
      },
    ],
    name: "VestingContractAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vestingContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevReceiver",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newReceiver",
        type: "address",
      },
    ],
    name: "VestingContractReceiverUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "vestedBalanceWeighted",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contributor",
        type: "address",
      },
    ],
    name: "contributorVestingContracts",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contributorsList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "countContributors",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "votingCategory",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "cliffDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cliffAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingNumSteps",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vestingAmount",
        type: "uint256",
      },
    ],
    name: "distributeTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contributor",
        type: "address",
      },
    ],
    name: "updateContributor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateContributors",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "category",
        type: "string",
      },
      {
        internalType: "uint16",
        name: "multiplier",
        type: "uint16",
      },
    ],
    name: "updateVotingCategoryMultiplier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ITokenDistributor__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenDistributorInterface {
    return new utils.Interface(_abi) as ITokenDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITokenDistributor {
    return new Contract(address, _abi, signerOrProvider) as ITokenDistributor;
  }
}
