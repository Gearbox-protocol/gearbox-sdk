/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type UniswapV2PairStatusStruct = {
  token0: AddressLike;
  token1: AddressLike;
  allowed: boolean;
};

export type UniswapV2PairStatusStructOutput = [
  token0: string,
  token1: string,
  allowed: boolean
] & { token0: string; token1: string; allowed: boolean };

export interface IUniswapV2AdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "creditManager"
      | "isPairAllowed"
      | "setPairStatusBatch"
      | "swapDiffTokensForTokens"
      | "swapExactTokensForTokens"
      | "swapTokensForExactTokens"
      | "targetContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetPairStatus"): EventFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPairAllowed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairStatusBatch",
    values: [UniswapV2PairStatusStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDiffTokensForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPairAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairStatusBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapDiffTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
}

export namespace SetPairStatusEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [token0: string, token1: string, allowed: boolean];
  export interface OutputObject {
    token0: string;
    token1: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUniswapV2Adapter extends BaseContract {
  connect(runner?: ContractRunner | null): IUniswapV2Adapter;
  waitForDeployment(): Promise<this>;

  interface: IUniswapV2AdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _gearboxAdapterType: TypedContractMethod<[], [bigint], "view">;

  _gearboxAdapterVersion: TypedContractMethod<[], [bigint], "view">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  creditManager: TypedContractMethod<[], [string], "view">;

  isPairAllowed: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [boolean],
    "view"
  >;

  setPairStatusBatch: TypedContractMethod<
    [pairs: UniswapV2PairStatusStruct[]],
    [void],
    "nonpayable"
  >;

  swapDiffTokensForTokens: TypedContractMethod<
    [
      leftoverAmount: BigNumberish,
      rateMinRAY: BigNumberish,
      path: AddressLike[],
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      arg3: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      arg3: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  targetContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_gearboxAdapterType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_gearboxAdapterVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isPairAllowed"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPairStatusBatch"
  ): TypedContractMethod<
    [pairs: UniswapV2PairStatusStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapDiffTokensForTokens"
  ): TypedContractMethod<
    [
      leftoverAmount: BigNumberish,
      rateMinRAY: BigNumberish,
      path: AddressLike[],
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      arg3: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      arg3: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "targetContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SetPairStatus"
  ): TypedContractEvent<
    SetPairStatusEvent.InputTuple,
    SetPairStatusEvent.OutputTuple,
    SetPairStatusEvent.OutputObject
  >;

  filters: {
    "SetPairStatus(address,address,bool)": TypedContractEvent<
      SetPairStatusEvent.InputTuple,
      SetPairStatusEvent.OutputTuple,
      SetPairStatusEvent.OutputObject
    >;
    SetPairStatus: TypedContractEvent<
      SetPairStatusEvent.InputTuple,
      SetPairStatusEvent.OutputTuple,
      SetPairStatusEvent.OutputObject
    >;
  };
}
