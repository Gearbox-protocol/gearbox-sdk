/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ILPPriceFeedInterface extends utils.Interface {
  functions: {
    "allowBoundsUpdate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "forbidBoundsUpdate()": FunctionFragment;
    "getAggregatePrice()": FunctionFragment;
    "getLPExchangeRate()": FunctionFragment;
    "getScale()": FunctionFragment;
    "lastBoundsUpdate()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "lowerBound()": FunctionFragment;
    "lpContract()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "priceFeedType()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "setLimiter(uint256)": FunctionFragment;
    "skipPriceCheck()": FunctionFragment;
    "updateBounds(bytes)": FunctionFragment;
    "updateBoundsAllowed()": FunctionFragment;
    "upperBound()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowBoundsUpdate"
      | "decimals"
      | "description"
      | "forbidBoundsUpdate"
      | "getAggregatePrice"
      | "getLPExchangeRate"
      | "getScale"
      | "lastBoundsUpdate"
      | "latestRoundData"
      | "lowerBound"
      | "lpContract"
      | "lpToken"
      | "priceFeedType"
      | "priceOracle"
      | "setLimiter"
      | "skipPriceCheck"
      | "updateBounds"
      | "updateBoundsAllowed"
      | "upperBound"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowBoundsUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbidBoundsUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLPExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBoundsUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeedType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLimiter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "skipPriceCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBounds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoundsAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upperBound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allowBoundsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidBoundsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBoundsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lowerBound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skipPriceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoundsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upperBound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "SetBounds(uint256,uint256)": EventFragment;
    "SetUpdateBoundsAllowed(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetBounds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUpdateBoundsAllowed"): EventFragment;
}

export interface SetBoundsEventObject {
  lowerBound: BigNumber;
  upperBound: BigNumber;
}
export type SetBoundsEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetBoundsEventObject
>;

export type SetBoundsEventFilter = TypedEventFilter<SetBoundsEvent>;

export interface SetUpdateBoundsAllowedEventObject {
  allowed: boolean;
}
export type SetUpdateBoundsAllowedEvent = TypedEvent<
  [boolean],
  SetUpdateBoundsAllowedEventObject
>;

export type SetUpdateBoundsAllowedEventFilter =
  TypedEventFilter<SetUpdateBoundsAllowedEvent>;

export interface ILPPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILPPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    forbidBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAggregatePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { answer: BigNumber }>;

    getLPExchangeRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exchangeRate: BigNumber }>;

    getScale(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { scale: BigNumber }>;

    lastBoundsUpdate(overrides?: CallOverrides): Promise<[number]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        answer: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    lowerBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpContract(overrides?: CallOverrides): Promise<[string]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    priceFeedType(overrides?: CallOverrides): Promise<[number]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    setLimiter(
      newLowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skipPriceCheck(overrides?: CallOverrides): Promise<[boolean]>;

    updateBounds(
      updateData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBoundsAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    upperBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowBoundsUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  forbidBoundsUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAggregatePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLPExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getScale(overrides?: CallOverrides): Promise<BigNumber>;

  lastBoundsUpdate(overrides?: CallOverrides): Promise<number>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      answer: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  lowerBound(overrides?: CallOverrides): Promise<BigNumber>;

  lpContract(overrides?: CallOverrides): Promise<string>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  priceFeedType(overrides?: CallOverrides): Promise<number>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  setLimiter(
    newLowerBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

  updateBounds(
    updateData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBoundsAllowed(overrides?: CallOverrides): Promise<boolean>;

  upperBound(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowBoundsUpdate(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    forbidBoundsUpdate(overrides?: CallOverrides): Promise<void>;

    getAggregatePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLPExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getScale(overrides?: CallOverrides): Promise<BigNumber>;

    lastBoundsUpdate(overrides?: CallOverrides): Promise<number>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        answer: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    lowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    lpContract(overrides?: CallOverrides): Promise<string>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    priceFeedType(overrides?: CallOverrides): Promise<number>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    setLimiter(
      newLowerBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    skipPriceCheck(overrides?: CallOverrides): Promise<boolean>;

    updateBounds(
      updateData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoundsAllowed(overrides?: CallOverrides): Promise<boolean>;

    upperBound(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "SetBounds(uint256,uint256)"(
      lowerBound?: null,
      upperBound?: null
    ): SetBoundsEventFilter;
    SetBounds(lowerBound?: null, upperBound?: null): SetBoundsEventFilter;

    "SetUpdateBoundsAllowed(bool)"(
      allowed?: null
    ): SetUpdateBoundsAllowedEventFilter;
    SetUpdateBoundsAllowed(allowed?: null): SetUpdateBoundsAllowedEventFilter;
  };

  estimateGas: {
    allowBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    forbidBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAggregatePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLPExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getScale(overrides?: CallOverrides): Promise<BigNumber>;

    lastBoundsUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    lowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    lpContract(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedType(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setLimiter(
      newLowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skipPriceCheck(overrides?: CallOverrides): Promise<BigNumber>;

    updateBounds(
      updateData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBoundsAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    upperBound(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forbidBoundsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAggregatePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLPExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBoundsUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowerBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLimiter(
      newLowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skipPriceCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBounds(
      updateData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBoundsAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upperBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
