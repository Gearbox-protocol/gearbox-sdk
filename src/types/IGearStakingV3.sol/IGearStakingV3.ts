/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MultiVoteStruct = {
  votingContract: AddressLike;
  voteAmount: BigNumberish;
  isIncrease: boolean;
  extraData: BytesLike;
};

export type MultiVoteStructOutput = [
  votingContract: string,
  voteAmount: bigint,
  isIncrease: boolean,
  extraData: string
] & {
  votingContract: string;
  voteAmount: bigint;
  isIncrease: boolean;
  extraData: string;
};

export interface IGearStakingV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowedVotingContract"
      | "availableBalance"
      | "balanceOf"
      | "claimWithdrawals"
      | "deposit"
      | "depositOnMigration"
      | "depositWithPermit"
      | "firstEpochTimestamp"
      | "gear"
      | "getCurrentEpoch"
      | "getWithdrawableAmounts"
      | "migrate"
      | "migrator"
      | "multivote"
      | "setMigrator"
      | "setSuccessor"
      | "setVotingContractStatus"
      | "successor"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimGearWithdrawal"
      | "DepositGear"
      | "MigrateGear"
      | "ScheduleGearWithdrawal"
      | "SetMigrator"
      | "SetSuccessor"
      | "SetVotingContractStatus"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowedVotingContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, MultiVoteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnMigration",
    values: [BigNumberish, AddressLike, MultiVoteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      BigNumberish,
      MultiVoteStruct[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "firstEpochTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, MultiVoteStruct[], MultiVoteStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multivote",
    values: [MultiVoteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuccessor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingContractStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "successor", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, MultiVoteStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedVotingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOnMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEpochTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multivote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuccessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingContractStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "successor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ClaimGearWithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, to: string, amount: bigint];
  export interface OutputObject {
    user: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositGearEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrateGearEvent {
  export type InputTuple = [
    user: AddressLike,
    successor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, successor: string, amount: bigint];
  export interface OutputObject {
    user: string;
    successor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleGearWithdrawalEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMigratorEvent {
  export type InputTuple = [migrator: AddressLike];
  export type OutputTuple = [migrator: string];
  export interface OutputObject {
    migrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSuccessorEvent {
  export type InputTuple = [successor: AddressLike];
  export type OutputTuple = [successor: string];
  export interface OutputObject {
    successor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetVotingContractStatusEvent {
  export type InputTuple = [votingContract: AddressLike, status: BigNumberish];
  export type OutputTuple = [votingContract: string, status: bigint];
  export interface OutputObject {
    votingContract: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGearStakingV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IGearStakingV3;
  waitForDeployment(): Promise<this>;

  interface: IGearStakingV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowedVotingContract: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  availableBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  balanceOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  claimWithdrawals: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;

  depositOnMigration: TypedContractMethod<
    [amount: BigNumberish, onBehalfOf: AddressLike, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;

  depositWithPermit: TypedContractMethod<
    [
      amount: BigNumberish,
      votes: MultiVoteStruct[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  firstEpochTimestamp: TypedContractMethod<[], [bigint], "view">;

  gear: TypedContractMethod<[], [string], "view">;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  getWithdrawableAmounts: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, [bigint, bigint, bigint, bigint]] & {
        withdrawableNow: bigint;
        withdrawableInEpochs: [bigint, bigint, bigint, bigint];
      }
    ],
    "view"
  >;

  migrate: TypedContractMethod<
    [
      amount: BigNumberish,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[]
    ],
    [void],
    "nonpayable"
  >;

  migrator: TypedContractMethod<[], [string], "view">;

  multivote: TypedContractMethod<
    [votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;

  setMigrator: TypedContractMethod<
    [newMigrator: AddressLike],
    [void],
    "nonpayable"
  >;

  setSuccessor: TypedContractMethod<
    [newSuccessor: AddressLike],
    [void],
    "nonpayable"
  >;

  setVotingContractStatus: TypedContractMethod<
    [votingContract: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  successor: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowedVotingContract"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "availableBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimWithdrawals"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositOnMigration"
  ): TypedContractMethod<
    [amount: BigNumberish, onBehalfOf: AddressLike, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositWithPermit"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      votes: MultiVoteStruct[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "firstEpochTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gear"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawableAmounts"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, [bigint, bigint, bigint, bigint]] & {
        withdrawableNow: bigint;
        withdrawableInEpochs: [bigint, bigint, bigint, bigint];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multivote"
  ): TypedContractMethod<[votes: MultiVoteStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMigrator"
  ): TypedContractMethod<[newMigrator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSuccessor"
  ): TypedContractMethod<[newSuccessor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingContractStatus"
  ): TypedContractMethod<
    [votingContract: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "successor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, votes: MultiVoteStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimGearWithdrawal"
  ): TypedContractEvent<
    ClaimGearWithdrawalEvent.InputTuple,
    ClaimGearWithdrawalEvent.OutputTuple,
    ClaimGearWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "DepositGear"
  ): TypedContractEvent<
    DepositGearEvent.InputTuple,
    DepositGearEvent.OutputTuple,
    DepositGearEvent.OutputObject
  >;
  getEvent(
    key: "MigrateGear"
  ): TypedContractEvent<
    MigrateGearEvent.InputTuple,
    MigrateGearEvent.OutputTuple,
    MigrateGearEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleGearWithdrawal"
  ): TypedContractEvent<
    ScheduleGearWithdrawalEvent.InputTuple,
    ScheduleGearWithdrawalEvent.OutputTuple,
    ScheduleGearWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "SetMigrator"
  ): TypedContractEvent<
    SetMigratorEvent.InputTuple,
    SetMigratorEvent.OutputTuple,
    SetMigratorEvent.OutputObject
  >;
  getEvent(
    key: "SetSuccessor"
  ): TypedContractEvent<
    SetSuccessorEvent.InputTuple,
    SetSuccessorEvent.OutputTuple,
    SetSuccessorEvent.OutputObject
  >;
  getEvent(
    key: "SetVotingContractStatus"
  ): TypedContractEvent<
    SetVotingContractStatusEvent.InputTuple,
    SetVotingContractStatusEvent.OutputTuple,
    SetVotingContractStatusEvent.OutputObject
  >;

  filters: {
    "ClaimGearWithdrawal(address,address,uint256)": TypedContractEvent<
      ClaimGearWithdrawalEvent.InputTuple,
      ClaimGearWithdrawalEvent.OutputTuple,
      ClaimGearWithdrawalEvent.OutputObject
    >;
    ClaimGearWithdrawal: TypedContractEvent<
      ClaimGearWithdrawalEvent.InputTuple,
      ClaimGearWithdrawalEvent.OutputTuple,
      ClaimGearWithdrawalEvent.OutputObject
    >;

    "DepositGear(address,uint256)": TypedContractEvent<
      DepositGearEvent.InputTuple,
      DepositGearEvent.OutputTuple,
      DepositGearEvent.OutputObject
    >;
    DepositGear: TypedContractEvent<
      DepositGearEvent.InputTuple,
      DepositGearEvent.OutputTuple,
      DepositGearEvent.OutputObject
    >;

    "MigrateGear(address,address,uint256)": TypedContractEvent<
      MigrateGearEvent.InputTuple,
      MigrateGearEvent.OutputTuple,
      MigrateGearEvent.OutputObject
    >;
    MigrateGear: TypedContractEvent<
      MigrateGearEvent.InputTuple,
      MigrateGearEvent.OutputTuple,
      MigrateGearEvent.OutputObject
    >;

    "ScheduleGearWithdrawal(address,uint256)": TypedContractEvent<
      ScheduleGearWithdrawalEvent.InputTuple,
      ScheduleGearWithdrawalEvent.OutputTuple,
      ScheduleGearWithdrawalEvent.OutputObject
    >;
    ScheduleGearWithdrawal: TypedContractEvent<
      ScheduleGearWithdrawalEvent.InputTuple,
      ScheduleGearWithdrawalEvent.OutputTuple,
      ScheduleGearWithdrawalEvent.OutputObject
    >;

    "SetMigrator(address)": TypedContractEvent<
      SetMigratorEvent.InputTuple,
      SetMigratorEvent.OutputTuple,
      SetMigratorEvent.OutputObject
    >;
    SetMigrator: TypedContractEvent<
      SetMigratorEvent.InputTuple,
      SetMigratorEvent.OutputTuple,
      SetMigratorEvent.OutputObject
    >;

    "SetSuccessor(address)": TypedContractEvent<
      SetSuccessorEvent.InputTuple,
      SetSuccessorEvent.OutputTuple,
      SetSuccessorEvent.OutputObject
    >;
    SetSuccessor: TypedContractEvent<
      SetSuccessorEvent.InputTuple,
      SetSuccessorEvent.OutputTuple,
      SetSuccessorEvent.OutputObject
    >;

    "SetVotingContractStatus(address,uint8)": TypedContractEvent<
      SetVotingContractStatusEvent.InputTuple,
      SetVotingContractStatusEvent.OutputTuple,
      SetVotingContractStatusEvent.OutputObject
    >;
    SetVotingContractStatus: TypedContractEvent<
      SetVotingContractStatusEvent.InputTuple,
      SetVotingContractStatusEvent.OutputTuple,
      SetVotingContractStatusEvent.OutputObject
    >;
  };
}
