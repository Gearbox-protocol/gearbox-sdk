/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type UniswapV3PoolStatusStruct = {
  token0: AddressLike;
  token1: AddressLike;
  fee: BigNumberish;
  allowed: boolean;
};

export type UniswapV3PoolStatusStructOutput = [
  token0: string,
  token1: string,
  fee: bigint,
  allowed: boolean
] & { token0: string; token1: string; fee: bigint; allowed: boolean };

export declare namespace IUniswapV3AdapterTypes {
  export type ExactDiffInputParamsStruct = {
    path: BytesLike;
    deadline: BigNumberish;
    leftoverAmount: BigNumberish;
    rateMinRAY: BigNumberish;
  };

  export type ExactDiffInputParamsStructOutput = [
    path: string,
    deadline: bigint,
    leftoverAmount: bigint,
    rateMinRAY: bigint
  ] & {
    path: string;
    deadline: bigint;
    leftoverAmount: bigint;
    rateMinRAY: bigint;
  };

  export type ExactDiffInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    deadline: BigNumberish;
    leftoverAmount: BigNumberish;
    rateMinRAY: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactDiffInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    deadline: bigint,
    leftoverAmount: bigint,
    rateMinRAY: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    deadline: bigint;
    leftoverAmount: bigint;
    rateMinRAY: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace ISwapRouter {
  export type ExactInputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    deadline: BigNumberish;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
  };

  export type ExactInputParamsStructOutput = [
    path: string,
    recipient: string,
    deadline: bigint,
    amountIn: bigint,
    amountOutMinimum: bigint
  ] & {
    path: string;
    recipient: string;
    deadline: bigint;
    amountIn: bigint;
    amountOutMinimum: bigint;
  };

  export type ExactInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    deadline: BigNumberish;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    deadline: bigint,
    amountIn: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    deadline: bigint;
    amountIn: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };

  export type ExactOutputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    deadline: BigNumberish;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
  };

  export type ExactOutputParamsStructOutput = [
    path: string,
    recipient: string,
    deadline: bigint,
    amountOut: bigint,
    amountInMaximum: bigint
  ] & {
    path: string;
    recipient: string;
    deadline: bigint;
    amountOut: bigint;
    amountInMaximum: bigint;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    deadline: BigNumberish;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactOutputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    deadline: bigint,
    amountOut: bigint,
    amountInMaximum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    deadline: bigint;
    amountOut: bigint;
    amountInMaximum: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export interface IUniswapV3AdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "creditManager"
      | "exactDiffInput"
      | "exactDiffInputSingle"
      | "exactInput"
      | "exactInputSingle"
      | "exactOutput"
      | "exactOutputSingle"
      | "isPoolAllowed"
      | "setPoolStatusBatch"
      | "targetContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetPoolStatus"): EventFragment;

  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactDiffInput",
    values: [IUniswapV3AdapterTypes.ExactDiffInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactDiffInputSingle",
    values: [IUniswapV3AdapterTypes.ExactDiffInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [ISwapRouter.ExactInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [ISwapRouter.ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [ISwapRouter.ExactOutputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSingle",
    values: [ISwapRouter.ExactOutputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolStatusBatch",
    values: [UniswapV3PoolStatusStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactDiffInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactDiffInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolStatusBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
}

export namespace SetPoolStatusEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    fee: BigNumberish,
    allowed: boolean
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    fee: bigint,
    allowed: boolean
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    fee: bigint;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUniswapV3Adapter extends BaseContract {
  connect(runner?: ContractRunner | null): IUniswapV3Adapter;
  waitForDeployment(): Promise<this>;

  interface: IUniswapV3AdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _gearboxAdapterType: TypedContractMethod<[], [bigint], "view">;

  _gearboxAdapterVersion: TypedContractMethod<[], [bigint], "view">;

  addressProvider: TypedContractMethod<[], [string], "view">;

  creditManager: TypedContractMethod<[], [string], "view">;

  exactDiffInput: TypedContractMethod<
    [params: IUniswapV3AdapterTypes.ExactDiffInputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  exactDiffInputSingle: TypedContractMethod<
    [params: IUniswapV3AdapterTypes.ExactDiffInputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  exactInput: TypedContractMethod<
    [params: ISwapRouter.ExactInputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  exactInputSingle: TypedContractMethod<
    [params: ISwapRouter.ExactInputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  exactOutput: TypedContractMethod<
    [params: ISwapRouter.ExactOutputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  exactOutputSingle: TypedContractMethod<
    [params: ISwapRouter.ExactOutputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;

  isPoolAllowed: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, fee: BigNumberish],
    [boolean],
    "view"
  >;

  setPoolStatusBatch: TypedContractMethod<
    [pools: UniswapV3PoolStatusStruct[]],
    [void],
    "nonpayable"
  >;

  targetContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_gearboxAdapterType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_gearboxAdapterVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exactDiffInput"
  ): TypedContractMethod<
    [params: IUniswapV3AdapterTypes.ExactDiffInputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exactDiffInputSingle"
  ): TypedContractMethod<
    [params: IUniswapV3AdapterTypes.ExactDiffInputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exactInput"
  ): TypedContractMethod<
    [params: ISwapRouter.ExactInputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exactInputSingle"
  ): TypedContractMethod<
    [params: ISwapRouter.ExactInputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exactOutput"
  ): TypedContractMethod<
    [params: ISwapRouter.ExactOutputParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exactOutputSingle"
  ): TypedContractMethod<
    [params: ISwapRouter.ExactOutputSingleParamsStruct],
    [[bigint, bigint] & { tokensToEnable: bigint; tokensToDisable: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPoolAllowed"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, fee: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPoolStatusBatch"
  ): TypedContractMethod<
    [pools: UniswapV3PoolStatusStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "targetContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SetPoolStatus"
  ): TypedContractEvent<
    SetPoolStatusEvent.InputTuple,
    SetPoolStatusEvent.OutputTuple,
    SetPoolStatusEvent.OutputObject
  >;

  filters: {
    "SetPoolStatus(address,address,uint24,bool)": TypedContractEvent<
      SetPoolStatusEvent.InputTuple,
      SetPoolStatusEvent.OutputTuple,
      SetPoolStatusEvent.OutputObject
    >;
    SetPoolStatus: TypedContractEvent<
      SetPoolStatusEvent.InputTuple,
      SetPoolStatusEvent.OutputTuple,
      SetPoolStatusEvent.OutputObject
    >;
  };
}
