/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ErrorsInterface extends ethers.utils.Interface {
  functions: {
    "ACL_ADMIN_IS_ALREADY_ADDED()": FunctionFragment;
    "ACL_CALLER_NOT_CONFIGURATOR()": FunctionFragment;
    "ACL_CALLER_NOT_PAUSABLE_ADMIN()": FunctionFragment;
    "AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK()": FunctionFragment;
    "AF_CANT_TAKE_LAST_ACCOUNT()": FunctionFragment;
    "AF_CREDIT_ACCOUNT_NOT_IN_STOCK()": FunctionFragment;
    "AF_MINING_IS_FINISHED()": FunctionFragment;
    "AM_ACCOUNT_FACTORY_ALREADY_EXISTS()": FunctionFragment;
    "AM_ACCOUNT_FACTORY_ONLY()": FunctionFragment;
    "AM_BID_LOWER_THAN_MINIMAL()": FunctionFragment;
    "AM_NO_BIDS_WERE_MADE()": FunctionFragment;
    "AM_USER_ALREADY_HAS_BID()": FunctionFragment;
    "AM_USER_HAS_NO_BIDS()": FunctionFragment;
    "AS_ADDRESS_NOT_FOUND()": FunctionFragment;
    "CA_CREDIT_MANAGER_ONLY()": FunctionFragment;
    "CA_FACTORY_ONLY()": FunctionFragment;
    "CF_ADAPTERS_ONLY()": FunctionFragment;
    "CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST()": FunctionFragment;
    "CF_CREDIT_MANAGERS_ONLY()": FunctionFragment;
    "CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP()": FunctionFragment;
    "CF_INCORRECT_CHI_THRESHOLD()": FunctionFragment;
    "CF_INCORRECT_FAST_CHECK()": FunctionFragment;
    "CF_INCORRECT_LIQUIDATION_THRESHOLD()": FunctionFragment;
    "CF_NON_TOKEN_CONTRACT()": FunctionFragment;
    "CF_OPERATION_LOW_HEALTH_FACTOR()": FunctionFragment;
    "CF_POOLS_ONLY()": FunctionFragment;
    "CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE()": FunctionFragment;
    "CF_TOKEN_IS_NOT_ALLOWED()": FunctionFragment;
    "CF_TOO_MUCH_ALLOWED_TOKENS()": FunctionFragment;
    "CF_UNDERLYING_TOKEN_FILTER_CONFLICT()": FunctionFragment;
    "CM_CANT_CLOSE_WITH_LOSS()": FunctionFragment;
    "CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL()": FunctionFragment;
    "CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR()": FunctionFragment;
    "CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR()": FunctionFragment;
    "CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED()": FunctionFragment;
    "CM_INCORRECT_AMOUNT()": FunctionFragment;
    "CM_INCORRECT_FEES()": FunctionFragment;
    "CM_INCORRECT_LEVERAGE_FACTOR()": FunctionFragment;
    "CM_INCORRECT_LIMITS()": FunctionFragment;
    "CM_INCORRECT_NEW_OWNER()": FunctionFragment;
    "CM_MAX_LEVERAGE_IS_TOO_HIGH()": FunctionFragment;
    "CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN()": FunctionFragment;
    "CM_NO_OPEN_ACCOUNT()": FunctionFragment;
    "CM_SWAP_CONTRACT_IS_NOT_ALLOWED()": FunctionFragment;
    "CM_TARGET_CONTRACT_iS_NOT_ALLOWED()": FunctionFragment;
    "CM_TRANSFER_FAILED()": FunctionFragment;
    "CM_UNDERLYING_IS_NOT_IN_STABLE_POOL()": FunctionFragment;
    "CM_WETH_GATEWAY_ONLY()": FunctionFragment;
    "CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT()": FunctionFragment;
    "CR_CREDIT_ACCOUNT_MANAGERS_ONLY()": FunctionFragment;
    "CR_CREDIT_MANAGER_ALREADY_ADDED()": FunctionFragment;
    "CR_POOL_ALREADY_ADDED()": FunctionFragment;
    "IMMUTABLE_CONFIG_CHANGES_FORBIDDEN()": FunctionFragment;
    "LA_INCORRECT_MSG()": FunctionFragment;
    "LA_INCORRECT_VALUE()": FunctionFragment;
    "LA_UNKNOWN_LP_INTERFACE()": FunctionFragment;
    "LA_UNKNOWN_SWAP_INTERFACE()": FunctionFragment;
    "MATH_ADDITION_OVERFLOW()": FunctionFragment;
    "MATH_DIVISION_BY_ZERO()": FunctionFragment;
    "MATH_MULTIPLICATION_OVERFLOW()": FunctionFragment;
    "NOT_IMPLEMENTED()": FunctionFragment;
    "POOL_CANT_ADD_CREDIT_MANAGER_TWICE()": FunctionFragment;
    "POOL_CREDIT_MANAGERS_ONLY()": FunctionFragment;
    "POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER()": FunctionFragment;
    "POOL_INCORRECT_WITHDRAW_FEE()": FunctionFragment;
    "POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT()": FunctionFragment;
    "PO_PRICE_FEED_DOESNT_EXIST()": FunctionFragment;
    "PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED()": FunctionFragment;
    "WG_DESTINATION_IS_NOT_CREDIT_MANAGER()": FunctionFragment;
    "WG_DESTINATION_IS_NOT_POOL()": FunctionFragment;
    "WG_DESTINATION_IS_NOT_WETH_COMPATIBLE()": FunctionFragment;
    "WG_FALLBACK_IS_NOT_ALLOWED()": FunctionFragment;
    "WG_RECEIVE_IS_NOT_ALLOWED()": FunctionFragment;
    "ZERO_ADDRESS_IS_NOT_ALLOWED()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACL_ADMIN_IS_ALREADY_ADDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACL_CALLER_NOT_CONFIGURATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACL_CALLER_NOT_PAUSABLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AF_CANT_TAKE_LAST_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AF_CREDIT_ACCOUNT_NOT_IN_STOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AF_MINING_IS_FINISHED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_ACCOUNT_FACTORY_ALREADY_EXISTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_ACCOUNT_FACTORY_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_BID_LOWER_THAN_MINIMAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_NO_BIDS_WERE_MADE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_USER_ALREADY_HAS_BID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AM_USER_HAS_NO_BIDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AS_ADDRESS_NOT_FOUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CA_CREDIT_MANAGER_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CA_FACTORY_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_ADAPTERS_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_CREDIT_MANAGERS_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_INCORRECT_CHI_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_INCORRECT_FAST_CHECK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_INCORRECT_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_NON_TOKEN_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_OPERATION_LOW_HEALTH_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_POOLS_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_TOKEN_IS_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_TOO_MUCH_ALLOWED_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CF_UNDERLYING_TOKEN_FILTER_CONFLICT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_CANT_CLOSE_WITH_LOSS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_INCORRECT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_INCORRECT_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_INCORRECT_LEVERAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_INCORRECT_LIMITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_INCORRECT_NEW_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_MAX_LEVERAGE_IS_TOO_HIGH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_NO_OPEN_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_SWAP_CONTRACT_IS_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_TARGET_CONTRACT_iS_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_TRANSFER_FAILED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_UNDERLYING_IS_NOT_IN_STABLE_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_WETH_GATEWAY_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CR_CREDIT_ACCOUNT_MANAGERS_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CR_CREDIT_MANAGER_ALREADY_ADDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CR_POOL_ALREADY_ADDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMMUTABLE_CONFIG_CHANGES_FORBIDDEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LA_INCORRECT_MSG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LA_INCORRECT_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LA_UNKNOWN_LP_INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LA_UNKNOWN_SWAP_INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_ADDITION_OVERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_DIVISION_BY_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_MULTIPLICATION_OVERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOT_IMPLEMENTED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_CANT_ADD_CREDIT_MANAGER_TWICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_CREDIT_MANAGERS_ONLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_INCORRECT_WITHDRAW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PO_PRICE_FEED_DOESNT_EXIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WG_DESTINATION_IS_NOT_CREDIT_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WG_DESTINATION_IS_NOT_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WG_DESTINATION_IS_NOT_WETH_COMPATIBLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WG_FALLBACK_IS_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WG_RECEIVE_IS_NOT_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS_IS_NOT_ALLOWED",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ACL_ADMIN_IS_ALREADY_ADDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACL_CALLER_NOT_CONFIGURATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACL_CALLER_NOT_PAUSABLE_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AF_CANT_TAKE_LAST_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AF_CREDIT_ACCOUNT_NOT_IN_STOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AF_MINING_IS_FINISHED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_ACCOUNT_FACTORY_ALREADY_EXISTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_ACCOUNT_FACTORY_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_BID_LOWER_THAN_MINIMAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_NO_BIDS_WERE_MADE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_USER_ALREADY_HAS_BID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AM_USER_HAS_NO_BIDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AS_ADDRESS_NOT_FOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CA_CREDIT_MANAGER_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CA_FACTORY_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_ADAPTERS_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_CREDIT_MANAGERS_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_INCORRECT_CHI_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_INCORRECT_FAST_CHECK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_INCORRECT_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_NON_TOKEN_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_OPERATION_LOW_HEALTH_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_POOLS_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_TOKEN_IS_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_TOO_MUCH_ALLOWED_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CF_UNDERLYING_TOKEN_FILTER_CONFLICT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_CANT_CLOSE_WITH_LOSS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_INCORRECT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_INCORRECT_FEES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_INCORRECT_LEVERAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_INCORRECT_LIMITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_INCORRECT_NEW_OWNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_MAX_LEVERAGE_IS_TOO_HIGH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_NO_OPEN_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_SWAP_CONTRACT_IS_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_TARGET_CONTRACT_iS_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_TRANSFER_FAILED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_UNDERLYING_IS_NOT_IN_STABLE_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_WETH_GATEWAY_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CR_CREDIT_ACCOUNT_MANAGERS_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CR_CREDIT_MANAGER_ALREADY_ADDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CR_POOL_ALREADY_ADDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMMUTABLE_CONFIG_CHANGES_FORBIDDEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LA_INCORRECT_MSG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LA_INCORRECT_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LA_UNKNOWN_LP_INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LA_UNKNOWN_SWAP_INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_ADDITION_OVERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_DIVISION_BY_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_MULTIPLICATION_OVERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NOT_IMPLEMENTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_CANT_ADD_CREDIT_MANAGER_TWICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_CREDIT_MANAGERS_ONLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_INCORRECT_WITHDRAW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PO_PRICE_FEED_DOESNT_EXIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WG_DESTINATION_IS_NOT_CREDIT_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WG_DESTINATION_IS_NOT_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WG_DESTINATION_IS_NOT_WETH_COMPATIBLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WG_FALLBACK_IS_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WG_RECEIVE_IS_NOT_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS_IS_NOT_ALLOWED",
    data: BytesLike
  ): Result;

  events: {};
}

export class Errors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ErrorsInterface;

  functions: {
    ACL_ADMIN_IS_ALREADY_ADDED(overrides?: CallOverrides): Promise<[string]>;

    ACL_CALLER_NOT_CONFIGURATOR(overrides?: CallOverrides): Promise<[string]>;

    ACL_CALLER_NOT_PAUSABLE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK(
      overrides?: CallOverrides
    ): Promise<[string]>;

    AF_CANT_TAKE_LAST_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    AF_CREDIT_ACCOUNT_NOT_IN_STOCK(
      overrides?: CallOverrides
    ): Promise<[string]>;

    AF_MINING_IS_FINISHED(overrides?: CallOverrides): Promise<[string]>;

    AM_ACCOUNT_FACTORY_ALREADY_EXISTS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    AM_ACCOUNT_FACTORY_ONLY(overrides?: CallOverrides): Promise<[string]>;

    AM_BID_LOWER_THAN_MINIMAL(overrides?: CallOverrides): Promise<[string]>;

    AM_NO_BIDS_WERE_MADE(overrides?: CallOverrides): Promise<[string]>;

    AM_USER_ALREADY_HAS_BID(overrides?: CallOverrides): Promise<[string]>;

    AM_USER_HAS_NO_BIDS(overrides?: CallOverrides): Promise<[string]>;

    AS_ADDRESS_NOT_FOUND(overrides?: CallOverrides): Promise<[string]>;

    CA_CREDIT_MANAGER_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CA_FACTORY_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CF_ADAPTERS_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CF_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CF_INCORRECT_CHI_THRESHOLD(overrides?: CallOverrides): Promise<[string]>;

    CF_INCORRECT_FAST_CHECK(overrides?: CallOverrides): Promise<[string]>;

    CF_INCORRECT_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CF_NON_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    CF_OPERATION_LOW_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CF_POOLS_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CF_TOKEN_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<[string]>;

    CF_TOO_MUCH_ALLOWED_TOKENS(overrides?: CallOverrides): Promise<[string]>;

    CF_UNDERLYING_TOKEN_FILTER_CONFLICT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_CANT_CLOSE_WITH_LOSS(overrides?: CallOverrides): Promise<[string]>;

    CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_INCORRECT_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    CM_INCORRECT_FEES(overrides?: CallOverrides): Promise<[string]>;

    CM_INCORRECT_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<[string]>;

    CM_INCORRECT_LIMITS(overrides?: CallOverrides): Promise<[string]>;

    CM_INCORRECT_NEW_OWNER(overrides?: CallOverrides): Promise<[string]>;

    CM_MAX_LEVERAGE_IS_TOO_HIGH(overrides?: CallOverrides): Promise<[string]>;

    CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_NO_OPEN_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    CM_SWAP_CONTRACT_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_TARGET_CONTRACT_iS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_TRANSFER_FAILED(overrides?: CallOverrides): Promise<[string]>;

    CM_UNDERLYING_IS_NOT_IN_STABLE_POOL(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CM_WETH_GATEWAY_ONLY(overrides?: CallOverrides): Promise<[string]>;

    CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CR_CREDIT_ACCOUNT_MANAGERS_ONLY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CR_CREDIT_MANAGER_ALREADY_ADDED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CR_POOL_ALREADY_ADDED(overrides?: CallOverrides): Promise<[string]>;

    IMMUTABLE_CONFIG_CHANGES_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LA_INCORRECT_MSG(overrides?: CallOverrides): Promise<[string]>;

    LA_INCORRECT_VALUE(overrides?: CallOverrides): Promise<[string]>;

    LA_UNKNOWN_LP_INTERFACE(overrides?: CallOverrides): Promise<[string]>;

    LA_UNKNOWN_SWAP_INTERFACE(overrides?: CallOverrides): Promise<[string]>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<[string]>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<[string]>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<[string]>;

    NOT_IMPLEMENTED(overrides?: CallOverrides): Promise<[string]>;

    POOL_CANT_ADD_CREDIT_MANAGER_TWICE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    POOL_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<[string]>;

    POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER(
      overrides?: CallOverrides
    ): Promise<[string]>;

    POOL_INCORRECT_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[string]>;

    POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PO_PRICE_FEED_DOESNT_EXIST(overrides?: CallOverrides): Promise<[string]>;

    PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WG_DESTINATION_IS_NOT_CREDIT_MANAGER(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WG_DESTINATION_IS_NOT_POOL(overrides?: CallOverrides): Promise<[string]>;

    WG_DESTINATION_IS_NOT_WETH_COMPATIBLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WG_FALLBACK_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<[string]>;

    WG_RECEIVE_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<[string]>;

    ZERO_ADDRESS_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<[string]>;
  };

  ACL_ADMIN_IS_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

  ACL_CALLER_NOT_CONFIGURATOR(overrides?: CallOverrides): Promise<string>;

  ACL_CALLER_NOT_PAUSABLE_ADMIN(overrides?: CallOverrides): Promise<string>;

  AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK(
    overrides?: CallOverrides
  ): Promise<string>;

  AF_CANT_TAKE_LAST_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  AF_CREDIT_ACCOUNT_NOT_IN_STOCK(overrides?: CallOverrides): Promise<string>;

  AF_MINING_IS_FINISHED(overrides?: CallOverrides): Promise<string>;

  AM_ACCOUNT_FACTORY_ALREADY_EXISTS(overrides?: CallOverrides): Promise<string>;

  AM_ACCOUNT_FACTORY_ONLY(overrides?: CallOverrides): Promise<string>;

  AM_BID_LOWER_THAN_MINIMAL(overrides?: CallOverrides): Promise<string>;

  AM_NO_BIDS_WERE_MADE(overrides?: CallOverrides): Promise<string>;

  AM_USER_ALREADY_HAS_BID(overrides?: CallOverrides): Promise<string>;

  AM_USER_HAS_NO_BIDS(overrides?: CallOverrides): Promise<string>;

  AS_ADDRESS_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

  CA_CREDIT_MANAGER_ONLY(overrides?: CallOverrides): Promise<string>;

  CA_FACTORY_ONLY(overrides?: CallOverrides): Promise<string>;

  CF_ADAPTERS_ONLY(overrides?: CallOverrides): Promise<string>;

  CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST(
    overrides?: CallOverrides
  ): Promise<string>;

  CF_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

  CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP(
    overrides?: CallOverrides
  ): Promise<string>;

  CF_INCORRECT_CHI_THRESHOLD(overrides?: CallOverrides): Promise<string>;

  CF_INCORRECT_FAST_CHECK(overrides?: CallOverrides): Promise<string>;

  CF_INCORRECT_LIQUIDATION_THRESHOLD(
    overrides?: CallOverrides
  ): Promise<string>;

  CF_NON_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

  CF_OPERATION_LOW_HEALTH_FACTOR(overrides?: CallOverrides): Promise<string>;

  CF_POOLS_ONLY(overrides?: CallOverrides): Promise<string>;

  CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE(
    overrides?: CallOverrides
  ): Promise<string>;

  CF_TOKEN_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  CF_TOO_MUCH_ALLOWED_TOKENS(overrides?: CallOverrides): Promise<string>;

  CF_UNDERLYING_TOKEN_FILTER_CONFLICT(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_CANT_CLOSE_WITH_LOSS(overrides?: CallOverrides): Promise<string>;

  CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_INCORRECT_AMOUNT(overrides?: CallOverrides): Promise<string>;

  CM_INCORRECT_FEES(overrides?: CallOverrides): Promise<string>;

  CM_INCORRECT_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<string>;

  CM_INCORRECT_LIMITS(overrides?: CallOverrides): Promise<string>;

  CM_INCORRECT_NEW_OWNER(overrides?: CallOverrides): Promise<string>;

  CM_MAX_LEVERAGE_IS_TOO_HIGH(overrides?: CallOverrides): Promise<string>;

  CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_NO_OPEN_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  CM_SWAP_CONTRACT_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  CM_TARGET_CONTRACT_iS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  CM_TRANSFER_FAILED(overrides?: CallOverrides): Promise<string>;

  CM_UNDERLYING_IS_NOT_IN_STABLE_POOL(
    overrides?: CallOverrides
  ): Promise<string>;

  CM_WETH_GATEWAY_ONLY(overrides?: CallOverrides): Promise<string>;

  CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT(
    overrides?: CallOverrides
  ): Promise<string>;

  CR_CREDIT_ACCOUNT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

  CR_CREDIT_MANAGER_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

  CR_POOL_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

  IMMUTABLE_CONFIG_CHANGES_FORBIDDEN(
    overrides?: CallOverrides
  ): Promise<string>;

  LA_INCORRECT_MSG(overrides?: CallOverrides): Promise<string>;

  LA_INCORRECT_VALUE(overrides?: CallOverrides): Promise<string>;

  LA_UNKNOWN_LP_INTERFACE(overrides?: CallOverrides): Promise<string>;

  LA_UNKNOWN_SWAP_INTERFACE(overrides?: CallOverrides): Promise<string>;

  MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

  MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<string>;

  MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

  NOT_IMPLEMENTED(overrides?: CallOverrides): Promise<string>;

  POOL_CANT_ADD_CREDIT_MANAGER_TWICE(
    overrides?: CallOverrides
  ): Promise<string>;

  POOL_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

  POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER(
    overrides?: CallOverrides
  ): Promise<string>;

  POOL_INCORRECT_WITHDRAW_FEE(overrides?: CallOverrides): Promise<string>;

  POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT(
    overrides?: CallOverrides
  ): Promise<string>;

  PO_PRICE_FEED_DOESNT_EXIST(overrides?: CallOverrides): Promise<string>;

  PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED(
    overrides?: CallOverrides
  ): Promise<string>;

  WG_DESTINATION_IS_NOT_CREDIT_MANAGER(
    overrides?: CallOverrides
  ): Promise<string>;

  WG_DESTINATION_IS_NOT_POOL(overrides?: CallOverrides): Promise<string>;

  WG_DESTINATION_IS_NOT_WETH_COMPATIBLE(
    overrides?: CallOverrides
  ): Promise<string>;

  WG_FALLBACK_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  WG_RECEIVE_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  ZERO_ADDRESS_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ACL_ADMIN_IS_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

    ACL_CALLER_NOT_CONFIGURATOR(overrides?: CallOverrides): Promise<string>;

    ACL_CALLER_NOT_PAUSABLE_ADMIN(overrides?: CallOverrides): Promise<string>;

    AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK(
      overrides?: CallOverrides
    ): Promise<string>;

    AF_CANT_TAKE_LAST_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    AF_CREDIT_ACCOUNT_NOT_IN_STOCK(overrides?: CallOverrides): Promise<string>;

    AF_MINING_IS_FINISHED(overrides?: CallOverrides): Promise<string>;

    AM_ACCOUNT_FACTORY_ALREADY_EXISTS(
      overrides?: CallOverrides
    ): Promise<string>;

    AM_ACCOUNT_FACTORY_ONLY(overrides?: CallOverrides): Promise<string>;

    AM_BID_LOWER_THAN_MINIMAL(overrides?: CallOverrides): Promise<string>;

    AM_NO_BIDS_WERE_MADE(overrides?: CallOverrides): Promise<string>;

    AM_USER_ALREADY_HAS_BID(overrides?: CallOverrides): Promise<string>;

    AM_USER_HAS_NO_BIDS(overrides?: CallOverrides): Promise<string>;

    AS_ADDRESS_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

    CA_CREDIT_MANAGER_ONLY(overrides?: CallOverrides): Promise<string>;

    CA_FACTORY_ONLY(overrides?: CallOverrides): Promise<string>;

    CF_ADAPTERS_ONLY(overrides?: CallOverrides): Promise<string>;

    CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST(
      overrides?: CallOverrides
    ): Promise<string>;

    CF_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

    CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP(
      overrides?: CallOverrides
    ): Promise<string>;

    CF_INCORRECT_CHI_THRESHOLD(overrides?: CallOverrides): Promise<string>;

    CF_INCORRECT_FAST_CHECK(overrides?: CallOverrides): Promise<string>;

    CF_INCORRECT_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<string>;

    CF_NON_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<string>;

    CF_OPERATION_LOW_HEALTH_FACTOR(overrides?: CallOverrides): Promise<string>;

    CF_POOLS_ONLY(overrides?: CallOverrides): Promise<string>;

    CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE(
      overrides?: CallOverrides
    ): Promise<string>;

    CF_TOKEN_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

    CF_TOO_MUCH_ALLOWED_TOKENS(overrides?: CallOverrides): Promise<string>;

    CF_UNDERLYING_TOKEN_FILTER_CONFLICT(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_CANT_CLOSE_WITH_LOSS(overrides?: CallOverrides): Promise<string>;

    CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_INCORRECT_AMOUNT(overrides?: CallOverrides): Promise<string>;

    CM_INCORRECT_FEES(overrides?: CallOverrides): Promise<string>;

    CM_INCORRECT_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<string>;

    CM_INCORRECT_LIMITS(overrides?: CallOverrides): Promise<string>;

    CM_INCORRECT_NEW_OWNER(overrides?: CallOverrides): Promise<string>;

    CM_MAX_LEVERAGE_IS_TOO_HIGH(overrides?: CallOverrides): Promise<string>;

    CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_NO_OPEN_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    CM_SWAP_CONTRACT_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

    CM_TARGET_CONTRACT_iS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_TRANSFER_FAILED(overrides?: CallOverrides): Promise<string>;

    CM_UNDERLYING_IS_NOT_IN_STABLE_POOL(
      overrides?: CallOverrides
    ): Promise<string>;

    CM_WETH_GATEWAY_ONLY(overrides?: CallOverrides): Promise<string>;

    CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<string>;

    CR_CREDIT_ACCOUNT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

    CR_CREDIT_MANAGER_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

    CR_POOL_ALREADY_ADDED(overrides?: CallOverrides): Promise<string>;

    IMMUTABLE_CONFIG_CHANGES_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<string>;

    LA_INCORRECT_MSG(overrides?: CallOverrides): Promise<string>;

    LA_INCORRECT_VALUE(overrides?: CallOverrides): Promise<string>;

    LA_UNKNOWN_LP_INTERFACE(overrides?: CallOverrides): Promise<string>;

    LA_UNKNOWN_SWAP_INTERFACE(overrides?: CallOverrides): Promise<string>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<string>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

    NOT_IMPLEMENTED(overrides?: CallOverrides): Promise<string>;

    POOL_CANT_ADD_CREDIT_MANAGER_TWICE(
      overrides?: CallOverrides
    ): Promise<string>;

    POOL_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<string>;

    POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER(
      overrides?: CallOverrides
    ): Promise<string>;

    POOL_INCORRECT_WITHDRAW_FEE(overrides?: CallOverrides): Promise<string>;

    POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT(
      overrides?: CallOverrides
    ): Promise<string>;

    PO_PRICE_FEED_DOESNT_EXIST(overrides?: CallOverrides): Promise<string>;

    PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<string>;

    WG_DESTINATION_IS_NOT_CREDIT_MANAGER(
      overrides?: CallOverrides
    ): Promise<string>;

    WG_DESTINATION_IS_NOT_POOL(overrides?: CallOverrides): Promise<string>;

    WG_DESTINATION_IS_NOT_WETH_COMPATIBLE(
      overrides?: CallOverrides
    ): Promise<string>;

    WG_FALLBACK_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

    WG_RECEIVE_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;

    ZERO_ADDRESS_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ACL_ADMIN_IS_ALREADY_ADDED(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_CALLER_NOT_CONFIGURATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_CALLER_NOT_PAUSABLE_ADMIN(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AF_CANT_TAKE_LAST_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    AF_CREDIT_ACCOUNT_NOT_IN_STOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AF_MINING_IS_FINISHED(overrides?: CallOverrides): Promise<BigNumber>;

    AM_ACCOUNT_FACTORY_ALREADY_EXISTS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AM_ACCOUNT_FACTORY_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    AM_BID_LOWER_THAN_MINIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    AM_NO_BIDS_WERE_MADE(overrides?: CallOverrides): Promise<BigNumber>;

    AM_USER_ALREADY_HAS_BID(overrides?: CallOverrides): Promise<BigNumber>;

    AM_USER_HAS_NO_BIDS(overrides?: CallOverrides): Promise<BigNumber>;

    AS_ADDRESS_NOT_FOUND(overrides?: CallOverrides): Promise<BigNumber>;

    CA_CREDIT_MANAGER_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CA_FACTORY_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CF_ADAPTERS_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CF_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CF_INCORRECT_CHI_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    CF_INCORRECT_FAST_CHECK(overrides?: CallOverrides): Promise<BigNumber>;

    CF_INCORRECT_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CF_NON_TOKEN_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    CF_OPERATION_LOW_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CF_POOLS_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CF_TOKEN_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    CF_TOO_MUCH_ALLOWED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    CF_UNDERLYING_TOKEN_FILTER_CONFLICT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_CANT_CLOSE_WITH_LOSS(overrides?: CallOverrides): Promise<BigNumber>;

    CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_INCORRECT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CM_INCORRECT_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    CM_INCORRECT_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    CM_INCORRECT_LIMITS(overrides?: CallOverrides): Promise<BigNumber>;

    CM_INCORRECT_NEW_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    CM_MAX_LEVERAGE_IS_TOO_HIGH(overrides?: CallOverrides): Promise<BigNumber>;

    CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_NO_OPEN_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    CM_SWAP_CONTRACT_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_TARGET_CONTRACT_iS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_TRANSFER_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    CM_UNDERLYING_IS_NOT_IN_STABLE_POOL(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CM_WETH_GATEWAY_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CR_CREDIT_ACCOUNT_MANAGERS_ONLY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CR_CREDIT_MANAGER_ALREADY_ADDED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CR_POOL_ALREADY_ADDED(overrides?: CallOverrides): Promise<BigNumber>;

    IMMUTABLE_CONFIG_CHANGES_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LA_INCORRECT_MSG(overrides?: CallOverrides): Promise<BigNumber>;

    LA_INCORRECT_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    LA_UNKNOWN_LP_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

    LA_UNKNOWN_SWAP_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    NOT_IMPLEMENTED(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CANT_ADD_CREDIT_MANAGER_TWICE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POOL_CREDIT_MANAGERS_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POOL_INCORRECT_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PO_PRICE_FEED_DOESNT_EXIST(overrides?: CallOverrides): Promise<BigNumber>;

    PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WG_DESTINATION_IS_NOT_CREDIT_MANAGER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WG_DESTINATION_IS_NOT_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    WG_DESTINATION_IS_NOT_WETH_COMPATIBLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WG_FALLBACK_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    WG_RECEIVE_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS_IS_NOT_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACL_ADMIN_IS_ALREADY_ADDED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACL_CALLER_NOT_CONFIGURATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACL_CALLER_NOT_PAUSABLE_ADMIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AF_CANT_TAKE_LAST_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AF_CREDIT_ACCOUNT_NOT_IN_STOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AF_MINING_IS_FINISHED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_ACCOUNT_FACTORY_ALREADY_EXISTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_ACCOUNT_FACTORY_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_BID_LOWER_THAN_MINIMAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_NO_BIDS_WERE_MADE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_USER_ALREADY_HAS_BID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AM_USER_HAS_NO_BIDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AS_ADDRESS_NOT_FOUND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CA_CREDIT_MANAGER_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CA_FACTORY_ONLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CF_ADAPTERS_ONLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_CREDIT_MANAGERS_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_INCORRECT_CHI_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_INCORRECT_FAST_CHECK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_INCORRECT_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_NON_TOKEN_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_OPERATION_LOW_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_POOLS_ONLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_TOKEN_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_TOO_MUCH_ALLOWED_TOKENS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CF_UNDERLYING_TOKEN_FILTER_CONFLICT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_CANT_CLOSE_WITH_LOSS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_CANT_DEPOSIT_ETH_ON_NON_ETH_POOL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_DEFAULT_SWAP_CONTRACT_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_INCORRECT_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_INCORRECT_FEES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CM_INCORRECT_LEVERAGE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_INCORRECT_LIMITS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_INCORRECT_NEW_OWNER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_MAX_LEVERAGE_IS_TOO_HIGH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_NON_IMMUTABLE_CONFIG_IS_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_NO_OPEN_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_SWAP_CONTRACT_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_TARGET_CONTRACT_iS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_TRANSFER_FAILED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_UNDERLYING_IS_NOT_IN_STABLE_POOL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_WETH_GATEWAY_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CM_YOU_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CR_CREDIT_ACCOUNT_MANAGERS_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CR_CREDIT_MANAGER_ALREADY_ADDED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CR_POOL_ALREADY_ADDED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMMUTABLE_CONFIG_CHANGES_FORBIDDEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LA_INCORRECT_MSG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LA_INCORRECT_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LA_UNKNOWN_LP_INTERFACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LA_UNKNOWN_SWAP_INTERFACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_ADDITION_OVERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_DIVISION_BY_ZERO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_MULTIPLICATION_OVERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NOT_IMPLEMENTED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_CANT_ADD_CREDIT_MANAGER_TWICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL_CREDIT_MANAGERS_ONLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL_INCORRECT_WITHDRAW_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PO_PRICE_FEED_DOESNT_EXIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WG_DESTINATION_IS_NOT_CREDIT_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WG_DESTINATION_IS_NOT_POOL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WG_DESTINATION_IS_NOT_WETH_COMPATIBLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WG_FALLBACK_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WG_RECEIVE_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZERO_ADDRESS_IS_NOT_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
