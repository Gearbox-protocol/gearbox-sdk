/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ACLTraitTestInterface extends ethers.utils.Interface {
  functions: {
    "accessConfiguratorOnly()": FunctionFragment;
    "accessWhenNotPaused()": FunctionFragment;
    "accessWhenPaused()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessConfiguratorOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessWhenNotPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessWhenPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accessConfiguratorOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessWhenNotPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessWhenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class ACLTraitTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ACLTraitTestInterface;

  functions: {
    accessConfiguratorOnly(overrides?: CallOverrides): Promise<[void]>;

    "accessConfiguratorOnly()"(overrides?: CallOverrides): Promise<[void]>;

    accessWhenNotPaused(overrides?: CallOverrides): Promise<[void]>;

    "accessWhenNotPaused()"(overrides?: CallOverrides): Promise<[void]>;

    accessWhenPaused(overrides?: CallOverrides): Promise<[void]>;

    "accessWhenPaused()"(overrides?: CallOverrides): Promise<[void]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  accessConfiguratorOnly(overrides?: CallOverrides): Promise<void>;

  "accessConfiguratorOnly()"(overrides?: CallOverrides): Promise<void>;

  accessWhenNotPaused(overrides?: CallOverrides): Promise<void>;

  "accessWhenNotPaused()"(overrides?: CallOverrides): Promise<void>;

  accessWhenPaused(overrides?: CallOverrides): Promise<void>;

  "accessWhenPaused()"(overrides?: CallOverrides): Promise<void>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    accessConfiguratorOnly(overrides?: CallOverrides): Promise<void>;

    "accessConfiguratorOnly()"(overrides?: CallOverrides): Promise<void>;

    accessWhenNotPaused(overrides?: CallOverrides): Promise<void>;

    "accessWhenNotPaused()"(overrides?: CallOverrides): Promise<void>;

    accessWhenPaused(overrides?: CallOverrides): Promise<void>;

    "accessWhenPaused()"(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    accessConfiguratorOnly(overrides?: CallOverrides): Promise<BigNumber>;

    "accessConfiguratorOnly()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessWhenNotPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "accessWhenNotPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessWhenPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "accessWhenPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessConfiguratorOnly(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessConfiguratorOnly()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessWhenNotPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessWhenNotPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessWhenPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessWhenPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
