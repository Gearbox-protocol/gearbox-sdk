/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenDistributorInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "contributorsList()": FunctionFragment;
    "countContributors()": FunctionFragment;
    "defaultWeightA()": FunctionFragment;
    "defaultWeightB()": FunctionFragment;
    "distributeTokens(tuple)": FunctionFragment;
    "gearToken()": FunctionFragment;
    "masterVestingContract()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "steps()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateContributors()": FunctionFragment;
    "updateVestingHolder(address)": FunctionFragment;
    "updateVotingWeights(uint256,uint256)": FunctionFragment;
    "vestingContracts(address)": FunctionFragment;
    "vestingContractsList()": FunctionFragment;
    "weightA()": FunctionFragment;
    "weightB()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contributorsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultWeightA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultWeightB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeTokens",
    values: [
      {
        contributorsA: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        contributorsB: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        treasuryAmount: BigNumberish;
        accountMiner: string;
        accountsToBeMined: BigNumberish;
        testersAirdrop: string;
        airdropAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "gearToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterVestingContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "steps", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVestingHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingWeights",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingContractsList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weightA", values?: undefined): string;
  encodeFunctionData(functionFragment: "weightB", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributorsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultWeightA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultWeightB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gearToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterVestingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVestingHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingContractsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weightA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weightB", data: BytesLike): Result;

  events: {
    "NewVestingContract(address,address,uint8)": EventFragment;
    "NewWeights(uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VestingContractHolderUpdate(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewVestingContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWeights"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VestingContractHolderUpdate"
  ): EventFragment;
}

export class TokenDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenDistributorInterface;

  functions: {
    balanceOf(holder: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    contributorsList(overrides?: CallOverrides): Promise<[string[]]>;

    countContributors(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultWeightA(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultWeightB(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeTokens(
      opts: {
        contributorsA: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        contributorsB: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        treasuryAmount: BigNumberish;
        accountMiner: string;
        accountsToBeMined: BigNumberish;
        testersAirdrop: string;
        airdropAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gearToken(overrides?: CallOverrides): Promise<[string]>;

    masterVestingContract(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    steps(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContributors(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVestingHolder(
      prevOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVotingWeights(
      _weightA: BigNumberish,
      _weightB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { contractAddress: string; votingPower: number }
    >;

    vestingContractsList(overrides?: CallOverrides): Promise<[string[]]>;

    weightA(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightB(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

  contributorsList(overrides?: CallOverrides): Promise<string[]>;

  countContributors(overrides?: CallOverrides): Promise<BigNumber>;

  defaultWeightA(overrides?: CallOverrides): Promise<BigNumber>;

  defaultWeightB(overrides?: CallOverrides): Promise<BigNumber>;

  distributeTokens(
    opts: {
      contributorsA: {
        holder: string;
        amount: BigNumberish;
        isCompany: boolean;
      }[];
      contributorsB: {
        holder: string;
        amount: BigNumberish;
        isCompany: boolean;
      }[];
      treasuryAmount: BigNumberish;
      accountMiner: string;
      accountsToBeMined: BigNumberish;
      testersAirdrop: string;
      airdropAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gearToken(overrides?: CallOverrides): Promise<string>;

  masterVestingContract(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  steps(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContributors(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVestingHolder(
    prevOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVotingWeights(
    _weightA: BigNumberish,
    _weightB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number] & { contractAddress: string; votingPower: number }
  >;

  vestingContractsList(overrides?: CallOverrides): Promise<string[]>;

  weightA(overrides?: CallOverrides): Promise<BigNumber>;

  weightB(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    contributorsList(overrides?: CallOverrides): Promise<string[]>;

    countContributors(overrides?: CallOverrides): Promise<BigNumber>;

    defaultWeightA(overrides?: CallOverrides): Promise<BigNumber>;

    defaultWeightB(overrides?: CallOverrides): Promise<BigNumber>;

    distributeTokens(
      opts: {
        contributorsA: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        contributorsB: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        treasuryAmount: BigNumberish;
        accountMiner: string;
        accountsToBeMined: BigNumberish;
        testersAirdrop: string;
        airdropAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    gearToken(overrides?: CallOverrides): Promise<string>;

    masterVestingContract(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    steps(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateContributors(overrides?: CallOverrides): Promise<void>;

    updateVestingHolder(
      prevOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotingWeights(
      _weightA: BigNumberish,
      _weightB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number] & { contractAddress: string; votingPower: number }
    >;

    vestingContractsList(overrides?: CallOverrides): Promise<string[]>;

    weightA(overrides?: CallOverrides): Promise<BigNumber>;

    weightB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    NewVestingContract(
      holder?: string | null,
      vestingContract?: string | null,
      votingPower?: null
    ): TypedEventFilter<
      [string, string, number],
      { holder: string; vestingContract: string; votingPower: number }
    >;

    NewWeights(
      weightA?: null,
      weightB?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { weightA: BigNumber; weightB: BigNumber }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    VestingContractHolderUpdate(
      vestingContract?: string | null,
      prevHolder?: string | null,
      newHolder?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { vestingContract: string; prevHolder: string; newHolder: string }
    >;
  };

  estimateGas: {
    balanceOf(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    contributorsList(overrides?: CallOverrides): Promise<BigNumber>;

    countContributors(overrides?: CallOverrides): Promise<BigNumber>;

    defaultWeightA(overrides?: CallOverrides): Promise<BigNumber>;

    defaultWeightB(overrides?: CallOverrides): Promise<BigNumber>;

    distributeTokens(
      opts: {
        contributorsA: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        contributorsB: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        treasuryAmount: BigNumberish;
        accountMiner: string;
        accountsToBeMined: BigNumberish;
        testersAirdrop: string;
        airdropAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gearToken(overrides?: CallOverrides): Promise<BigNumber>;

    masterVestingContract(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    steps(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContributors(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVestingHolder(
      prevOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVotingWeights(
      _weightA: BigNumberish,
      _weightB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingContractsList(overrides?: CallOverrides): Promise<BigNumber>;

    weightA(overrides?: CallOverrides): Promise<BigNumber>;

    weightB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributorsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countContributors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultWeightA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultWeightB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeTokens(
      opts: {
        contributorsA: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        contributorsB: {
          holder: string;
          amount: BigNumberish;
          isCompany: boolean;
        }[];
        treasuryAmount: BigNumberish;
        accountMiner: string;
        accountsToBeMined: BigNumberish;
        testersAirdrop: string;
        airdropAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gearToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterVestingContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    steps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContributors(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVestingHolder(
      prevOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingWeights(
      _weightA: BigNumberish,
      _weightB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingContractsList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weightB(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
