"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.YearnPriceFeed__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "addressProvider",
                type: "address",
            },
            {
                internalType: "address",
                name: "_yVault",
                type: "address",
            },
            {
                internalType: "address",
                name: "_priceFeed",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_lowerBound",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_upperBound",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "lowerBound",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "upperBound",
                type: "uint256",
            },
        ],
        name: "NewLimiterParams",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Paused",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Unpaused",
        type: "event",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "decimalsDivider",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "description",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
        ],
        name: "getRoundData",
        outputs: [
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
            {
                internalType: "int256",
                name: "",
                type: "int256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "latestRoundData",
        outputs: [
            {
                internalType: "uint80",
                name: "roundId",
                type: "uint80",
            },
            {
                internalType: "int256",
                name: "answer",
                type: "int256",
            },
            {
                internalType: "uint256",
                name: "startedAt",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "updatedAt",
                type: "uint256",
            },
            {
                internalType: "uint80",
                name: "answeredInRound",
                type: "uint80",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "lowerBound",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "pause",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "paused",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "priceFeed",
        outputs: [
            {
                internalType: "contract AggregatorV3Interface",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_lowerBound",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_upperBound",
                type: "uint256",
            },
        ],
        name: "setLimiter",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "unpause",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "upperBound",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "yVault",
        outputs: [
            {
                internalType: "contract IYVault",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x60806040523480156200001157600080fd5b50604051620019e7380380620019e7833981810160405260a08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508460008060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600281526020017f5a30000000000000000000000000000000000000000000000000000000000000815250906200019c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200016057808201518184015260208101905062000143565b50505050905090810190601f1680156200018e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff1663087376956040518163ffffffff1660e01b815260040160206040518083038186803b158015620001e457600080fd5b505afa158015620001f9573d6000803e3d6000fd5b505050506040513d60208110156200021057600080fd5b8101908080519060200190929190505050600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015620002cd5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600281526020017f5a3000000000000000000000000000000000000000000000000000000000000081525090620003ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200037157808201518184015260208101905062000354565b50505050905090810190601f1680156200039f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200049957600080fd5b505afa158015620004ae573d6000803e3d6000fd5b505050506040513d6020811015620004c557600080fd5b810190808051906020019092919050505060ff16600a0a600381905550620004f48282620004ff60201b60201c565b505050505062000645565b6000821180156200050f57508181115b6040518060400160405280600381526020017f595032000000000000000000000000000000000000000000000000000000000081525090620005ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005b357808201518184015260208101905062000596565b50505050905090810190601f168015620005e15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081600481905550806005819055507f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2600454600554604051808381526020018281526020019250505060405180910390a15050565b61139280620006556000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063741bef1a1161008c578063a384d6ff11610066578063a384d6ff14610307578063a834559e14610325578063b09ad8a014610343578063feaf968c14610361576100ea565b8063741bef1a146102475780638456cb591461027b5780639a6fc8f514610285576100ea565b80633f4ba83a116100c85780633f4ba83a1461017c57806354fd4d50146101865780635c975abb146101a45780637284e416146101c4576100ea565b80630bdea781146100ef578063313ce5671461012757806333303f8e14610148575b600080fd5b6101256004803603604081101561010557600080fd5b8101908080359060200190929190803590602001909291905050506103b3565b005b61012f610562565b604051808260ff16815260200191505060405180910390f35b61015061060c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610184610632565b005b61018e6107dd565b6040518082815260200191505060405180910390f35b6101ac610887565b60405180821515815260200191505060405180910390f35b6101cc61089d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020c5780820151818401526020810190506101f1565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61024f610a05565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610283610a2b565b005b6102bd6004803603602081101561029b57600080fd5b81019080803569ffffffffffffffffffff169060200190929190505050610bd6565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b61030f610c4c565b6040518082815260200191505060405180910390f35b61032d610c52565b6040518082815260200191505060405180910390f35b61034b610c58565b6040518082815260200191505060405180910390f35b610369610c5e565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f259aba336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b81019080805190602001909291905050506040518060400160405280600481526020017f41434c320000000000000000000000000000000000000000000000000000000081525090610553576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105185780820151818401526020810190506104fd565b50505050905090810190601f1680156105455780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061055e8282610f0e565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d60208110156105f657600080fd5b8101908080519060200190929190505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4eb5db0336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d60208110156106e557600080fd5b81019080805190602001909291905050506040518060400160405280600481526020017f41434c3100000000000000000000000000000000000000000000000000000000815250906107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561079757808201518184015260208101905061077c565b50505050905090810190601f1680156107c45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107db61104f565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561084757600080fd5b505afa15801561085b573d6000803e3d6000fd5b505050506040513d602081101561087157600080fd5b8101908080519060200190929190505050905090565b60008060009054906101000a900460ff16905090565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561094557600080fd5b810190808051604051939291908464010000000082111561096557600080fd5b8382019150602082018581111561097b57600080fd5b825186600182028301116401000000008211171561099857600080fd5b8083526020830192505050908051906020019080838360005b838110156109cc5780820151818401526020810190506109b1565b50505050905090810190601f1680156109f95780820380516001836020036101000a031916815260200191505b50604052505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a41ec64336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b81019080805190602001909291905050506040518060400160405280600481526020017f41434c310000000000000000000000000000000000000000000000000000000081525090610bcb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b90578082015181840152602081019050610b75565b50505050905090810190601f168015610bbd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610bd4611139565b565b60008060008060006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f46756e6374696f6e206973206e6f7420737570706f727465640000000000000081525060200191505060405180910390fd5b60045481565b60035481565b60055481565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d60a0811015610cf857600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505080955081965082975083985084995050505050506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d6020811015610dd957600080fd5b810190808051906020019092919050505090506004548110158015610e0057506005548111155b6040518060400160405280600381526020017f595031000000000000000000000000000000000000000000000000000000000081525090610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ea1578082015181840152602081019050610e86565b50505050905090810190601f168015610ece5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610f04600354610ef6878461122490919063ffffffff16565b6112aa90919063ffffffff16565b9450509091929394565b600082118015610f1d57508181115b6040518060400160405280600381526020017f595032000000000000000000000000000000000000000000000000000000000081525090610ff9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fbe578082015181840152602081019050610fa3565b50505050905090810190601f168015610feb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081600481905550806005819055507f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2600454600554604051808381526020018281526020019250505060405180910390a15050565b611057610887565b6110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61110c611333565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b611141610887565b156111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111f7611333565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008083141561123757600090506112a4565b600082840290508284828161124857fe5b041461129f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061133c6021913960400191505060405180910390fd5b809150505b92915050565b6000808211611321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161132a57fe5b04905092915050565b60003390509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212200903638c22d9cc6e63634970b5179d1b92e41fa093ec5d9e5387de21ef4bcd7b64736f6c63430007060033";
var YearnPriceFeed__factory = /** @class */ (function (_super) {
    __extends(YearnPriceFeed__factory, _super);
    function YearnPriceFeed__factory(signer) {
        return _super.call(this, _abi, _bytecode, signer) || this;
    }
    YearnPriceFeed__factory.prototype.deploy = function (addressProvider, _yVault, _priceFeed, _lowerBound, _upperBound, overrides) {
        return _super.prototype.deploy.call(this, addressProvider, _yVault, _priceFeed, _lowerBound, _upperBound, overrides || {});
    };
    YearnPriceFeed__factory.prototype.getDeployTransaction = function (addressProvider, _yVault, _priceFeed, _lowerBound, _upperBound, overrides) {
        return _super.prototype.getDeployTransaction.call(this, addressProvider, _yVault, _priceFeed, _lowerBound, _upperBound, overrides || {});
    };
    YearnPriceFeed__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    YearnPriceFeed__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    YearnPriceFeed__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    YearnPriceFeed__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    YearnPriceFeed__factory.bytecode = _bytecode;
    YearnPriceFeed__factory.abi = _abi;
    return YearnPriceFeed__factory;
}(ethers_1.ContractFactory));
exports.YearnPriceFeed__factory = YearnPriceFeed__factory;
