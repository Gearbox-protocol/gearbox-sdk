"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAppCreditManager__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "onBehalfOf",
                type: "address",
            },
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "addCollateral",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "borrower",
                type: "address",
            },
            {
                internalType: "bool",
                name: "isLiquidated",
                type: "bool",
            },
        ],
        name: "calcRepayAmount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                components: [
                    {
                        internalType: "address[]",
                        name: "path",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOutMin",
                        type: "uint256",
                    },
                ],
                internalType: "struct DataTypes.Exchange[]",
                name: "paths",
                type: "tuple[]",
            },
        ],
        name: "closeCreditAccount",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "defaultSwapContract",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "borrower",
                type: "address",
            },
        ],
        name: "getCreditAccountOrRevert",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "borrower",
                type: "address",
            },
        ],
        name: "hasOpenedCreditAccount",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "increaseBorrowedAmount",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "onBehalfOf",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "leverageFactor",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "referralCode",
                type: "uint256",
            },
        ],
        name: "openCreditAccount",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
        ],
        name: "repayCreditAccount",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var IAppCreditManager__factory = /** @class */ (function () {
    function IAppCreditManager__factory() {
    }
    IAppCreditManager__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    IAppCreditManager__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    IAppCreditManager__factory.abi = _abi;
    return IAppCreditManager__factory;
}());
exports.IAppCreditManager__factory = IAppCreditManager__factory;
