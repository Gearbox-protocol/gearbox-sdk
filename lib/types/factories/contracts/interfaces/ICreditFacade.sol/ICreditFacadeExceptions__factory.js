"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ICreditFacadeExceptions__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [],
        name: "AccountTransferNotAllowedException",
        type: "error",
    },
    {
        inputs: [],
        name: "AdaptersOrCreditFacadeOnlyException",
        type: "error",
    },
    {
        inputs: [],
        name: "AllowanceFailedExpcetion",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "BalanceLessThanMinimumDesired",
        type: "error",
    },
    {
        inputs: [],
        name: "BorrowAmountOutOfLimitsException",
        type: "error",
    },
    {
        inputs: [],
        name: "BorrowedBlockLimitException",
        type: "error",
    },
    {
        inputs: [],
        name: "CantLiquidateWithSuchHealthFactorException",
        type: "error",
    },
    {
        inputs: [],
        name: "CantTransferLiquidatableAccountException",
        type: "error",
    },
    {
        inputs: [],
        name: "CreditConfiguratorOnlyException",
        type: "error",
    },
    {
        inputs: [],
        name: "CreditFacadeOnlyException",
        type: "error",
    },
    {
        inputs: [],
        name: "ForbiddenDuringClosureException",
        type: "error",
    },
    {
        inputs: [],
        name: "HasNoOpenedAccountException",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectCallDataException",
        type: "error",
    },
    {
        inputs: [],
        name: "IncreaseAndDecreaseForbiddenInOneCallException",
        type: "error",
    },
    {
        inputs: [],
        name: "IncreaseDebtForbiddenException",
        type: "error",
    },
    {
        inputs: [],
        name: "NotAllowedInWhitelistedMode",
        type: "error",
    },
    {
        inputs: [],
        name: "NotEnoughCollateralException",
        type: "error",
    },
    {
        inputs: [],
        name: "TargetContractNotAllowedExpcetion",
        type: "error",
    },
    {
        inputs: [],
        name: "TokenAlreadyAddedException",
        type: "error",
    },
    {
        inputs: [],
        name: "TokenNotAllowedException",
        type: "error",
    },
    {
        inputs: [],
        name: "TooMuchTokensException",
        type: "error",
    },
    {
        inputs: [],
        name: "UnknownMethodException",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroAddressOrUserAlreadyHasAccountException",
        type: "error",
    },
];
var ICreditFacadeExceptions__factory = /** @class */ (function () {
    function ICreditFacadeExceptions__factory() {
    }
    ICreditFacadeExceptions__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    ICreditFacadeExceptions__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    ICreditFacadeExceptions__factory.abi = _abi;
    return ICreditFacadeExceptions__factory;
}());
exports.ICreditFacadeExceptions__factory = ICreditFacadeExceptions__factory;
