"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvexPathFinder__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_booster",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "IncorrectArraySize",
        type: "error",
    },
    {
        inputs: [],
        name: "booster",
        outputs: [
            {
                internalType: "contract IBooster",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "creditAccount",
                type: "address",
            },
            {
                internalType: "uint256[]",
                name: "pids",
                type: "uint256[]",
            },
        ],
        name: "calcRewards",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "balance",
                        type: "uint256",
                    },
                ],
                internalType: "struct Balance[]",
                name: "",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "cvx",
        outputs: [
            {
                internalType: "contract IConvexToken",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x60c060405234801561001057600080fd5b5060405161109e38038061109e83398101604081905261002f916100af565b6001600160a01b0381166080819052604080516303aa30b960e11b815290516307546172916004808201926020929091908290030181865afa158015610079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009d91906100af565b6001600160a01b031660a052506100df565b6000602082840312156100c157600080fd5b81516001600160a01b03811681146100d857600080fd5b9392505050565b60805160a051610f6b610133600039600081816071015281816105dc0152818161079501528181610834015281816108d1015261099201526000818160bd015281816101bd01526105410152610f6b6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806354fd4d5014610051578063923c1d611461006c578063c6def076146100b8578063e07f25ac146100df575b600080fd5b610059600181565b6040519081526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610063565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100f26100ed366004610c48565b6100ff565b6040516100639190610d03565b60606000825160026101119190610d97565b61011c906002610dd4565b67ffffffffffffffff81111561013457610134610ba1565b60405190808252806020026020018201604052801561017957816020015b60408051808201909152600080825260208201528152602001906001900390816101525790505b5083519091506000805b82811015610531576040517f1526fe27000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631526fe279060240160c060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610dec565b60608101516040517e8cc26200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152929350911690628cc26290602401602060405180830381865afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610e7e565b6102dd9084610dd4565b92506000816060015173ffffffffffffffffffffffffffffffffffffffff1663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610e7e565b905060005b818110156105265760608301516040517f40c35446000000000000000000000000000000000000000000000000000000008152600192909201600483018190529160009173ffffffffffffffffffffffffffffffffffffffff16906340c3544690602401602060405180830381865afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610e97565b6040517e8cc26200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152919250600091831690628cc26290602401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610e7e565b9050600181111561051f5760008273ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190610e97565b905061051b8a828461061f565b9950505b5050610359565b505050600101610183565b50600181111561060c576105d4837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636a4874a16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610e97565b8361061f565b9250610609837f000000000000000000000000000000000000000000000000000000000000000061060484610790565b61061f565b92505b61061583610a4d565b9695505050505050565b825160609060005b81811015610756578473ffffffffffffffffffffffffffffffffffffffff1686828151811061065857610658610eb4565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614806106cf5750600073ffffffffffffffffffffffffffffffffffffffff168682815181106106ab576106ab610eb4565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16145b1561074e5760405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018588848151811061070e5761070e610eb4565b6020026020010151602001516107249190610dd4565b81525086828151811061073957610739610eb4565b60200260200101819052508592505050610789565b600101610627565b506040517f2abcc9f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610e7e565b905080610830575090919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa74e6226040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190610e7e565b6108cb9083610ee3565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f96e76f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190610e7e565b905080821015610a425760006109748383610f1e565b9050816109818288610d97565b61098b9190610ee3565b95506000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190610e7e565b610a299190610f1e565b905080871115610a37578096505b509495945050505050565b506000949350505050565b805160609060005b81811015610ac957600073ffffffffffffffffffffffffffffffffffffffff16848281518110610a8757610a87610eb4565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610ac157610aba816001610dd4565b9150610ac9565b600101610a55565b508067ffffffffffffffff811115610ae357610ae3610ba1565b604051908082528060200260200182016040528015610b2857816020015b6040805180820190915260008082526020820152815260200190600190039081610b015790505b50915060005b81811015610b7557838181518110610b4857610b48610eb4565b6020026020010151838281518110610b6257610b62610eb4565b6020908102919091010152600101610b2e565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b9e57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610bf357610bf3610ba1565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c4057610c40610ba1565b604052919050565b60008060408385031215610c5b57600080fd5b8235610c6681610b7c565b915060208381013567ffffffffffffffff80821115610c8457600080fd5b818601915086601f830112610c9857600080fd5b813581811115610caa57610caa610ba1565b8060051b9150610cbb848301610bf9565b8181529183018401918481019089841115610cd557600080fd5b938501935b83851015610cf357843582529385019390850190610cda565b8096505050505050509250929050565b602080825282518282018190526000919060409081850190868401855b82811015610d5b578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101610d20565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dcf57610dcf610d68565b500290565b60008219821115610de757610de7610d68565b500190565b600060c08284031215610dfe57600080fd5b610e06610bd0565b8251610e1181610b7c565b81526020830151610e2181610b7c565b60208201526040830151610e3481610b7c565b60408201526060830151610e4781610b7c565b60608201526080830151610e5a81610b7c565b608082015260a08301518015158114610e7257600080fd5b60a08201529392505050565b600060208284031215610e9057600080fd5b5051919050565b600060208284031215610ea957600080fd5b815161078981610b7c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082610f19577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015610f3057610f30610d68565b50039056fea26469706673582212205f1f57aaf3c518919047f59a1ddab667021dc293633dad00583bd2908281823f64736f6c634300080a0033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var ConvexPathFinder__factory = /** @class */ (function (_super) {
    __extends(ConvexPathFinder__factory, _super);
    function ConvexPathFinder__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    ConvexPathFinder__factory.prototype.deploy = function (_booster, overrides) {
        return _super.prototype.deploy.call(this, _booster, overrides || {});
    };
    ConvexPathFinder__factory.prototype.getDeployTransaction = function (_booster, overrides) {
        return _super.prototype.getDeployTransaction.call(this, _booster, overrides || {});
    };
    ConvexPathFinder__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    ConvexPathFinder__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    ConvexPathFinder__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    ConvexPathFinder__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    ConvexPathFinder__factory.bytecode = _bytecode;
    ConvexPathFinder__factory.abi = _abi;
    return ConvexPathFinder__factory;
}(ethers_1.ContractFactory));
exports.ConvexPathFinder__factory = ConvexPathFinder__factory;
