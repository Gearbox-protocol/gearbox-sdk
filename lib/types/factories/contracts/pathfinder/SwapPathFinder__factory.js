"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapPathFinder__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_curvePathFinder",
                type: "address",
            },
            {
                internalType: "address",
                name: "_uniV2PathFinder",
                type: "address",
            },
            {
                internalType: "address",
                name: "_uniV3PathFinder",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "UnsupportedAdapterType",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "enum SwapOperation",
                name: "",
                type: "uint8",
            },
        ],
        name: "UnsupportedSwapOperation",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "curvePathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "enum SwapOperation",
                        name: "swapOperation",
                        type: "uint8",
                    },
                    {
                        internalType: "address",
                        name: "creditAccount",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "address[]",
                        name: "connectors",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "slippage",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "externalSlippage",
                        type: "bool",
                    },
                ],
                internalType: "struct SwapTask",
                name: "swapTask",
                type: "tuple",
            },
            {
                internalType: "address[]",
                name: "adapters",
                type: "address[]",
            },
        ],
        name: "findAllSwaps",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall",
                        name: "multiCall",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "found",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct SwapQuote[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "enum SwapOperation",
                        name: "swapOperation",
                        type: "uint8",
                    },
                    {
                        internalType: "address",
                        name: "creditAccount",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "address[]",
                        name: "connectors",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "slippage",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "externalSlippage",
                        type: "bool",
                    },
                ],
                internalType: "struct SwapTask",
                name: "swapTask",
                type: "tuple",
            },
            {
                internalType: "address[]",
                name: "adapters",
                type: "address[]",
            },
            {
                internalType: "uint256",
                name: "gasPriceInTokenOut",
                type: "uint256",
            },
        ],
        name: "getBestDirectPairSwap",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall",
                        name: "multiCall",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "found",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct SwapQuote",
                name: "quote",
                type: "tuple",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "adapter",
                type: "address",
            },
        ],
        name: "getPathFinder",
        outputs: [
            {
                internalType: "address",
                name: "pathFinder",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "uniV2pathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "uniV3pathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x60806040523480156200001157600080fd5b5060405162001a0d38038062001a0d8339810160408190526200003491620000ef565b6200003f3362000082565b600180546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556003805491909316911617905562000139565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ea57600080fd5b919050565b6000806000606084860312156200010557600080fd5b6200011084620000d2565b92506200012060208501620000d2565b91506200013060408501620000d2565b90509250925092565b6118c480620001496000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063ebf9deac1161005b578063ebf9deac1461019e578063eeef8dd0146101be578063f2fde38b146101de57600080fd5b80638da5cb5b1461016d5780638e8a08521461018b57600080fd5b806337c605f7116100a757806337c605f71461012d57806354fd4d501461014d578063715018a61461016357600080fd5b80631c9a755f146100c3578063287b94d71461010d575b600080fd5b6003546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6001546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b61014061013b3660046111c2565b6101f1565b604051610104919061130a565b610155600181565b604051908152602001610104565b61016b6104d0565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100e3565b6100e361019936600461138a565b610562565b6101b16101ac3660046113ae565b61070c565b604051610104919061141b565b6002546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b61016b6101ec36600461138a565b610873565b6040805160c081018252600060808201818152606060a08401819052908352602083018290529282018190528183015282516000908067ffffffffffffffff81111561023f5761023f610f44565b6040519080825280602002602001820160405280156102ad57816020015b61029a6040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b81526020019060019003908161025d5790505b50935060005b818110156104ba5760008682815181106102cf576102cf61142e565b6020026020010151905060006102e482610562565b905073ffffffffffffffffffffffffffffffffffffffff8116156104b0576040517f1bf64c4100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690631bf64c4190610356908c908690600401611518565b6000604051808303816000875af1158015610375573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103bb91908101906115f9565b955060008173ffffffffffffffffffffffffffffffffffffffff16636f33547d8b856040518363ffffffff1660e01b81526004016103fa929190611518565b6000604051808303816000875af1158015610419573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261045f91908101906115f9565b905061046e818b8960006109a3565b15610477578096505b8660400151156104ae57868887815181106104945761049461142e565b602002602001018190525085806104aa9061176c565b9650505b505b50506001016102b3565b506104c4846109bf565b93505050505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6105606000610aea565b565b600073ffffffffffffffffffffffffffffffffffffffff8216156107075760008273ffffffffffffffffffffffffffffffffffffffff1663ce30bbdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f191906117a5565b905060018160108111156106075761060761145d565b14156106295760025473ffffffffffffffffffffffffffffffffffffffff1691505b600281601081111561063d5761063d61145d565b141561065f5760035473ffffffffffffffffffffffffffffffffffffffff1691505b60038160108111156106735761067361145d565b14806106905750600581601081111561068e5761068e61145d565b145b806106ac575060068160108111156106aa576106aa61145d565b145b806106c8575060078160108111156106c6576106c661145d565b145b806106e4575060088160108111156106e2576106e261145d565b145b156107055760015473ffffffffffffffffffffffffffffffffffffffff1691505b505b919050565b6107496040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b825160005b8181101561086a57600085828151811061076a5761076a61142e565b60200260200101519050600061077f82610562565b905073ffffffffffffffffffffffffffffffffffffffff8116156108605760006107a883610562565b73ffffffffffffffffffffffffffffffffffffffff16631bf64c418a856040518363ffffffff1660e01b81526004016107e2929190611518565b6000604051808303816000875af1158015610801573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261084791908101906115f9565b9050610855818a888a6109a3565b1561085e578095505b505b505060010161074e565b50509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b73ffffffffffffffffffffffffffffffffffffffff8116610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054d565b6109a081610aea565b50565b60006109b6858585866060015186610b5f565b95945050505050565b8051606090806109d0575090919050565b60005b8381815181106109e5576109e561142e565b60200260200101516040015115610a0e5760010181811415610a0957509192915050565b6109d3565b8067ffffffffffffffff811115610a2757610a27610f44565b604051908082528060200260200182016040528015610a9557816020015b610a826040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b815260200190600190039081610a455790505b50925060005b81811015610ae257848181518110610ab557610ab561142e565b6020026020010151848281518110610acf57610acf61142e565b6020908102919091010152600101610a9b565b505050919050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008560400151610b72575060006109b6565b8360400151610b83575060016109b6565b6000610be08688602001516b033b2e3c9fd0803ce8000000868b60600151610bab91906117c6565b610bb59190611803565b60208901516b033b2e3c9fd0803ce8000000610bd1898b6117c6565b610bdb9190611803565b610c79565b9050600086516002811115610bf757610bf761145d565b1480610c155750600186516002811115610c1357610c1361145d565b145b15610c215790506109b6565b600286516002811115610c3657610c3661145d565b1415610c44571590506109b6565b85516040517ffe7995cf00000000000000000000000000000000000000000000000000000000815261054d919060040161183e565b6000610cb96040518060400160405280600c81526020017f414141202d20616d6f756e740000000000000000000000000000000000000000815250610d6a565b610cc285610df9565b610ccb84610df9565b610cd483610df9565b610cdd82610df9565b610cef610cea858761184c565b610df9565b610cfc610cea838561184c565b610d0586610e8a565b610d2657610d138284611863565b610d1d8587611863565b101590506109b6565b838510158015610d365750818310155b15610d4f57610d45828461184c565b610d1d858761184c565b838510610d5d576001610d60565b60005b9695505050505050565b6109a081604051602401610d7e919061187b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052610f23565b6109a081604051602401610e0f91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba900000000000000000000000000000000000000000000000000000000179052610f23565b60008082516002811115610ea057610ea061145d565b1480610ebe5750600182516002811115610ebc57610ebc61145d565b145b15610ecb57506001919050565b600282516002811115610ee057610ee061145d565b1415610eee57506000919050565b81516040517ffe7995cf00000000000000000000000000000000000000000000000000000000815261054d919060040161183e565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610f9757610f97610f44565b60405290565b6040516080810167ffffffffffffffff81118282101715610f9757610f97610f44565b6040805190810167ffffffffffffffff81118282101715610f9757610f97610f44565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561102a5761102a610f44565b604052919050565b80356003811061070757600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146109a057600080fd5b803561070781611041565b600082601f83011261107f57600080fd5b8135602067ffffffffffffffff82111561109b5761109b610f44565b8160051b6110aa828201610fe3565b92835284810182019282810190878511156110c457600080fd5b83870192505b848310156110ec5782356110dd81611041565b825291830191908301906110ca565b979650505050505050565b80151581146109a057600080fd5b8035610707816110f7565b6000610100828403121561112357600080fd5b61112b610f73565b905061113682611032565b815261114460208301611063565b602082015261115560408301611063565b604082015261116660608301611063565b6060820152608082013567ffffffffffffffff81111561118557600080fd5b6111918482850161106e565b60808301525060a082013560a082015260c082013560c08201526111b760e08301611105565b60e082015292915050565b600080604083850312156111d557600080fd5b823567ffffffffffffffff808211156111ed57600080fd5b6111f986838701611110565b9350602085013591508082111561120f57600080fd5b5061121c8582860161106e565b9150509250929050565b60005b83811015611241578181015183820152602001611229565b83811115611250576000848401525b50505050565b6000815180845261126e816020860160208601611226565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b80516080808452815173ffffffffffffffffffffffffffffffffffffffff169084015260200151604060a08401526000906112de60c0850182611256565b905060208301516020850152604083015115156040850152606083015160608501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561137d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261136b8583516112a0565b94509285019290850190600101611331565b5092979650505050505050565b60006020828403121561139c57600080fd5b81356113a781611041565b9392505050565b6000806000606084860312156113c357600080fd5b833567ffffffffffffffff808211156113db57600080fd5b6113e787838801611110565b945060208601359150808211156113fd57600080fd5b5061140a8682870161106e565b925050604084013590509250925092565b6020815260006113a760208301846112a0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106114c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b8381101561150d57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016114db565b509495945050505050565b6040815261152a60408201845161148c565b6000602084015173ffffffffffffffffffffffffffffffffffffffff80821660608501528060408701511660808501525050606084015161158360a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060808401516101008060c08501526115a06101408501836114c7565b915060a086015160e085015260c0860151818501525060e08501516115ca61012085018215159052565b5073ffffffffffffffffffffffffffffffffffffffff8416602084015290506113a7565b8051610707816110f7565b6000602080838503121561160c57600080fd5b825167ffffffffffffffff8082111561162457600080fd5b908401906080828703121561163857600080fd5b611640610f9d565b82518281111561164f57600080fd5b83016040818903121561166157600080fd5b611669610fc0565b815161167481611041565b8152818601518481111561168757600080fd5b80830192505088601f83011261169c57600080fd5b8151848111156116ae576116ae610f44565b6116de877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610fe3565b945080855289878285010111156116f457600080fd5b61170381888701898601611226565b508086018490528252508284015181850152611721604084016115ee565b6040820152606083015160608201528094505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561179e5761179e61173d565b5060010190565b6000602082840312156117b757600080fd5b8151601181106113a757600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156117fe576117fe61173d565b500290565b600082611839577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b602081016104ca828461148c565b60008282101561185e5761185e61173d565b500390565b600082198211156118765761187661173d565b500190565b6020815260006113a7602083018461125656fea26469706673582212204a44d119a95a7bbbbf2c6cd5403facba1ffe02ace142ee957c64cb512d488b0664736f6c634300080a0033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var SwapPathFinder__factory = /** @class */ (function (_super) {
    __extends(SwapPathFinder__factory, _super);
    function SwapPathFinder__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    SwapPathFinder__factory.prototype.deploy = function (_curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides) {
        return _super.prototype.deploy.call(this, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides || {});
    };
    SwapPathFinder__factory.prototype.getDeployTransaction = function (_curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides) {
        return _super.prototype.getDeployTransaction.call(this, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides || {});
    };
    SwapPathFinder__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    SwapPathFinder__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    SwapPathFinder__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    SwapPathFinder__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    SwapPathFinder__factory.bytecode = _bytecode;
    SwapPathFinder__factory.abi = _abi;
    return SwapPathFinder__factory;
}(ethers_1.ContractFactory));
exports.SwapPathFinder__factory = SwapPathFinder__factory;
