"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniswapV2PathFinder__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "enum SwapOperation",
                name: "",
                type: "uint8",
            },
        ],
        name: "UnsupportedSwapOperation",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "gasUsage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "enum SwapOperation",
                        name: "swapOperation",
                        type: "uint8",
                    },
                    {
                        internalType: "address",
                        name: "creditAccount",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "address[]",
                        name: "connectors",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "slippage",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "externalSlippage",
                        type: "bool",
                    },
                ],
                internalType: "struct SwapTask",
                name: "swapTask",
                type: "tuple",
            },
            {
                internalType: "address",
                name: "adapter",
                type: "address",
            },
        ],
        name: "getBestConnectorSwap",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall",
                        name: "multiCall",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "found",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct SwapQuote",
                name: "quote",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "enum SwapOperation",
                        name: "swapOperation",
                        type: "uint8",
                    },
                    {
                        internalType: "address",
                        name: "creditAccount",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "address[]",
                        name: "connectors",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "slippage",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "externalSlippage",
                        type: "bool",
                    },
                ],
                internalType: "struct SwapTask",
                name: "swapTask",
                type: "tuple",
            },
            {
                internalType: "address",
                name: "adapter",
                type: "address",
            },
        ],
        name: "getBestDirectPairSwap",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall",
                        name: "multiCall",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "found",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct SwapQuote",
                name: "quote",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "router",
                type: "address",
            },
            {
                internalType: "address",
                name: "token0",
                type: "address",
            },
            {
                internalType: "address",
                name: "token1",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "usage",
                type: "uint256",
            },
        ],
        name: "setGasUsage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a018061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146100f45780638da5cb5b146100fc578063d7aa2e3514610124578063f2fde38b1461015557600080fd5b80631bf64c411461008d57806345330666146100b657806354fd4d50146100cb5780636f33547d146100e1575b600080fd5b6100a061009b366004611436565b610168565b6040516100ad919061158a565b60405180910390f35b6100c96100c43660046115f9565b61027d565b005b6100d3600281565b6040519081526020016100ad565b6100a06100ef366004611436565b61035a565b6100c9610514565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ad565b6100d361013236600461164a565b600160209081526000938452604080852082529284528284209052825290205481565b6100c9610163366004611695565b6105a1565b6101a56040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b6040805160028082526060820183526000926020830190803683370190505090508360400151816000815181106101de576101de6116b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050836060015181600181518110610230576102306116b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102758484836106d1565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610303576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff93841660009081526001602090815260408083209587168084528683528184209590971683529381528382208390559384528281209481529390925290912055565b6103976040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b60808381015151604080516003808252938101909152909160009190602082016060803683370190505090508460400151816000815181106103db576103db6116b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084606001518160028151811061042d5761042d6116b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060005b8281101561050b5785608001518181518110610488576104886116b9565b6020026020010151826001815181106104a3576104a36116b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006104ea8787856106d1565b90506104f98188876000610aa7565b15610502578094505b5060010161046a565b50505092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fa565b61059f6000610ac3565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fa565b73ffffffffffffffffffffffffffffffffffffffff81166106c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102fa565b6106ce81610ac3565b50565b61070e6040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b600061071985610b38565b1561080a5760a08501516040517fd06ca61f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169163d06ca61f9161077691908790600401611739565b600060405180830381865afa9250505080156107d257506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107cf9190810190611752565b60015b6107db576108e6565b80600182516107ea9190611812565b815181106107fa576107fa6116b9565b60200260200101519150506108e6565b60a08501516040517f1f00ca7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861691631f00ca749161086291908790600401611739565b600060405180830381865afa9250505080156108be57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108bb9190810190611752565b60015b6108c7576108e6565b806000815181106108da576108da6116b9565b60200260200101519150505b8015610a9f57602082018190526001604083015261090685858584610bd1565b826000018190525060008473ffffffffffffffffffffffffffffffffffffffff1663bd90df706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190611829565b90506000600185516109919190611812565b905060005b81811015610a9b5773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812087519091908890849081106109da576109da6116b9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087836001610a2c9190611846565b81518110610a3c57610a3c6116b9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485606001818151610a909190611846565b905250600101610996565b5050505b509392505050565b6000610aba858585866060015186610e3c565b95945050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516002811115610b4e57610b4e61185e565b1480610b6c5750600182516002811115610b6a57610b6a61185e565b145b15610b7957506001919050565b600282516002811115610b8e57610b8e61185e565b1415610b9c57506000919050565b81516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102fa919060040161188d565b604080518082019091526000815260606020820152600185516002811115610bfb57610bfb61185e565b1415610cf8576040805180820190915273ffffffffffffffffffffffffffffffffffffffff85168152602081017fbdbeaa3100000000000000000000000000000000000000000000000000000000610c538886610f56565b86610c6042610e10611846565b604051602401610c72939291906118ce565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290529050610275565b600085516002811115610d0d57610d0d61185e565b1415610d93576040805180820190915273ffffffffffffffffffffffffffffffffffffffff8516815260a086015160208201907f38ed17390000000000000000000000000000000000000000000000000000000090610d6c8987610f90565b60208a01518890610d7f42610e10611846565b604051602401610c729594939291906118f7565b600285516002811115610da857610da861185e565b1415610e07576040805180820190915273ffffffffffffffffffffffffffffffffffffffff8516815260a086015160208201907f8803dbee0000000000000000000000000000000000000000000000000000000090610d6c8987610f90565b84516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102fa919060040161188d565b60008560400151610e4f57506000610aba565b8360400151610e6057506001610aba565b6000610ebd8688602001516b033b2e3c9fd0803ce8000000868b60600151610e889190611940565b610e92919061197d565b60208901516b033b2e3c9fd0803ce8000000610eae898b611940565b610eb8919061197d565b611077565b9050600086516002811115610ed457610ed461185e565b1480610ef25750600186516002811115610ef057610ef061185e565b145b15610efe579050610aba565b600286516002811115610f1357610f1361185e565b1415610f2157159050610aba565b85516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102fa919060040161188d565b60a0820151600090610f7d84610f78856b033b2e3c9fd0803ce8000000611940565b610f90565b610f87919061197d565b90505b92915050565b60008260e0015115610fa457506000610f8a565b600083516002811115610fb957610fb961185e565b1480610fd75750600183516002811115610fd557610fd561185e565b145b1561100a5760c083015161271090610fef9082611812565b610ff99084611940565b611003919061197d565b9050610f8a565b60028351600281111561101f5761101f61185e565b14156110425760c083015161103690612710611846565b610ff961271084611940565b82516040517ffe7995cf0000000000000000000000000000000000000000000000000000000081526102fa919060040161188d565b60006110b76040518060400160405280600c81526020017f414141202d20616d6f756e740000000000000000000000000000000000000000815250611168565b6110c0856111f7565b6110c9846111f7565b6110d2836111f7565b6110db826111f7565b6110ed6110e88587611812565b6111f7565b6110fa6110e88385611812565b61110386610b38565b611124576111118284611846565b61111b8587611846565b10159050610aba565b8385101580156111345750818310155b1561114d576111438284611812565b61111b8587611812565b83851061115b57600161115e565b60005b9695505050505050565b6106ce8160405160240161117c91906119b8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052611284565b6106ce8160405160240161120d91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba9000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156112f8576112f86112a5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611345576113456112a5565b604052919050565b80356003811061135c57600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff811681146106ce57600080fd5b803561135c81611361565b600067ffffffffffffffff8211156113a8576113a86112a5565b5060051b60200190565b600082601f8301126113c357600080fd5b813560206113d86113d38361138e565b6112fe565b82815260059290921b840181019181810190868411156113f757600080fd5b8286015b8481101561141b57803561140e81611361565b83529183019183016113fb565b509695505050505050565b8035801515811461135c57600080fd5b6000806040838503121561144957600080fd5b823567ffffffffffffffff8082111561146157600080fd5b90840190610100828703121561147657600080fd5b61147e6112d4565b6114878361134d565b815261149560208401611383565b60208201526114a660408401611383565b60408201526114b760608401611383565b60608201526080830135828111156114ce57600080fd5b6114da888286016113b2565b60808301525060a083013560a082015260c083013560c082015261150060e08401611426565b60e0820152935061151691505060208401611383565b90509250929050565b6000815180845260005b8181101561154557602081850181015186830182015201611529565b81811115611557576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208082528251608083830152805173ffffffffffffffffffffffffffffffffffffffff1660a08401520151604060c08301526000906115cd60e084018261151f565b905060208401516040840152604084015115156060840152606084015160808401528091505092915050565b6000806000806080858703121561160f57600080fd5b843561161a81611361565b9350602085013561162a81611361565b9250604085013561163a81611361565b9396929550929360600135925050565b60008060006060848603121561165f57600080fd5b833561166a81611361565b9250602084013561167a81611361565b9150604084013561168a81611361565b809150509250925092565b6000602082840312156116a757600080fd5b81356116b281611361565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561172e57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016116fc565b509495945050505050565b82815260406020820152600061027560408301846116e8565b6000602080838503121561176557600080fd5b825167ffffffffffffffff81111561177c57600080fd5b8301601f8101851361178d57600080fd5b805161179b6113d38261138e565b81815260059190911b820183019083810190878311156117ba57600080fd5b928401925b828410156117d8578351825292840192908401906117bf565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611824576118246117e3565b500390565b60006020828403121561183b57600080fd5b81516116b281611361565b60008219821115611859576118596117e3565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600383106118c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b8381526060602082015260006118e760608301856116e8565b9050826040830152949350505050565b85815284602082015260a06040820152600061191660a08301866116e8565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611978576119786117e3565b500290565b6000826119b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b602081526000610f87602083018461151f56fea2646970667358221220042a62b4d425a2205fa828887bf063a55ef88bc4c19cee1e98235c23b32ccdf764736f6c634300080a0033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var UniswapV2PathFinder__factory = /** @class */ (function (_super) {
    __extends(UniswapV2PathFinder__factory, _super);
    function UniswapV2PathFinder__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    UniswapV2PathFinder__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    UniswapV2PathFinder__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    UniswapV2PathFinder__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    UniswapV2PathFinder__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    UniswapV2PathFinder__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    UniswapV2PathFinder__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    UniswapV2PathFinder__factory.bytecode = _bytecode;
    UniswapV2PathFinder__factory.abi = _abi;
    return UniswapV2PathFinder__factory;
}(ethers_1.ContractFactory));
exports.UniswapV2PathFinder__factory = UniswapV2PathFinder__factory;
