"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PathFinder__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_addressProvider",
                type: "address",
            },
            {
                internalType: "address",
                name: "_curvePathFinder",
                type: "address",
            },
            {
                internalType: "address",
                name: "_uniV2PathFinder",
                type: "address",
            },
            {
                internalType: "address",
                name: "_uniV3PathFinder",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
        ],
        name: "PathDoesNotExists",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "UnknownToken",
        type: "error",
    },
    {
        inputs: [],
        name: "UnsupportedAdapterType",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "curvePathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "balance",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Balance[]",
                        name: "balances",
                        type: "tuple[]",
                    },
                    {
                        internalType: "address",
                        name: "underlying",
                        type: "address",
                    },
                    {
                        internalType: "address[]",
                        name: "connectors",
                        type: "address[]",
                    },
                    {
                        internalType: "address[]",
                        name: "adapters",
                        type: "address[]",
                    },
                    {
                        internalType: "uint256",
                        name: "gasPriceUnderlyingRAY",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "slippageFactor",
                        type: "uint256",
                    },
                ],
                internalType: "struct ClosePathTask",
                name: "task",
                type: "tuple",
            },
        ],
        name: "findBestPath",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall[]",
                        name: "calls",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "underlyingBalance",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct ClosePathResult",
                name: "result",
                type: "tuple",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "balance",
                        type: "uint256",
                    },
                ],
                internalType: "struct Balance[][]",
                name: "balances",
                type: "tuple[][]",
            },
            {
                internalType: "address",
                name: "underlying",
                type: "address",
            },
            {
                internalType: "address[]",
                name: "connectors",
                type: "address[]",
            },
            {
                internalType: "address[]",
                name: "adapters",
                type: "address[]",
            },
            {
                internalType: "uint256",
                name: "slippageFactor",
                type: "uint256",
            },
        ],
        name: "findBestPathIndex",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall[]",
                        name: "calls",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "underlyingBalance",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct ClosePathResult",
                name: "result",
                type: "tuple",
            },
            {
                internalType: "uint256",
                name: "bestIndex",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenIn",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenOut",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "slippageFactor",
                type: "uint256",
            },
            {
                internalType: "address[]",
                name: "adapters",
                type: "address[]",
            },
        ],
        name: "getBestPairSwap",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "target",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "callData",
                                type: "bytes",
                            },
                        ],
                        internalType: "struct MultiCall",
                        name: "multiCall",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "found",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsage",
                        type: "uint256",
                    },
                ],
                internalType: "struct SwapQuote",
                name: "quote",
                type: "tuple",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "underlying",
                type: "address",
            },
        ],
        name: "getGasPriceUnderlyingRAY",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "priceOracle",
        outputs: [
            {
                internalType: "contract IPriceOracleV2",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "uniV2PathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "uniV3PathFinder",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "wethToken",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x60a06040523480156200001157600080fd5b506040516200206d3803806200206d8339810160408190526200003491620001e7565b6200003f336200017a565b6000849050806001600160a01b0316634c252f916040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a9919062000244565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000101573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000127919062000244565b600480546001600160a01b03199081166001600160a01b03938416179091556001805482169683169690961790955560028054861694821694909417909355506003805490931691161790555062000269565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001e257600080fd5b919050565b60008060008060808587031215620001fe57600080fd5b6200020985620001ca565b93506200021960208601620001ca565b92506200022960408601620001ca565b91506200023960608601620001ca565b905092959194509250565b6000602082840312156200025757600080fd5b6200026282620001ca565b9392505050565b608051611de16200028c600039600081816101730152610bfc0152611de16000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063715018a61161008c5780639907bf28116100665780639907bf2814610213578063d4755a9714610234578063ee298b3e14610254578063f2fde38b1461026757600080fd5b8063715018a6146101cb5780638c9cc8da146101d55780638da5cb5b146101f557600080fd5b80634b57b0be116100bd5780634b57b0be1461016e57806354fd4d501461019557806355f3003d146101ab57600080fd5b80632630c12f146100e4578063287b94d71461012e5780632b6219b01461014e575b600080fd5b6004546101049073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6001546101049073ffffffffffffffffffffffffffffffffffffffff1681565b61016161015c36600461166d565b61027a565b6040516101259190611885565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b61019d600281565b604051908152602001610125565b6002546101049073ffffffffffffffffffffffffffffffffffffffff1681565b6101d3610692565b005b6101e86101e336600461189f565b61071f565b6040516101259190611915565b60005473ffffffffffffffffffffffffffffffffffffffff16610104565b61022661022136600461195d565b610a5c565b604051610125929190611a71565b6003546101049073ffffffffffffffffffffffffffffffffffffffff1681565b61019d610262366004611a93565b610b6d565b6101d3610275366004611a93565b610c74565b61029e60405180606001604052806060815260200160008152602001600081525090565b602082015182515160008167ffffffffffffffff8111156102c1576102c161142e565b60405190808252806020026020018201604052801561030757816020015b6040805180820190915260008152606060208201528152602001906001900390816102df5790505b509050600085604001515167ffffffffffffffff81111561032a5761032a61142e565b604051908082528060200260200182016040528015610353578160200160208202803683370190505b50905060008060005b8581101561050d5760008960000151828151811061037c5761037c611ab0565b60200260200101516000015190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610504576103cb818b60400151610da4565b156103fa57818585815181106103e3576103e3611ab0565b602002602001018181525050836001019350610504565b60008a60000151838151811061041257610412611ab0565b6020026020010151602001511115610504576000806104338c856000610e1b565b915091508160400151610497576040517f201e176300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80851660048301528b1660248201526044015b60405180910390fd5b60008c6000015185815181106104af576104af611ab0565b6020908102919091018101518101919091528201518c516104d19183906111ec565b81600001518886815181106104e8576104e8611ab0565b602002602001018190525084806104fe90611b0e565b95505050505b5060010161035c565b50876040015151945060005b8581101561067157600084828151811061053557610535611ab0565b6020026020010151905060008a60000151828151811061055757610557611ab0565b602002602001015160000151905060008b60000151848151811061057d5761057d611ab0565b602002602001015160200151111561066757600061059d8c846001610e1b565b50905080604001516105fb576040517f201e176300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528b16602482015260440161048e565b60008c60000151848151811061061357610613611ab0565b6020908102919091018101518101919091528101518c51610635918c906111ec565b806000015188868151811061064c5761064c611ab0565b6020026020010181905250848061066290611b0e565b955050505b5050600101610519565b50838752875161068190876112cd565b602088015250949695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b61071d6000611356565b565b61075c6040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b815160005b81811015610a5157600084828151811061077d5761077d611ab0565b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663ce30bbdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611b47565b90506000600182600f81111561081057610810611b68565b1415610835575060025473ffffffffffffffffffffffffffffffffffffffff16610949565b600282600f81111561084957610849611b68565b141561086e575060035473ffffffffffffffffffffffffffffffffffffffff16610949565b600382600f81111561088257610882611b68565b148061089f5750600582600f81111561089d5761089d611b68565b145b806108bb5750600682600f8111156108b9576108b9611b68565b145b806108d75750600782600f8111156108d5576108d5611b68565b145b806108f35750600882600f8111156108f1576108f1611b68565b145b15610917575060015473ffffffffffffffffffffffffffffffffffffffff16610949565b6040517f9fe8c8a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f0ab1a57400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528c811660248301528b81166044830152606482018b9052608482018a905260009190831690630ab1a5749060a4016000604051808303816000875af11580156109d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a1f9190810190611ba7565b905080604001518015610a39575086602001518160200151115b15610a42578096505b84600101945050505050610761565b505095945050505050565b610a8060405180606001604052806060815260200160008152602001600081525090565b6000808751905060006040518060c001604052808a600081518110610aa757610aa7611ab0565b602002602001015181526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001610ae58a610b6d565b8152602001869052905060005b82811015610b60578015610b2057898181518110610b1257610b12611ab0565b602090810291909101015182525b6000610b2b8361027a565b9050610b4e816020015182604001518860200151896040015187608001516113cb565b15610b5a578095508194505b50610af2565b5050509550959350505050565b60045460009073ffffffffffffffffffffffffffffffffffffffff1663d6d19b2782610ba96b033b2e3c9fd0803ce8000000633b9aca00611ceb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101919091527f0000000000000000000000000000000000000000000000000000000000000000821660448201529085166064820152608401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190611d28565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b73ffffffffffffffffffffffffffffffffffffffff8116610d98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161048e565b610da181611356565b50565b8051600090815b81811015610e10578473ffffffffffffffffffffffffffffffffffffffff16848281518110610ddc57610ddc611ab0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610e0b57600192505050610c6e565b610dab565b506000949350505050565b610e586040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b6000610eb585600001518581518110610e7357610e73611ab0565b602002602001015160000151866020015187600001518781518110610e9a57610e9a611ab0565b6020026020010151602001518860a00151896060015161071f565b60608101516020870151919350909150836111e35760408601515160008167ffffffffffffffff811115610eeb57610eeb61142e565b604051908082528060200260200182016040528015610f5957816020015b610f466040805160c08101909152600060808201908152606060a08301528190815260200160008152602001600015158152602001600081525090565b815260200190600190039081610f095790505b509050600088600001518881518110610f7457610f74611ab0565b6020026020010151600001519050600089600001518981518110610f9a57610f9a611ab0565b602002602001015160200151905060005b8481101561100a57610fe5838c604001518381518110610fcd57610fcd611ab0565b6020026020010151848e60a001518f6060015161071f565b848281518110610ff757610ff7611ab0565b6020908102919091010152600101610fab565b50505060005b828110156111df5781818151811061102a5761102a611ab0565b602002602001015160400151156111da5760006110718a60400151838151811061105657611056611ab0565b60200260200101518b600001516112cd90919063ffffffff16565b83838151811061108357611083611ab0565b6020026020010151602001516110999190611d41565b905060006110d38b6040015184815181106110b6576110b6611ab0565b60200260200101518c60200151848e60a001518f6060015161071f565b9050806040015180156111665750611166828585815181106110f7576110f7611ab0565b60200260200101516020015183602001516111129190611ceb565b61111c9190611d59565b61138886868151811061113157611131611ab0565b602002602001015160600151846060015161114c9190611d41565b6111569190611d94565b8a60200151898f608001516113cb565b156111d75783838151811061117d5761117d611ab0565b602002602001015197508a60400151838151811061119d5761119d611ab0565b602002602001015196508383815181106111b9576111b9611ab0565b60200260200101516060015181606001516111d49190611d41565b95505b50505b611010565b5050505b50935093915050565b60005b8351811015611282578273ffffffffffffffffffffffffffffffffffffffff1684828151811061122157611221611ab0565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561127d578184828151811061125c5761125c611ab0565b60200260200101516020018181516112749190611d41565b90525050505050565b6111ef565b506040517f81a3b1be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161048e565b6000805b8351811015611282578273ffffffffffffffffffffffffffffffffffffffff1684828151811061130357611303611ab0565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156113515783818151811061133d5761133d611ab0565b602002602001015160200151915050610c6e565b6112d1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006b033b2e3c9fd0803ce80000006113e48385611ceb565b6113ee9190611d59565b6113f89085611d94565b6b033b2e3c9fd0803ce800000061140f8488611ceb565b6114199190611d59565b6114239088611d94565b119695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156114805761148061142e565b60405290565b60405160c0810167ffffffffffffffff811182821017156114805761148061142e565b6040516080810167ffffffffffffffff811182821017156114805761148061142e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115135761151361142e565b604052919050565b600067ffffffffffffffff8211156115355761153561142e565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff81168114610da157600080fd5b803561156c8161153f565b919050565b600082601f83011261158257600080fd5b813560206115976115928361151b565b6114cc565b82815260069290921b840181019181810190868411156115b657600080fd5b8286015b848110156115fe57604081890312156115d35760008081fd5b6115db61145d565b81356115e68161153f565b815281850135858201528352918301916040016115ba565b509695505050505050565b600082601f83011261161a57600080fd5b8135602061162a6115928361151b565b82815260059290921b8401810191818101908684111561164957600080fd5b8286015b848110156115fe5780356116608161153f565b835291830191830161164d565b60006020828403121561167f57600080fd5b813567ffffffffffffffff8082111561169757600080fd5b9083019060c082860312156116ab57600080fd5b6116b3611486565b8235828111156116c257600080fd5b6116ce87828601611571565b8252506116dd60208401611561565b60208201526040830135828111156116f457600080fd5b61170087828601611609565b60408301525060608301358281111561171857600080fd5b61172487828601611609565b6060830152506080830135608082015260a083013560a082015280935050505092915050565b60005b8381101561176557818101518382015260200161174d565b83811115611774576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8151168252600060208201516040602085015280518060408601526117bb81606087016020850161174a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016939093016060019392505050565b60006060830182516060855281815180845260808701915060808160051b88010193506020808401935060005b82811015611867577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8089870301845261185586865161177a565b9550938101939281019260010161181b565b50868101519088015250505060409283015192909301919091525090565b60208152600061189860208301846117ee565b9392505050565b600080600080600060a086880312156118b757600080fd5b85356118c28161153f565b945060208601356118d28161153f565b93506040860135925060608601359150608086013567ffffffffffffffff8111156118fc57600080fd5b61190888828901611609565b9150509295509295909350565b60208152600082516080602084015261193160a084018261177a565b905060208401516040840152604084015115156060840152606084015160808401528091505092915050565b600080600080600060a0868803121561197557600080fd5b853567ffffffffffffffff8082111561198d57600080fd5b818801915088601f8301126119a157600080fd5b813560206119b16115928361151b565b82815260059290921b8401810191818101908c8411156119d057600080fd5b8286015b84811015611a08578035868111156119ec5760008081fd5b6119fa8f86838b0101611571565b8452509183019183016119d4565b509950611a1890508a8201611561565b975050506040880135915080821115611a3057600080fd5b611a3c89838a01611609565b94506060880135915080821115611a5257600080fd5b50611a5f88828901611609565b95989497509295608001359392505050565b604081526000611a8460408301856117ee565b90508260208301529392505050565b600060208284031215611aa557600080fd5b81356118988161153f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b4057611b40611adf565b5060010190565b600060208284031215611b5957600080fd5b81516010811061189857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8051801515811461156c57600080fd5b60006020808385031215611bba57600080fd5b825167ffffffffffffffff80821115611bd257600080fd5b9084019060808287031215611be657600080fd5b611bee6114a9565b825182811115611bfd57600080fd5b830160408189031215611c0f57600080fd5b611c1761145d565b8151611c228161153f565b81528186015184811115611c3557600080fd5b80830192505088601f830112611c4a57600080fd5b815184811115611c5c57611c5c61142e565b611c8c877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016114cc565b94508085528987828501011115611ca257600080fd5b611cb18188870189860161174a565b508086018490528252508284015181850152611ccf60408401611b97565b6040820152606083015160608201528094505050505092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d2357611d23611adf565b500290565b600060208284031215611d3a57600080fd5b5051919050565b60008219821115611d5457611d54611adf565b500190565b600082611d8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611da657611da6611adf565b50039056fea264697066735822122063d3fcd108ad0711ad81592c8af68318edee4bb948f024c32514b4d0554688ec64736f6c634300080a0033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var PathFinder__factory = /** @class */ (function (_super) {
    __extends(PathFinder__factory, _super);
    function PathFinder__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    PathFinder__factory.prototype.deploy = function (_addressProvider, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides) {
        return _super.prototype.deploy.call(this, _addressProvider, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides || {});
    };
    PathFinder__factory.prototype.getDeployTransaction = function (_addressProvider, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides) {
        return _super.prototype.getDeployTransaction.call(this, _addressProvider, _curvePathFinder, _uniV2PathFinder, _uniV3PathFinder, overrides || {});
    };
    PathFinder__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    PathFinder__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    PathFinder__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    PathFinder__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    PathFinder__factory.bytecode = _bytecode;
    PathFinder__factory.abi = _abi;
    return PathFinder__factory;
}(ethers_1.ContractFactory));
exports.PathFinder__factory = PathFinder__factory;
