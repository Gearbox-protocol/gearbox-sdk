"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ICreditAccountData__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [],
        name: "getCreditAccountDataExtended",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "borrower",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "inUse",
                        type: "bool",
                    },
                    {
                        internalType: "address",
                        name: "creditManager",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "underlyingToken",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "borrowedAmountPlusInterest",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "totalValue",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "healthFactor",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "borrowRate",
                        type: "uint256",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "balance",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct DataTypes.TokenBalance[]",
                        name: "balances",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "repayAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "liquidationAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "canBeClosed",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "borrowedAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "cumulativeIndexAtOpen",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "since",
                        type: "uint256",
                    },
                ],
                internalType: "struct DataTypes.CreditAccountDataExtended",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getCreditManagerData",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "hasAccount",
                        type: "bool",
                    },
                    {
                        internalType: "address",
                        name: "underlyingToken",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "isWETH",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "canBorrow",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "borrowRate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "minAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "maxAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "maxLeverageFactor",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "availableLiquidity",
                        type: "uint256",
                    },
                    {
                        internalType: "address[]",
                        name: "allowedTokens",
                        type: "address[]",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "allowedContract",
                                type: "address",
                            },
                            {
                                internalType: "address",
                                name: "adapter",
                                type: "address",
                            },
                        ],
                        internalType: "struct DataTypes.ContractAdapter[]",
                        name: "adapters",
                        type: "tuple[]",
                    },
                ],
                internalType: "struct DataTypes.CreditManagerData",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var ICreditAccountData__factory = /** @class */ (function () {
    function ICreditAccountData__factory() {
    }
    ICreditAccountData__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    ICreditAccountData__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    ICreditAccountData__factory.abi = _abi;
    return ICreditAccountData__factory;
}());
exports.ICreditAccountData__factory = ICreditAccountData__factory;
