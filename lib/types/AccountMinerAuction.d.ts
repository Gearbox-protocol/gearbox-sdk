/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AccountMinerAuctionInterface extends ethers.utils.Interface {
  functions: {
    "accountFactory()": FunctionFragment;
    "getBid(address)": FunctionFragment;
    "getBidsCount()": FunctionFragment;
    "increaseBid()": FunctionFragment;
    "kind()": FunctionFragment;
    "mineAccount(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "placeBid()": FunctionFragment;
    "tail()": FunctionFragment;
    "takeBid()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBidsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kind", values?: undefined): string;
  encodeFunctionData(functionFragment: "mineAccount", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "tail", values?: undefined): string;
  encodeFunctionData(functionFragment: "takeBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mineAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AccountMined(address)": EventFragment;
    "BidIncreased(address,uint256)": EventFragment;
    "BidPlaced(address,uint256)": EventFragment;
    "BidTaken(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountMined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class AccountMinerAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AccountMinerAuctionInterface;

  functions: {
    accountFactory(overrides?: CallOverrides): Promise<[string]>;

    getBid(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        prevBid: string;
        amount: BigNumber;
        nextBid: string;
      }
    >;

    getBidsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    increaseBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kind(overrides?: CallOverrides): Promise<[string]>;

    mineAccount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    placeBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tail(overrides?: CallOverrides): Promise<[string]>;

    takeBid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountFactory(overrides?: CallOverrides): Promise<string>;

  getBid(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      prevBid: string;
      amount: BigNumber;
      nextBid: string;
    }
  >;

  getBidsCount(overrides?: CallOverrides): Promise<BigNumber>;

  increaseBid(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kind(overrides?: CallOverrides): Promise<string>;

  mineAccount(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  placeBid(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tail(overrides?: CallOverrides): Promise<string>;

  takeBid(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountFactory(overrides?: CallOverrides): Promise<string>;

    getBid(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        prevBid: string;
        amount: BigNumber;
        nextBid: string;
      }
    >;

    getBidsCount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseBid(overrides?: CallOverrides): Promise<void>;

    kind(overrides?: CallOverrides): Promise<string>;

    mineAccount(user: string, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    placeBid(overrides?: CallOverrides): Promise<void>;

    tail(overrides?: CallOverrides): Promise<string>;

    takeBid(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AccountMined(
      sponsor?: string | null
    ): TypedEventFilter<[string], { sponsor: string }>;

    BidIncreased(
      sponsor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; amount: BigNumber }
    >;

    BidPlaced(
      sponsor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; amount: BigNumber }
    >;

    BidTaken(
      sponsor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; amount: BigNumber }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    accountFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getBid(sponsor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBidsCount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kind(overrides?: CallOverrides): Promise<BigNumber>;

    mineAccount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    takeBid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBid(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mineAccount(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeBid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
