import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common";
export interface WadRayMathTestInterface extends utils.Interface {
    functions: {
        "halfRay()": FunctionFragment;
        "halfWad()": FunctionFragment;
        "ray()": FunctionFragment;
        "rayDiv(uint256,uint256)": FunctionFragment;
        "rayMul(uint256,uint256)": FunctionFragment;
        "rayToWad(uint256)": FunctionFragment;
        "wad()": FunctionFragment;
        "wadDiv(uint256,uint256)": FunctionFragment;
        "wadMul(uint256,uint256)": FunctionFragment;
        "wadToRay(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "halfRay" | "halfWad" | "ray" | "rayDiv" | "rayMul" | "rayToWad" | "wad" | "wadDiv" | "wadMul" | "wadToRay"): FunctionFragment;
    encodeFunctionData(functionFragment: "halfRay", values?: undefined): string;
    encodeFunctionData(functionFragment: "halfWad", values?: undefined): string;
    encodeFunctionData(functionFragment: "ray", values?: undefined): string;
    encodeFunctionData(functionFragment: "rayDiv", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "rayMul", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "rayToWad", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "wad", values?: undefined): string;
    encodeFunctionData(functionFragment: "wadDiv", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "wadMul", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "wadToRay", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "halfRay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "halfWad", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ray", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rayDiv", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rayMul", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rayToWad", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wad", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wadDiv", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wadMul", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wadToRay", data: BytesLike): Result;
    events: {};
}
export interface WadRayMathTest extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WadRayMathTestInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        halfRay(overrides?: CallOverrides): Promise<[BigNumber]>;
        halfWad(overrides?: CallOverrides): Promise<[BigNumber]>;
        ray(overrides?: CallOverrides): Promise<[BigNumber]>;
        rayDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        rayMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        rayToWad(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        wad(overrides?: CallOverrides): Promise<[BigNumber]>;
        wadDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        wadMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        wadToRay(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    halfRay(overrides?: CallOverrides): Promise<BigNumber>;
    halfWad(overrides?: CallOverrides): Promise<BigNumber>;
    ray(overrides?: CallOverrides): Promise<BigNumber>;
    rayDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    rayMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    rayToWad(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    wad(overrides?: CallOverrides): Promise<BigNumber>;
    wadDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    wadMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    wadToRay(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        halfRay(overrides?: CallOverrides): Promise<BigNumber>;
        halfWad(overrides?: CallOverrides): Promise<BigNumber>;
        ray(overrides?: CallOverrides): Promise<BigNumber>;
        rayDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        rayMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        rayToWad(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wad(overrides?: CallOverrides): Promise<BigNumber>;
        wadDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wadMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wadToRay(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        halfRay(overrides?: CallOverrides): Promise<BigNumber>;
        halfWad(overrides?: CallOverrides): Promise<BigNumber>;
        ray(overrides?: CallOverrides): Promise<BigNumber>;
        rayDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        rayMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        rayToWad(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wad(overrides?: CallOverrides): Promise<BigNumber>;
        wadDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wadMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        wadToRay(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        halfRay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        halfWad(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ray(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rayDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rayMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rayToWad(a: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wad(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wadDiv(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wadMul(a: BigNumberish, b: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wadToRay(a: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
